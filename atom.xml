<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
 
 <title>Nick Knowlson</title>
 <link href="http://nickknowlson.com/atom.xml" rel="self"/>
 <link href="http://nickknowlson.com/"/>
 <updated>2011-09-10T12:52:30-07:00</updated>
 <id>http://nickknowlson.com/</id>
 <author>
   <name>Nick Knowlson</name>
 </author>

 
 <entry>
   <title>Categorized Weaknesses from State of Haskell 2011</title>
   <link href="http://nickknowlson.com/blog/2011/08/27/haskell-survey-categorized-weaknesses/"/>
   <updated>2011-08-27T00:00:00-07:00</updated>
   <id>http://nickknowlson.com/blog/2011/08/27/haskell-survey-categorized-weaknesses</id>
   <content type="html">&lt;p&gt;After reading about the results of the &lt;a href='http://blog.johantibell.com/2011/08/results-from-state-of-haskell-2011.html'&gt;State of Haskell, 2011 Survey&lt;/a&gt;, I was curious about the freeform feedback given in response to &amp;#8220;What do you think is Haskell&amp;#8217;s most glaring weakness / blind spot / problem?&amp;#8221;.&lt;/p&gt;

&lt;p&gt;So I got the raw results and started reading through and categorizing them as I went. I didn&amp;#8217;t intend to do the whole thing when I started &amp;#8211; there are a LOT of answers &amp;#8211; but over a few days I finished it off.&lt;/p&gt;

&lt;p&gt;As I read each one I decided whether it would fit into an existing category or whether it deserved a new one. If one person gave multiple weaknesses I split them up and put each where it belonged. A couple of times one issue really seemed to fit in two categories, so I put it in each of them, but I tried to minimize the amount of times this happened.&lt;/p&gt;

&lt;p&gt;If you read through it carefully enough you almost definitely will see feedback in one category that should have been in another. There were a lot of responses and with continually evolving categories it is easy to make mistakes. Feel free to let me know if you see any and I&amp;#8217;ll update it.&lt;/p&gt;

&lt;h2 id='so_what_were_the_results'&gt;So what &lt;strong&gt;were&lt;/strong&gt; the results?&lt;/h2&gt;

&lt;p&gt;Here&amp;#8217;s an overview of roughly how many people thought there was a problem in each category:&lt;/p&gt;

&lt;p&gt;&lt;img alt='Weaknesses from State of Haskell Bar Graph' src='/img/state_of_haskell_2011_weakness.png' /&gt;&lt;/p&gt;

&lt;p&gt;It is probably important to note that I didn&amp;#8217;t attempt to verify the accuracy of any of the claims, so this graph represents the public &lt;strong&gt;perception&lt;/strong&gt; of where the problems are, not necessarily where the problems actually are. It is still very important information though, and likely does match up very closely with where the problems are.&lt;/p&gt;
&lt;h3&gt;Libraries, Documentation, Hackage and Cabal&lt;/h3&gt;
&lt;p&gt;The category for libraries absolutely overwhelmed the rest. I ended up splitting it into three: Libraries / Packages, Documentation / Library Documentation, Cabal, and Hackage. The feedback in the general &amp;#8216;Libraries / Packages&amp;#8217; category ranged from requests for specific kinds of libraries to pointing out dependency problems to problems with library stability and maturity. Here&amp;#8217;s a few samples:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Most libraries are not ready for production use because they &lt;br /&gt;a) are incomplete (wrt. to conformance to specifications like XML / XML InfoSet)&lt;br /&gt;b) have inacceptable performance for non-toy use (i.e. use strings, too many allocations, etc)&lt;br /&gt;c) too often change APIs or don&amp;#8217;t have a stable maintained version along with an unstable development version&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
&lt;p&gt;Competing and incomplete libraries.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
&lt;p&gt;I&amp;#8217;ve had problems with borking my packages when installing a new one. New req gets pulled in and causes global/user level dependency problems. If I didn&amp;#8217;t already know how to fix it, there&amp;#8217;s a good chance I&amp;#8217;d give up.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;A few responses in the &lt;strong&gt;Library Documentation&lt;/strong&gt; category walk a fine line between it and the &amp;#8216;hard to learn&amp;#8217; one, but enough people targeted library docs specifically that I broke it off into its own. Aside from the general statements of &amp;#8220;not enough, and what is there is largely not good&amp;#8221;, something specific that was repeatedly asked for was &lt;em&gt;more examples&lt;/em&gt;. There was some great feedback in this section:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;A lot of libraries seem to rely on only having &amp;#8220;reference&amp;#8221; documentation, that is an index of every function. This is not enough: More documentation should be written geared towards use of the library. Index and reference is good for hacking the library or doing weird stuff, but when developing, I just want to grab the library and start using it in the way the developer intended.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
&lt;p&gt;By far the biggest problem is the lack of a &amp;#8220;middle ground&amp;#8221; in documentation. There is ample beginner/tutorial documentation, and extensive &amp;#8220;academic expert&amp;#8221; documentation (proofs, discussions of mathematical properties of zippers, etc). However, there is very little &amp;#8220;application writing&amp;#8221; documentation. The problem crops up most often with libraries. Often a library that does something very useful has no non-trivial examples included, and no discussion or tutorial of how to actually put it to use. The library&amp;#8217;s API functions are often described in terms of their mathematical properties rather than what you would use them for in a &amp;#8220;real&amp;#8221; program.&lt;/p&gt;

&lt;p&gt;A few libraries I&amp;#8217;ve suffered this with include fclabels, data-accessor, fgl, and especially haxml. All of these are practically indispensable for writing applications, but have almost no application-oriented documentation. Haxml was a particularly sad case; I had to give up trying to understand it entirely due to the lack of useful documentation.&lt;/p&gt;

&lt;p&gt;This type of documentation may seem to &amp;#8220;fall out&amp;#8221; from a mathematically-oriented understanding of the library (such as haxml&amp;#8217;s combinator scheme, or the concept of &amp;#8220;lenses&amp;#8221; in fclabels), but an application programmer does not have time to work through proofs of lens properties and then figure out what they might be good for in a program. Instead, the application programmer needs cookbook-style documentation to get something up and running, and then s/he can come to understand and make use of the underlying math.&lt;/p&gt;

&lt;p&gt;One of the few libraries that does this right is Parsec. fclabels at least had a reasonable toy example, but data-accessor fails epically in this regard.&lt;/p&gt;

&lt;p&gt;If application programmers could &amp;#8220;get their programs started&amp;#8221; more easily, without having to burn so much time wading through math-oriented documentation, I believe Haskell would be more widely adopted. The existence of math-oriented documentation is a very good thing, and is quite helpful when you need to know about those properties, but such documentation is not sufficient for bootstrapping an application.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The &lt;strong&gt;Hackage&lt;/strong&gt; responses had a clear central theme of &amp;#8216;we need a way to gauge the quality of packages&amp;#8217;. People really want a way to find out how many other people are using a library, and to see what the general opinion of it is.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;It is still not always easy to know what the &amp;#8220;canonical&amp;#8221; library for a given task is, although one often exists. Hackage feels too crowded at times.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
&lt;p&gt;Hackage is a mess, it&amp;#8217;s very difficult to find libraries, it&amp;#8217;s very difficult to know which libraries are well designed for which tasks and there are no links between libraries that are similar. There are no statistics to know which libraries are widely used and no voting system. Old libraries that no longer work are sill in Hackage and it is not possible to filter them out. Package groups like yesod are a mess on Hackage, some packages are up to date, others are old, others have been folded into larger packages and will cause errors if you try to build them.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The feedback that mentioned &lt;strong&gt;Cabal&lt;/strong&gt; specifically was complaining about how cabal handles dependency problems and versioning. Notably, one person wrote in to champion cabal-dev as the solution to the exact problems everyone else is having:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;This isn&amp;#8217;t a weakness exactly. In fact, having found cabal-dev, I find it is rather a strength. I would like to see more &amp;#8220;official&amp;#8221; development done with it, and would like to see it become a part of the Haskell Platform.&lt;/p&gt;

&lt;p&gt;Without cabal-dev, the &amp;#8220;likelihood that a library will build on my machine&amp;#8221; would be very low (a 1). With it, it jumps to 5. I put in a 4, to indicate that it is a solved problem, IF one has the right tools installed. Also, I have built up a lot of bash scripts to streamline my cabal-dev workflow.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;There is a great post on the haskell reddit where &lt;a href='http://www.reddit.com/r/haskell/comments/f3ykj/psa_use_cabaldev_to_solve_dependency_problems/'&gt;jmillikin goes into detail&lt;/a&gt; about how and why cabal-dev can help with dependency hell. I am getting the impression that the real problem with cabal is just that more people need to be aware of cabal-dev!&lt;/p&gt;
&lt;h3&gt;Tools and Performance&lt;/h3&gt;
&lt;p&gt;The next largest group of responses centered around the tools available. In this category I included everything from IDEs like Leksah, to requests for better debugging and profiling tools. Very closely linked to the Tools category was Performance; most people were saying that it was difficult to reason about performance, which can be alleviated by having better tools.&lt;/p&gt;

&lt;p&gt;The feedback that mentioned &lt;strong&gt;tools&lt;/strong&gt; specifically ide stack traces space leak analysis tools profiling hard to analyze statically refactoring debugging&lt;/p&gt;
&lt;h3&gt;Learning and Teaching, Culture&lt;/h3&gt;&lt;h3&gt;GUI, Support For Other Platforms&lt;/h3&gt;&lt;h3&gt;Mainstream Usage &lt;/h3&gt;&lt;h3&gt;Language and Laziness&lt;/h3&gt;&lt;h3&gt;Stability and GHC&lt;/h3&gt;&lt;h3&gt;Other Backends, FFI, Integration&lt;/h3&gt;&lt;h3&gt;Distribution and Deployment&lt;/h3&gt;&lt;h3&gt;Doesn't Improve Productivity&lt;/h3&gt;
&lt;h2 id='responses_i_couldnt_fit_in_a_category'&gt;Responses I Couldn&amp;#8217;t Fit In A Category&lt;/h2&gt;</content>
 </entry>
 
 <entry>
   <title>Hello World!</title>
   <link href="http://nickknowlson.com/blog/2011/07/23/hello-world/"/>
   <updated>2011-07-23T00:00:00-07:00</updated>
   <id>http://nickknowlson.com/blog/2011/07/23/hello-world</id>
   <content type="html">&lt;p&gt;This site is finally live! I have put a skeleton of content up here for now just so I can get it up, but over the coming months I&amp;#8217;ll be updating my Project pages with more detail as well as screenshots. I&amp;#8217;ll also put up the occasional blog post from time to time, and these will lean towards longer, more technical posts.&lt;/p&gt;

&lt;p&gt;I meant the logo up above to be temporary, but it is kind of growing on me, so it may stay for a while.&lt;/p&gt;

&lt;p&gt;The css and javascript are a bit clunky at the moment as well, but they work well enough for the moment, and there will be lots of time to optimize the heck out of them in the future.&lt;/p&gt;

&lt;p&gt;That&amp;#8217;s about all for the introductory post, the next one will probably be about something more interesting!&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>Command line file transfer</title>
   <link href="http://nickknowlson.com/blog/2009/02/05/command-line-file-transfer/"/>
   <updated>2009-02-05T00:00:00-08:00</updated>
   <id>http://nickknowlson.com/blog/2009/02/05/command-line-file-transfer</id>
   <content type="html">&lt;p&gt;(&lt;strong&gt;**Old post alert**&lt;/strong&gt; This is an old post I dug up from sometime around college)&lt;/p&gt;

&lt;p&gt;I&amp;#8217;ve gotten really used to using bash now, so it&amp;#8217;s always a drag when I want to upload a file using sftp and lose my aliases, tab completion and everything else from my .bashrc. It&amp;#8217;s also more of a pain to copy directories.&lt;/p&gt;

&lt;p&gt;I know there are a couple of replacements for the default sftp client, and up until now, I had only tried lftp briefly. It was better,but not quite what I was looking for, and I found a bit awkward to use. Although that part could just be my own inexperience with it.&lt;/p&gt;

&lt;p&gt;Anyway, I just stumbled upon a solution to my problem that is dead simple and ALSO lets me get all the power and ease of use my personalized bash environment. Double win! It&amp;#8217;s called &lt;a href='http://fuse.sourceforge.net/sshfs.html'&gt;sshfs&lt;/a&gt; (SSH FileSystem), it&amp;#8217;s in the Debian and Ubuntu package repos already, and I doubtless should have found it a long time ago. It lets you mount a directory on your remote machine using ssh. Magical!&lt;/p&gt;

&lt;p&gt;In case you need it, here&amp;#8217;s a quick runthrough of what you need to get this working:&lt;/p&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='bash'&gt;sudo aptitude install sshfs
sshfs user@host: localmountpoint
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;It defaults to your home directory as the point to mount, but if you want to you can specify a location after &amp;#8216;host:&amp;#8217; like so:&lt;/p&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='bash'&gt;sshfs user@host:/home/user/data/ localmountpoint
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;When you&amp;#8217;re done, you can unmount it with this command:&lt;/p&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='bash'&gt;fusermount -u localmountpoint
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;If it a location that you use frequently like me, you could put an alias in your .bash_aliases file so mounting is a single &amp;#8216;mount_server&amp;#8217; command, and unmounting is &amp;#8216;unmount_server&amp;#8217;. Now when I want to upload something it&amp;#8217;s as painless as using cp or mv!&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>Haskell for great good</title>
   <link href="http://nickknowlson.com/blog/2009/01/14/haskell-for-great-good/"/>
   <updated>2009-01-14T00:00:00-08:00</updated>
   <id>http://nickknowlson.com/blog/2009/01/14/haskell-for-great-good</id>
   <content type="html">&lt;p&gt;(&lt;strong&gt;**Old post alert**&lt;/strong&gt; This is an old post I dug up from sometime around college)&lt;/p&gt;

&lt;p&gt;So I&amp;#8217;ve been doing bits of the &lt;a href='http://learnyouahaskell.com/'&gt;Learn You A Haskell For Great Good&lt;/a&gt; tutorial every now and then, and I just came across this &lt;a href='http://intoverflow.wordpress.com/2009/01/13/why-haskell-is-beyond-ready-for-prime-time/'&gt;blog post&lt;/a&gt; on Integer Overflow about why Haskell is &amp;#8220;ready for Prime Time&amp;#8221;.&lt;/p&gt;

&lt;p&gt;Now that I&amp;#8217;ve learned a bit about the basics, being told that I am able to search a repository of libraries by &lt;em&gt;type signature&lt;/em&gt; is really exciting. His example really drives it home even for those who don&amp;#8217;t know any Haskell.&lt;/p&gt;

&lt;p&gt;From the other things I&amp;#8217;ve read about Haskell in other articles (mostly that it will introduce you to new paradigms and &lt;em&gt;blow your mind&lt;/em&gt;) I am now more firmly committed than ever to do some kind of project in Haskell, just to see what it feels like.&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>Vim as an IDE</title>
   <link href="http://nickknowlson.com/blog/2008/12/16/vim-as-an-ide/"/>
   <updated>2008-12-16T00:00:00-08:00</updated>
   <id>http://nickknowlson.com/blog/2008/12/16/vim-as-an-ide</id>
   <content type="html">&lt;p&gt;(&lt;strong&gt;**Old post alert**&lt;/strong&gt; This is an old post I dug up from sometime around college)&lt;/p&gt;

&lt;p&gt;&lt;a href='http://i.imgur.com/8Yopn.png'&gt;Two&lt;/a&gt; &lt;a href='http://i.imgur.com/pZtNP.png'&gt;screenshots&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;In my linux class last year, I was introduced to vim, and I&amp;#8217;ve been fairly impressed with its powerful text-editing capabilities. What I didn&amp;#8217;t know is that it really can just about replace an IDE.&lt;/p&gt;

&lt;p&gt;What features does an IDE have that make it more useful than most text editors?&lt;/p&gt;

&lt;p&gt;Group 1&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Being able to jump to the definition of a variable, function, class etc.&lt;/li&gt;

&lt;li&gt;Autocompletion of variables, functions, classes etc.&lt;/li&gt;

&lt;li&gt;Outline of a class, with variables and functions&lt;/li&gt;

&lt;li&gt;Project explorer&lt;/li&gt;

&lt;li&gt;Syntax highlighting&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Group 2&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Compile-time error checking&lt;/li&gt;

&lt;li&gt;Step by step debugger&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Group 3&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Refactoring across projects&lt;/li&gt;

&lt;li&gt;Automatic insertion of language specific code (ex: imports needed in Eclipse, generate getters and setters in java, files that Visual Studio makes when you use the visual editor, templates in Dreamweaver)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Okay, that&amp;#8217;s quite a bit. Vim can do the first group perfectly, can sort of do the second group ( depending on language), and can&amp;#8217;t do the last one. At least as far as I know, anyway.&lt;/p&gt;

&lt;p&gt;Just recently I&amp;#8217;ve been interested in editing php with vim, so here&amp;#8217;s a few things I found out:&lt;/p&gt;

&lt;p&gt;&lt;a href='http://weierophinney.net/matthew/archives/164-Vim-Productivity-Tips-for-PHP-Developers.html'&gt;PHP parser check and running current file with the CLI&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Add the following to your .vimrc:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;quot; run file with PHP CLI (F5)
autocmd FileType php noremap &amp;lt;F5&amp;gt; :w!&amp;lt;CR&amp;gt; :!$HOME/bin/php %&amp;lt;CR&amp;gt;

&amp;quot; PHP parser check (F4)
autocmd FileType php noremap &amp;lt;F4&amp;gt; :!usr/bin/php -l &amp;lt;CR&amp;gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I changed the mappings to the function keys because &amp;#60;c-m&amp;#62; corresponds to &amp;#60;return&amp;#62; as well, which I find annoying because I like to use CTRL+ movement keys for changing windows.&lt;/p&gt;

&lt;p&gt;&lt;a href='http://www.vim.org/scripts/script.php?script_id=69'&gt;Project&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Just like what it sounds like, it opens a side window that keeps track of all your folders and files in the project that you specify. Has lots of neat features, including a project-wide search and replace, which can be useful. I suggest adding this to your .vimrc to have a &amp;#8216;Project toggle&amp;#8217; rather than typing :Project each time:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;nmap &amp;lt;silent&amp;gt; &amp;lt;F10&amp;gt; &amp;lt;plug&amp;gt;ToggleProject&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Also, since by default folds have a hideous color scheme in my theme, I added this to my .vimrc to change that a bit.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;hi Folded ctermbg=0 ctermfg=3
hi FoldColumn ctermbg=0 ctermfg=3&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Once you&amp;#8217;ve got the Project plugin installed, \C while in the Project window is the command that you&amp;#8217;ll probably want to use to help set up your first project (this took me a while). Also, make sure to use the help file that comes with the script (:help project).&lt;/p&gt;

&lt;p&gt;&lt;a href='http://www.vim.org/scripts/script.php?script_id=273'&gt;Taglist&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This opens up a side window that shows a list of classes, variables and functions in all files that you have open at the time. I set a a taglist toggle in my .vimrc file with this line: nmap &amp;#60;silent&amp;#62; &amp;#60;f12&amp;#62; :TlistToggle&amp;#60;cr&amp;#62;&lt;/p&gt;

&lt;p&gt;In taglist.vim I changed a couple of the values so that it would look a bit better:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;let Tlist_Use_Right_Window = 1 &amp;quot;so that it doesn&amp;#39;t conflict with the project plugin
let Tlist_WinWidth = 25 &amp;quot;make it a bit slimmer
let Tlist_Enable_Fold_Column = 0 &amp;quot;Disable the fold column (it&amp;#39;s thick and not too useful for me)
let Tlist_Inc_Winwidth = 0 &amp;quot;Don&amp;#39;t attempt to resize my terminal - this may vary depending on how you are running vim&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a href='http://weierophinney.net/matthew/archives/134-exuberant-ctags-with-PHP-in-Vim.html'&gt;Using ctags well&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This lets you jump around to the definition of functions, classes etc. Just follow his instructions.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Autocompletion&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&amp;#60;c-x&amp;#62; + &amp;#60;c-?&amp;#62; when in insert mode. You get a list of letters that can be used in place of ? when you press . Some notable ones are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;c-f&amp;gt;&lt;/code&gt; File - Autocompletes file names&lt;/li&gt;

&lt;li&gt;&lt;code&gt;&amp;lt;c-n&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;lt;c-p&amp;gt;&lt;/code&gt; Forward, Back respectively&lt;/li&gt;

&lt;li&gt;&lt;code&gt;&amp;lt;c-i&amp;gt;&lt;/code&gt; Path - keywords in the current and included files&lt;/li&gt;

&lt;li&gt;&lt;code&gt;&amp;lt;c-o&amp;gt;&lt;/code&gt; Omni - Omni complete.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Many thanks and full credit to Matthew Weier O&amp;#8217;Phinney, whose &lt;a href='http://weierophinney.net/matthew/archives/164-Vim-Productivity-Tips-for-PHP-Developers.html'&gt;blog post&lt;/a&gt; started me on all of this and indeed is the source of many of these tips.&lt;/p&gt;

&lt;p&gt;I didn&amp;#8217;t cover debugging, I&amp;#8217;ll save it for a later post maybe. If you&amp;#8217;re interested, go ahead and &lt;a href='http://www.vim.org/scripts/script_search_results.php?keywords=debug&amp;amp;amp;script_type=&amp;amp;amp;order_by=downloads&amp;amp;amp;direction=descending&amp;amp;amp;search=search'&gt;search the scripts&lt;/a&gt; for yourself.&lt;/p&gt;

&lt;p&gt;Also, here&amp;#8217;s some &lt;a href='http://stackoverflow.com/questions/95072/what-are-your-favorite-vim-tricks'&gt;vim tips and tricks&lt;/a&gt;!&lt;/p&gt;</content>
 </entry>
 
 
</feed>
