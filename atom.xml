<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
 
 <title>Nick Knowlson</title>
 <link href="http://nickknowlson.com/atom.xml" rel="self"/>
 <link href="http://nickknowlson.com/"/>
 <updated>2013-04-02T12:23:01-07:00</updated>
 <id>http://nickknowlson.com/</id>
 <author>
   <name>Nick Knowlson</name>
 </author>

 
 <entry>
   <title>Representing Emptiness In Scala (with Null, null, Nothing, Nil, None, and Unit)</title>
   <link href="http://nickknowlson.com/blog/2013/03/31/representing-empty-in-scala/"/>
   <updated>2013-03-31T00:00:00-07:00</updated>
   <id>http://nickknowlson.com/blog/2013/03/31/representing-empty-in-scala</id>
   <content type="html">&lt;p&gt;There are a &lt;a href='http://lousycoder.com/index.php?/archives/92-Scala-So-many-ways-to-say-nothing.html'&gt;couple&lt;/a&gt; of &lt;a href='http://oldfashionedsoftware.com/2008/08/20/a-post-about-nothing/'&gt;explanations&lt;/a&gt; of these terms out there already, but my needs weren&amp;#8217;t quite satisfied by them. Detail is great, but I wanted concise high level descriptions that explain what the primary purpose for each construct is and emphasize the ones you&amp;#8217;re most likely to see in practice. This explanation is intended to &lt;em&gt;complement&lt;/em&gt; ones with more detail, not replace them.&lt;/p&gt;
&lt;h4&gt;null&lt;/h4&gt;
&lt;p&gt;Scala&amp;#8217;s &lt;code&gt;null&lt;/code&gt; is the same as in Java. Any reference type can be &lt;code&gt;null&lt;/code&gt;, like Strings, Objects, or your own classes. Also just like Java, value types like Ints can&amp;#8217;t be &lt;code&gt;null&lt;/code&gt;. &lt;strong&gt;Odds are you'll see this
one.&lt;/strong&gt;&lt;/p&gt;
&lt;h4&gt;Null&lt;/h4&gt;
&lt;p&gt;&lt;a href='http://www.scala-lang.org/api/current/index.html#scala.Null'&gt;Null&lt;/a&gt; is a trait whose only instance is &lt;code&gt;null&lt;/code&gt;. It is a subtype of all reference types, but not of value types. It purpose in existing is to make it so reference types can be assigned &lt;code&gt;null&lt;/code&gt; and value types can&amp;#8217;t. &lt;strong&gt;Don't worry about this one.&lt;/strong&gt;&lt;/p&gt;
&lt;h4&gt;Nothing&lt;/h4&gt;
&lt;p&gt;&lt;a href='http://www.scala-lang.org/api/current/index.html#scala.Nothing'&gt;Nothing&lt;/a&gt; is a trait that is guaranteed to have &lt;em&gt;zero&lt;/em&gt; instances. It is a subtype of all other types. It has two main reasons for existing: to provide a return type for methods that &lt;strong&gt;never&lt;/strong&gt; return normally (i.e. a method that always throws an exception). The other reason is to provide a type for Nil (explained below). &lt;strong&gt;Don't worry about this
one.&lt;/strong&gt;&lt;/p&gt;
&lt;h4&gt;Nil&lt;/h4&gt;
&lt;p&gt;&lt;a href='http://www.scala-lang.org/api/current/index.html#scala.collection.immutable.Nil$'&gt;Nil&lt;/a&gt; is just an empty list, exactly like the result of &lt;code&gt;List()&lt;/code&gt;. It is of type &lt;code&gt;List[Nothing]&lt;/code&gt;. And since we know there are no instances of Nothing, we now have a list that is statically verifiable as empty. Nice to have. &lt;strong&gt;Odds are you'll see this one.&lt;/strong&gt;&lt;/p&gt;
&lt;h4&gt;None&lt;/h4&gt;
&lt;p&gt;&lt;a href='http://www.scala-lang.org/api/current/index.html#scala.None$'&gt;None&lt;/a&gt; is the counterpart to &lt;a href='http://www.scala-lang.org/api/current/index.html#scala.Some'&gt;Some&lt;/a&gt;, used when you&amp;#8217;re using Scala&amp;#8217;s &lt;a href='http://www.scala-lang.org/api/current/index.html#scala.Option'&gt;Option&lt;/a&gt; class to help avoid &lt;code&gt;null&lt;/code&gt; references. If you&amp;#8217;re not familiar with the idea of Option or Maybe, here&amp;#8217;s an &lt;a href='http://blog.danielwellman.com/2008/03/using-scalas-op.html'&gt;introduction to Option&lt;/a&gt;. &lt;strong&gt;Odds are you'll see this one.&lt;/strong&gt;&lt;/p&gt;
&lt;h4&gt;Unit&lt;/h4&gt;
&lt;p&gt;&lt;a href='http://www.scala-lang.org/api/current/index.html#scala.Unit'&gt;Unit&lt;/a&gt; in Scala is the equivalent of &lt;code&gt;void&lt;/code&gt; in Java. It&amp;#8217;s used in a function&amp;#8217;s signature when that function doesn&amp;#8217;t return a value. &lt;strong&gt;Odds are you'll see this one.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Hope this has helped!&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>Seven Languages: Week 4 (Scala) - Day 1</title>
   <link href="http://nickknowlson.com/blog/2013/03/28/seven-languages-week-4-day-1/"/>
   <updated>2013-03-28T00:00:00-07:00</updated>
   <id>http://nickknowlson.com/blog/2013/03/28/seven-languages-week-4-day-1</id>
   <content type="html">&lt;p&gt;I have to admit Day 1 of Scala was a bit of a relief. Forcing myself to think through the perspective of Prolog was enlightening but still a bit of a struggle. It&amp;#8217;s nice to come back to paradigms I&amp;#8217;m familiar with again. Scala is a hybrid language, with great support for both object-oriented and functional programming, both of which I&amp;#8217;m fairly comfortable with.&lt;/p&gt;

&lt;p&gt;That&amp;#8217;s not to say everything went smoothly however - danger lies in overfamiliarity. At first I was writing Java in Scala, then when I tried to fix it I realized I was now trying to write Haskell in Scala. Neither approach felt very good.&lt;/p&gt;

&lt;p&gt;The beauty of Scala (in my eyes) is its flexibility and practicality. It pushes you towards immutability and is capable of very succinct functional code, but it also has that mutable imperative escape hatch, and a good set of tools for working with problems that suit code like that. It will let you write in the style that is most appropriate for the problem you are trying to solve.&lt;/p&gt;

&lt;p&gt;The collection libraries in 2.8+ also deserve special mention: a lot of work has been put into them and it shows!&lt;/p&gt;
&lt;div class='interjection'&gt;&lt;p&gt;
(This article is part of a series of posts I am doing about my journey through the exercises of the book &lt;a href='http://pragprog.com/book/btlang/seven-languages-in-seven-weeks'&gt;Seven Languages In Seven Weeks&lt;/a&gt;. The article previous to this one is &lt;a href='/blog/2012/08/06/seven-languages-week-3-day-3/'&gt;Week 3 (Prolog) - Day 3&lt;/a&gt;. For an overview see the &lt;a href='/projects/seven-languages-in-seven-weeks/'&gt;Seven Languages project page&lt;/a&gt;.)
&lt;/p&gt;&lt;/div&gt;
&lt;h2 id='topics_covered'&gt;Topics Covered&lt;/h2&gt;
&lt;h3&gt;Syntax&lt;/h3&gt;
&lt;p&gt;In Day 1 we went over the basics of Scala syntax and some object-oriented features. Scala is loosely based around traditional C-style curly brace syntax with some helpful differences. The first is that you don&amp;#8217;t need semicolons at the end of the line, woohoo! Also, in &lt;a href='http://docs.scala-lang.org/style/method-invocation.html#suffix_notation'&gt;certain situations&lt;/a&gt; you can use whitespace instead of a &lt;code&gt;.&lt;/code&gt; for method calls, Haskell-style.&lt;/p&gt;

&lt;p&gt;In order to declare a variable, you must make a choice right away whether you want it to be immutable or not. Declarations using &lt;code&gt;val&lt;/code&gt; are immutable, declarations using &lt;code&gt;var&lt;/code&gt; are mutable. There are mutable and immutable versions of most of the collections in the standard library as well, but the default is immutable (you need to be explicit if you want mutable versions). As someone who is a fan of Haskell and made generous use of &lt;code&gt;final&lt;/code&gt; in Java, I really appreciate making it so easy to use immutability in Scala.&lt;/p&gt;

&lt;p&gt;Another couple of differences have to do with type information. Type information is now attached to variables with a colon and is optional in many cases (when it can be inferred from context).&lt;/p&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='scala'&gt;&lt;span class='k'&gt;val&lt;/span&gt; &lt;span class='n'&gt;i&lt;/span&gt;&lt;span class='k'&gt;:&lt;/span&gt; &lt;span class='kt'&gt;Int&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='mi'&gt;1&lt;/span&gt;  &lt;span class='c1'&gt;// explicit type info&lt;/span&gt;
&lt;span class='k'&gt;val&lt;/span&gt; &lt;span class='n'&gt;i&lt;/span&gt; &lt;span class='k'&gt;=&lt;/span&gt; &lt;span class='mi'&gt;1&lt;/span&gt;       &lt;span class='c1'&gt;// using type inference&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Scala also has &lt;a href='http://www.matthicks.com/2009/10/loops-in-scala.html'&gt;several helpful looping constructs&lt;/a&gt;, &lt;a href='http://www.scala-lang.org/api/current/index.html#scala.collection.immutable.Range'&gt;ranges&lt;/a&gt;, and &lt;a href='http://codemonkeyism.com/tuples-scala-goodness/'&gt;tuples&lt;/a&gt;, but I don&amp;#8217;t want to focus on them right now. Moving on!&lt;/p&gt;
&lt;h3&gt;Object-Oriented Features&lt;/h3&gt;&lt;h4&gt;Classes and Companion Objects&lt;/h4&gt;
&lt;p&gt;Like any good object-oriented language Scala has classes, where you can put your state and instance methods. Static methods (class methods if you prefer) are treated a bit differently - they must all reside in a static Companion Object. This is unusual but I&amp;#8217;ve found the separation kind of nice so far. Here&amp;#8217;s a stripped-down version of my TicTacToeBoard class from the exercise:&lt;/p&gt;

&lt;p&gt;(Heads up: this example depends on a few classes (Player, X, O, Blank) that are defined below under &amp;#8216;Case Classes&amp;#8217;)&lt;/p&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='scala'&gt;&lt;span class='k'&gt;class&lt;/span&gt; &lt;span class='nc'&gt;TicTacToeBoard&lt;/span&gt;&lt;span class='o'&gt;(&lt;/span&gt;&lt;span class='n'&gt;board&lt;/span&gt; &lt;span class='k'&gt;:&lt;/span&gt; &lt;span class='kt'&gt;Array&lt;/span&gt;&lt;span class='o'&gt;[&lt;/span&gt;&lt;span class='kt'&gt;Array&lt;/span&gt;&lt;span class='o'&gt;[&lt;/span&gt;&lt;span class='kt'&gt;Player&lt;/span&gt;&lt;span class='o'&gt;]])&lt;/span&gt; &lt;span class='o'&gt;{&lt;/span&gt;

    &lt;span class='k'&gt;val&lt;/span&gt; &lt;span class='n'&gt;rowCount&lt;/span&gt; &lt;span class='k'&gt;=&lt;/span&gt; &lt;span class='n'&gt;board&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='n'&gt;length&lt;/span&gt;
    &lt;span class='k'&gt;val&lt;/span&gt; &lt;span class='n'&gt;columnCount&lt;/span&gt; &lt;span class='k'&gt;=&lt;/span&gt; &lt;span class='k'&gt;if&lt;/span&gt; &lt;span class='o'&gt;(&lt;/span&gt;&lt;span class='n'&gt;board&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='n'&gt;isEmpty&lt;/span&gt;&lt;span class='o'&gt;)&lt;/span&gt; &lt;span class='mi'&gt;0&lt;/span&gt; &lt;span class='k'&gt;else&lt;/span&gt; &lt;span class='n'&gt;board&lt;/span&gt;&lt;span class='o'&gt;(&lt;/span&gt;&lt;span class='mi'&gt;0&lt;/span&gt;&lt;span class='o'&gt;).&lt;/span&gt;&lt;span class='n'&gt;length&lt;/span&gt;

    &lt;span class='k'&gt;def&lt;/span&gt; &lt;span class='n'&gt;validMove&lt;/span&gt;&lt;span class='o'&gt;(&lt;/span&gt;&lt;span class='n'&gt;row&lt;/span&gt; &lt;span class='k'&gt;:&lt;/span&gt; &lt;span class='kt'&gt;Int&lt;/span&gt;&lt;span class='o'&gt;,&lt;/span&gt; &lt;span class='n'&gt;col&lt;/span&gt; &lt;span class='k'&gt;:&lt;/span&gt; &lt;span class='kt'&gt;Int&lt;/span&gt;&lt;span class='o'&gt;)&lt;/span&gt; &lt;span class='k'&gt;:&lt;/span&gt; &lt;span class='kt'&gt;Boolean&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='o'&gt;{&lt;/span&gt;
        &lt;span class='k'&gt;return&lt;/span&gt; &lt;span class='n'&gt;row&lt;/span&gt; &lt;span class='o'&gt;&amp;lt;&lt;/span&gt; &lt;span class='n'&gt;rowCount&lt;/span&gt; &lt;span class='o'&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class='n'&gt;row&lt;/span&gt; &lt;span class='o'&gt;&amp;gt;=&lt;/span&gt; &lt;span class='mi'&gt;0&lt;/span&gt; &lt;span class='o'&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class='n'&gt;col&lt;/span&gt; &lt;span class='o'&gt;&amp;lt;&lt;/span&gt; &lt;span class='n'&gt;columnCount&lt;/span&gt; &lt;span class='o'&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class='n'&gt;col&lt;/span&gt; &lt;span class='o'&gt;&amp;gt;=&lt;/span&gt; &lt;span class='mi'&gt;0&lt;/span&gt; &lt;span class='o'&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class='n'&gt;board&lt;/span&gt;&lt;span class='o'&gt;(&lt;/span&gt;&lt;span class='n'&gt;row&lt;/span&gt;&lt;span class='o'&gt;)(&lt;/span&gt;&lt;span class='n'&gt;col&lt;/span&gt;&lt;span class='o'&gt;)&lt;/span&gt; &lt;span class='o'&gt;==&lt;/span&gt; &lt;span class='nc'&gt;Blank&lt;/span&gt;
    &lt;span class='o'&gt;}&lt;/span&gt;
&lt;span class='o'&gt;}&lt;/span&gt;

&lt;span class='k'&gt;object&lt;/span&gt; &lt;span class='nc'&gt;TicTacToeBoard&lt;/span&gt; &lt;span class='o'&gt;{&lt;/span&gt;
    &lt;span class='k'&gt;def&lt;/span&gt; &lt;span class='n'&gt;getPlayersFromString&lt;/span&gt;&lt;span class='o'&gt;(&lt;/span&gt;&lt;span class='n'&gt;row&lt;/span&gt; &lt;span class='k'&gt;:&lt;/span&gt; &lt;span class='kt'&gt;String&lt;/span&gt;&lt;span class='o'&gt;)&lt;/span&gt; &lt;span class='k'&gt;:&lt;/span&gt; &lt;span class='kt'&gt;Array&lt;/span&gt;&lt;span class='o'&gt;[&lt;/span&gt;&lt;span class='kt'&gt;Player&lt;/span&gt;&lt;span class='o'&gt;]&lt;/span&gt; &lt;span class='k'&gt;=&lt;/span&gt; &lt;span class='o'&gt;{&lt;/span&gt;
        &lt;span class='n'&gt;row&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='n'&gt;map&lt;/span&gt;&lt;span class='o'&gt;(&lt;/span&gt;&lt;span class='n'&gt;char&lt;/span&gt; &lt;span class='k'&gt;=&amp;gt;&lt;/span&gt; &lt;span class='o'&gt;{&lt;/span&gt; 
            &lt;span class='k'&gt;if&lt;/span&gt;&lt;span class='o'&gt;(&lt;/span&gt;&lt;span class='n'&gt;char&lt;/span&gt; &lt;span class='o'&gt;==&lt;/span&gt; &lt;span class='-Symbol'&gt;&amp;#39;X&lt;/span&gt;&lt;span class='err'&gt;&amp;#39;&lt;/span&gt;&lt;span class='o'&gt;)&lt;/span&gt; &lt;span class='n'&gt;X&lt;/span&gt; &lt;span class='k'&gt;:&lt;/span&gt; &lt;span class='kt'&gt;Player&lt;/span&gt; 
            &lt;span class='k'&gt;else&lt;/span&gt; &lt;span class='k'&gt;if&lt;/span&gt;&lt;span class='o'&gt;(&lt;/span&gt;&lt;span class='n'&gt;char&lt;/span&gt; &lt;span class='o'&gt;==&lt;/span&gt; &lt;span class='-Symbol'&gt;&amp;#39;O&lt;/span&gt;&lt;span class='err'&gt;&amp;#39;&lt;/span&gt;&lt;span class='o'&gt;)&lt;/span&gt; &lt;span class='n'&gt;O&lt;/span&gt; &lt;span class='k'&gt;:&lt;/span&gt; &lt;span class='kt'&gt;Player&lt;/span&gt; 
            &lt;span class='k'&gt;else&lt;/span&gt; &lt;span class='nc'&gt;Blank&lt;/span&gt; &lt;span class='k'&gt;:&lt;/span&gt; &lt;span class='kt'&gt;Player&lt;/span&gt; &lt;span class='o'&gt;}&lt;/span&gt; 
        &lt;span class='o'&gt;).&lt;/span&gt;&lt;span class='n'&gt;toArray&lt;/span&gt;
    &lt;span class='o'&gt;}&lt;/span&gt;
&lt;span class='o'&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;You could use this class like so:&lt;/p&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='scala'&gt;&lt;span class='k'&gt;val&lt;/span&gt; &lt;span class='n'&gt;board&lt;/span&gt; &lt;span class='k'&gt;=&lt;/span&gt; &lt;span class='k'&gt;new&lt;/span&gt; &lt;span class='nc'&gt;TicTacToeBoard&lt;/span&gt;&lt;span class='o'&gt;(&lt;/span&gt;&lt;span class='nc'&gt;Array&lt;/span&gt;&lt;span class='o'&gt;(&lt;/span&gt;
    &lt;span class='s'&gt;&amp;quot;XOX&amp;quot;&lt;/span&gt;&lt;span class='o'&gt;,&lt;/span&gt;
    &lt;span class='s'&gt;&amp;quot;OO &amp;quot;&lt;/span&gt;&lt;span class='o'&gt;,&lt;/span&gt;
    &lt;span class='s'&gt;&amp;quot;XXO&amp;quot;&lt;/span&gt;&lt;span class='o'&gt;).&lt;/span&gt;&lt;span class='n'&gt;map&lt;/span&gt;&lt;span class='o'&gt;(&lt;/span&gt;&lt;span class='n'&gt;row&lt;/span&gt; &lt;span class='k'&gt;=&amp;gt;&lt;/span&gt; &lt;span class='nc'&gt;TicTacToeBoard&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='n'&gt;getPlayersFromString&lt;/span&gt;&lt;span class='o'&gt;(&lt;/span&gt;&lt;span class='n'&gt;row&lt;/span&gt;&lt;span class='o'&gt;)))&lt;/span&gt;

&lt;span class='n'&gt;println&lt;/span&gt;&lt;span class='o'&gt;(&lt;/span&gt;&lt;span class='n'&gt;board&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='n'&gt;validMove&lt;/span&gt;&lt;span class='o'&gt;(&lt;/span&gt;&lt;span class='mi'&gt;0&lt;/span&gt;&lt;span class='o'&gt;,&lt;/span&gt; &lt;span class='mi'&gt;0&lt;/span&gt;&lt;span class='o'&gt;))&lt;/span&gt; &lt;span class='c1'&gt;// false&lt;/span&gt;
&lt;span class='n'&gt;println&lt;/span&gt;&lt;span class='o'&gt;(&lt;/span&gt;&lt;span class='n'&gt;board&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='n'&gt;validMove&lt;/span&gt;&lt;span class='o'&gt;(&lt;/span&gt;&lt;span class='mi'&gt;1&lt;/span&gt;&lt;span class='o'&gt;,&lt;/span&gt; &lt;span class='mi'&gt;2&lt;/span&gt;&lt;span class='o'&gt;))&lt;/span&gt; &lt;span class='c1'&gt;// true&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4&gt;Case Classes&lt;/h4&gt;
&lt;p&gt;&lt;a href='http://www.scala-lang.org/node/107'&gt;Case Classes&lt;/a&gt; are a great addition to Scala, they&amp;#8217;re really convenient. They are basically a shortcut to define simple data holding classes with a few &lt;a href='http://stackoverflow.com/questions/2312881/what-is-the-difference-between-scalas-case-class-and-class'&gt;extra features&lt;/a&gt;. The big one is that you can use case classes with pattern matching. If you&amp;#8217;re coming from Haskell, you&amp;#8217;ll be interested to know that they let you imitate algebraic datatypes smoothly and easily!&lt;/p&gt;

&lt;p&gt;Here I&amp;#8217;m using case classes (although technically they are case objects) to represent the ownership of squares on my tic tac toe board. With this code the example above is now functional and runnable.&lt;/p&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='scala'&gt;&lt;span class='k'&gt;sealed&lt;/span&gt; &lt;span class='k'&gt;abstract&lt;/span&gt; &lt;span class='k'&gt;class&lt;/span&gt; &lt;span class='nc'&gt;Player&lt;/span&gt;
&lt;span class='k'&gt;case&lt;/span&gt; &lt;span class='k'&gt;object&lt;/span&gt; &lt;span class='nc'&gt;X&lt;/span&gt; &lt;span class='k'&gt;extends&lt;/span&gt; &lt;span class='nc'&gt;Player&lt;/span&gt;
&lt;span class='k'&gt;case&lt;/span&gt; &lt;span class='k'&gt;object&lt;/span&gt; &lt;span class='nc'&gt;O&lt;/span&gt; &lt;span class='k'&gt;extends&lt;/span&gt; &lt;span class='nc'&gt;Player&lt;/span&gt;
&lt;span class='k'&gt;case&lt;/span&gt; &lt;span class='k'&gt;object&lt;/span&gt; &lt;span class='nc'&gt;Blank&lt;/span&gt; &lt;span class='k'&gt;extends&lt;/span&gt; &lt;span class='nc'&gt;Player&lt;/span&gt; &lt;span class='o'&gt;{&lt;/span&gt;
    &lt;span class='k'&gt;override&lt;/span&gt; &lt;span class='k'&gt;def&lt;/span&gt; &lt;span class='n'&gt;toString&lt;/span&gt; &lt;span class='k'&gt;=&lt;/span&gt; &lt;span class='s'&gt;&amp;quot; &amp;quot;&lt;/span&gt;
&lt;span class='o'&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This segment of code gives me pretty much what you&amp;#8217;d expect: three classes that share an abstract parent Player class. Since X, O, and Blank are defined using &lt;code&gt;object&lt;/code&gt; this results in three singleton objects &lt;code&gt;X&lt;/code&gt;, &lt;code&gt;O&lt;/code&gt;, and &lt;code&gt;Blank&lt;/code&gt;. I also get sensible default toString implementations for X and O, and I can pattern match against the classes (which I do in &lt;a href='https://github.com/nickknw/seven-languages-in-seven-weeks/blob/master/week-4-scala/day1.scala#L112'&gt;TicTacToeBoard.determineWinner&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;Instead of interfaces Scala has &lt;a href='http://www.scala-lang.org/node/126'&gt;traits&lt;/a&gt; which are great but will be talked about next post, where I will be able to show you an example from the exercise.&lt;/p&gt;

&lt;h2 id='highlights_from_exercises'&gt;Highlights From Exercises&lt;/h2&gt;

&lt;p&gt;The exercise this week was quite fun, although I did go a bit overboard with it. The aim was to create a 3x3 Tic Tac Toe game, but I thought it would be more fun to do arbitrarily large boards. I checked the rules for &lt;a href='http://en.wikipedia.org/wiki/M,n,k-game'&gt;m,n,k games&lt;/a&gt; and put a few limits in so that depending on the board size you choose you&amp;#8217;re playing &lt;a href='http://en.wikipedia.org/wiki/Tic_Tac_Toe'&gt;Tic Tac Toe&lt;/a&gt;, &lt;a href='http://en.wikipedia.org/wiki/Gomoku'&gt;Gomoku&lt;/a&gt;, &lt;a href='http://en.wikipedia.org/wiki/Connect6'&gt;Connect6&lt;/a&gt;, or some custom variation in between.&lt;/p&gt;

&lt;p&gt;Unfortunately, because of this feature creep one of my favourite bits of code from this exercise is now obsolete! I had written a really simple three in a row checking function using pattern matching, and I was (still am!) quite happy with it.&lt;/p&gt;

&lt;p&gt;It only works if you know at compile-time how many in a row you&amp;#8217;re checking for, so it sadly had to be replaced for me to expand to arbitrarily sized games. But here it is:&lt;/p&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='scala'&gt;&lt;span class='k'&gt;def&lt;/span&gt; &lt;span class='n'&gt;threeInARow&lt;/span&gt;&lt;span class='o'&gt;(&lt;/span&gt;&lt;span class='n'&gt;list&lt;/span&gt; &lt;span class='k'&gt;:&lt;/span&gt; &lt;span class='kt'&gt;List&lt;/span&gt;&lt;span class='o'&gt;[&lt;/span&gt;&lt;span class='kt'&gt;Player&lt;/span&gt;&lt;span class='o'&gt;])&lt;/span&gt; &lt;span class='k'&gt;:&lt;/span&gt; &lt;span class='kt'&gt;Option&lt;/span&gt;&lt;span class='o'&gt;[&lt;/span&gt;&lt;span class='kt'&gt;Player&lt;/span&gt;&lt;span class='o'&gt;]&lt;/span&gt; &lt;span class='k'&gt;=&lt;/span&gt; &lt;span class='n'&gt;list&lt;/span&gt; &lt;span class='k'&gt;match&lt;/span&gt; &lt;span class='o'&gt;{&lt;/span&gt;
    &lt;span class='k'&gt;case&lt;/span&gt; &lt;span class='nc'&gt;Nil&lt;/span&gt; &lt;span class='k'&gt;=&amp;gt;&lt;/span&gt; &lt;span class='nc'&gt;None&lt;/span&gt;
    &lt;span class='k'&gt;case&lt;/span&gt; &lt;span class='n'&gt;x&lt;/span&gt; &lt;span class='o'&gt;::&lt;/span&gt; &lt;span class='n'&gt;y&lt;/span&gt; &lt;span class='o'&gt;::&lt;/span&gt; &lt;span class='n'&gt;z&lt;/span&gt; &lt;span class='o'&gt;::&lt;/span&gt; &lt;span class='k'&gt;_&lt;/span&gt; &lt;span class='k'&gt;if&lt;/span&gt; &lt;span class='n'&gt;x&lt;/span&gt; &lt;span class='o'&gt;==&lt;/span&gt; &lt;span class='n'&gt;y&lt;/span&gt; &lt;span class='o'&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class='n'&gt;y&lt;/span&gt; &lt;span class='o'&gt;==&lt;/span&gt; &lt;span class='n'&gt;z&lt;/span&gt; &lt;span class='o'&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class='n'&gt;z&lt;/span&gt; &lt;span class='o'&gt;!=&lt;/span&gt; &lt;span class='nc'&gt;Blank&lt;/span&gt; &lt;span class='k'&gt;=&amp;gt;&lt;/span&gt; &lt;span class='nc'&gt;Some&lt;/span&gt;&lt;span class='o'&gt;(&lt;/span&gt;&lt;span class='n'&gt;z&lt;/span&gt;&lt;span class='o'&gt;)&lt;/span&gt;
    &lt;span class='k'&gt;case&lt;/span&gt; &lt;span class='k'&gt;_&lt;/span&gt; &lt;span class='o'&gt;::&lt;/span&gt; &lt;span class='n'&gt;tail&lt;/span&gt; &lt;span class='k'&gt;=&amp;gt;&lt;/span&gt; &lt;span class='n'&gt;threeInARow&lt;/span&gt;&lt;span class='o'&gt;(&lt;/span&gt;&lt;span class='n'&gt;tail&lt;/span&gt;&lt;span class='o'&gt;)&lt;/span&gt;
&lt;span class='o'&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The code behind &lt;a href='https://github.com/nickknw/seven-languages-in-seven-weeks/blob/master/week-4-scala/day1.scala#L112'&gt;determineWinner&lt;/a&gt; is also pretty cool looking, although I don&amp;#8217;t know enough about Scala style yet to know whether it&amp;#8217;s good or not! Anyway, I define a local function called &lt;code&gt;checkForWinner&lt;/code&gt; and the rest of the method becomes really readable:&lt;/p&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='scala'&gt;&lt;span class='n'&gt;rows&lt;/span&gt; &lt;span class='n'&gt;foreach&lt;/span&gt; &lt;span class='n'&gt;checkForWinner&lt;/span&gt;
&lt;span class='n'&gt;columns&lt;/span&gt; &lt;span class='n'&gt;foreach&lt;/span&gt; &lt;span class='n'&gt;checkForWinner&lt;/span&gt;
&lt;span class='n'&gt;diagonalsLTR&lt;/span&gt; &lt;span class='n'&gt;foreach&lt;/span&gt; &lt;span class='n'&gt;checkForWinner&lt;/span&gt;
&lt;span class='n'&gt;diagonalsRTL&lt;/span&gt; &lt;span class='n'&gt;foreach&lt;/span&gt; &lt;span class='n'&gt;checkForWinner&lt;/span&gt;

&lt;span class='k'&gt;if&lt;/span&gt;&lt;span class='o'&gt;(&lt;/span&gt;&lt;span class='n'&gt;board&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='n'&gt;map&lt;/span&gt;&lt;span class='o'&gt;(&lt;/span&gt;&lt;span class='n'&gt;row&lt;/span&gt; &lt;span class='k'&gt;=&amp;gt;&lt;/span&gt; &lt;span class='n'&gt;row&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='n'&gt;contains&lt;/span&gt;&lt;span class='o'&gt;(&lt;/span&gt;&lt;span class='nc'&gt;Blank&lt;/span&gt;&lt;span class='o'&gt;)).&lt;/span&gt;&lt;span class='n'&gt;contains&lt;/span&gt;&lt;span class='o'&gt;(&lt;/span&gt;&lt;span class='kc'&gt;true&lt;/span&gt;&lt;span class='o'&gt;))&lt;/span&gt; &lt;span class='o'&gt;{&lt;/span&gt;
    &lt;span class='k'&gt;return&lt;/span&gt; &lt;span class='nc'&gt;GameResult&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='nc'&gt;NoResult&lt;/span&gt;
&lt;span class='o'&gt;}&lt;/span&gt;

&lt;span class='k'&gt;return&lt;/span&gt; &lt;span class='nc'&gt;GameResult&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='nc'&gt;Tie&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;I actually went overboard in another way on this exercise - I spent a lot of time making it solid and usable. I mean, it&amp;#8217;s just command-line Tic Tac Toe, but hopefully it&amp;#8217;s the best damn command-line Tic Tac Toes it could be.&lt;/p&gt;

&lt;p&gt;Anyway, I decided it may as well have a permanent home and I gave it its own project page: &lt;a href='/projects/arbitrarily-sized-tic-tac-toe/'&gt;Arbitrarily-Sized Tic Tac Toe&lt;/a&gt;!&lt;/p&gt;

&lt;p&gt;Here&amp;#8217;s a peek at the regular size:&lt;/p&gt;
&lt;div class='symmetrical_line_height'&gt;
&lt;pre&gt;&lt;code&gt;
Player X's turn.
Enter square: (e.g. A0): a2

     A   B   C   
   ┌───┬───┬───┐
0  │ X │ X │ O │
   │───│───│───│
1  │   │ O │   │
   │───│───│───│
2  │ X │   │   │
   └───┴───┴───┘
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;If you want to see how it handles bigger boards, go ahead and &lt;a href='/projects/arbitrarily-sized-tic-tac-toe/'&gt;try it out&lt;/a&gt;!&lt;/p&gt;

&lt;h2 id='full_solutions'&gt;Full solutions&lt;/h2&gt;

&lt;p&gt;Here is a nicely formatted version of my solutions to the exercises from Day 1 of Scala. The home of the following code is &lt;a href='https://github.com/nickknw/seven-languages-in-seven-weeks/blob/master/week-4-scala/day1.scala'&gt;on github&lt;/a&gt; with the other exercises.&lt;/p&gt;
&lt;div id='formatted_solutions'&gt;

&lt;h3&gt;Find:&lt;/h3&gt;

&lt;div class='question'&gt;&lt;b&gt;1.&lt;/b&gt; The Scala API&lt;/div&gt;

&lt;p&gt;&lt;a href='http://www.scala-lang.org/api/current/index.html'&gt;http://www.scala-lang.org/api/current/index.html&lt;/a&gt;&lt;/p&gt;

&lt;div class='question'&gt;&lt;b&gt;2.&lt;/b&gt; A comparison of Java and Scala&lt;/div&gt;

&lt;ul&gt;
   &lt;li&gt;Quite a nice article, well-written, good detail level&lt;/li&gt;
   &lt;ul&gt;&lt;li&gt;&lt;li&gt;&lt;a href='http://www.ibm.com/developerworks/java/library/j-scala01228/index.html'&gt;http://www.ibm.com/developerworks/java/library/j-scala01228/index.html&lt;/a&gt;&lt;/li&gt;&lt;/li&gt;&lt;/ul&gt;

   &lt;li&gt;Overiew/summary level comparison of Java, Scala, Groovy, Clojure&lt;/li&gt;
   &lt;ul&gt;&lt;li&gt;&lt;li&gt;&lt;a href='http://stackoverflow.com/questions/1314732/scala-vs-groovy-vs-clojure'&gt;http://stackoverflow.com/questions/1314732/scala-vs-groovy-vs-clojure&lt;/a&gt;&lt;/li&gt;&lt;/li&gt;&lt;/ul&gt;

   &lt;li&gt;This is funny and kind of revealing, even if the question leads to a bit of a biased picture.&lt;/li&gt;
   &lt;ul&gt;&lt;li&gt;&lt;li&gt;&lt;a href='http://stackoverflow.com/questions/2952732/samples-of-scala-and-java-code-where-scala-code-looks-simpler-has-fewer-lines'&gt;http://stackoverflow.com/questions/2952732/samples-of-scala-and-java-code-where-scala-code-looks-simpler-has-fewer-lines&lt;/a&gt;&lt;/li&gt;&lt;/li&gt;&lt;/ul&gt;

   &lt;li&gt;More low-level comparison&lt;/li&gt;
   &lt;ul&gt;&lt;li&gt;&lt;li&gt;&lt;a href='http://blogs.sun.com/sundararajan/entry/scala_for_java_programmers'&gt;http://blogs.sun.com/sundararajan/entry/scala_for_java_programmers&lt;/a&gt;&lt;/li&gt;&lt;/li&gt;&lt;/ul&gt;

   &lt;li&gt;Some more&lt;/li&gt;
   &lt;ul&gt;&lt;li&gt;&lt;li&gt;&lt;a href='http://www.artima.com/scalazine/articles/scalable-language.html'&gt;http://www.artima.com/scalazine/articles/scalable-language.html&lt;/a&gt;&lt;/li&gt;&lt;/li&gt;
   &lt;li&gt;&lt;li&gt;&lt;a href='http://www.ibm.com/developerworks/java/library/j-scala01228/index.html'&gt;http://www.ibm.com/developerworks/java/library/j-scala01228/index.html&lt;/a&gt;&lt;/li&gt;&lt;/li&gt;&lt;/ul&gt;
&lt;/ul&gt;

&lt;div class='question'&gt;&lt;b&gt;3.&lt;/b&gt; A discussion of val versus var&lt;/div&gt;

&lt;p&gt;&lt;a href='http://stackoverflow.com/questions/1791408/what-is-the-difference-between-a-var-and-val-definition-in-scala'&gt;http://stackoverflow.com/questions/1791408/what-is-the-difference-between-a-var-and-val-definition-in-scala&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;Do:&lt;/h3&gt;

&lt;div class='question'&gt;&lt;b&gt;1.&lt;/b&gt; Write a game that will take a tic-tac-toe board with X, O, and blank characters and detect the winner or whether there is a tie or no winner yet.  Use classes where appropriate.&lt;/div&gt;


&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='scala'&gt;&lt;span class='c1'&gt;// Run this file with &amp;#39;scala -Dfile.encoding=UTF-8 day1.scala&amp;#39;&lt;/span&gt;

&lt;span class='k'&gt;sealed&lt;/span&gt; &lt;span class='k'&gt;abstract&lt;/span&gt; &lt;span class='k'&gt;class&lt;/span&gt; &lt;span class='nc'&gt;Player&lt;/span&gt;
&lt;span class='k'&gt;case&lt;/span&gt; &lt;span class='k'&gt;object&lt;/span&gt; &lt;span class='nc'&gt;X&lt;/span&gt; &lt;span class='k'&gt;extends&lt;/span&gt; &lt;span class='nc'&gt;Player&lt;/span&gt;
&lt;span class='k'&gt;case&lt;/span&gt; &lt;span class='k'&gt;object&lt;/span&gt; &lt;span class='nc'&gt;O&lt;/span&gt; &lt;span class='k'&gt;extends&lt;/span&gt; &lt;span class='nc'&gt;Player&lt;/span&gt;
&lt;span class='k'&gt;case&lt;/span&gt; &lt;span class='k'&gt;object&lt;/span&gt; &lt;span class='nc'&gt;Blank&lt;/span&gt; &lt;span class='k'&gt;extends&lt;/span&gt; &lt;span class='nc'&gt;Player&lt;/span&gt; &lt;span class='o'&gt;{&lt;/span&gt;
    &lt;span class='k'&gt;override&lt;/span&gt; &lt;span class='k'&gt;def&lt;/span&gt; &lt;span class='n'&gt;toString&lt;/span&gt; &lt;span class='k'&gt;=&lt;/span&gt; &lt;span class='s'&gt;&amp;quot; &amp;quot;&lt;/span&gt;
&lt;span class='o'&gt;}&lt;/span&gt;

&lt;span class='k'&gt;object&lt;/span&gt; &lt;span class='nc'&gt;GameResult&lt;/span&gt; &lt;span class='k'&gt;extends&lt;/span&gt; &lt;span class='nc'&gt;Enumeration&lt;/span&gt; &lt;span class='o'&gt;{&lt;/span&gt;
    &lt;span class='k'&gt;type&lt;/span&gt; &lt;span class='kt'&gt;GameResult&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='nc'&gt;Value&lt;/span&gt;
    &lt;span class='k'&gt;val&lt;/span&gt; &lt;span class='n'&gt;X&lt;/span&gt;&lt;span class='o'&gt;,&lt;/span&gt; &lt;span class='n'&gt;O&lt;/span&gt;&lt;span class='o'&gt;,&lt;/span&gt; &lt;span class='nc'&gt;Tie&lt;/span&gt;&lt;span class='o'&gt;,&lt;/span&gt; &lt;span class='nc'&gt;NoResult&lt;/span&gt; &lt;span class='k'&gt;=&lt;/span&gt; &lt;span class='nc'&gt;Value&lt;/span&gt;

    &lt;span class='k'&gt;def&lt;/span&gt; &lt;span class='n'&gt;displayGameResult&lt;/span&gt;&lt;span class='o'&gt;(&lt;/span&gt;&lt;span class='n'&gt;gameResult&lt;/span&gt;&lt;span class='k'&gt;:&lt;/span&gt; &lt;span class='kt'&gt;GameResult&lt;/span&gt;&lt;span class='o'&gt;)&lt;/span&gt; &lt;span class='k'&gt;:&lt;/span&gt; &lt;span class='kt'&gt;String&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='o'&gt;{&lt;/span&gt;
        &lt;span class='k'&gt;val&lt;/span&gt; &lt;span class='n'&gt;winnerText&lt;/span&gt; &lt;span class='k'&gt;=&lt;/span&gt; &lt;span class='s'&gt;&amp;quot;Player %s won!&amp;quot;&lt;/span&gt;

        &lt;span class='n'&gt;gameResult&lt;/span&gt; &lt;span class='k'&gt;match&lt;/span&gt; &lt;span class='o'&gt;{&lt;/span&gt;
            &lt;span class='k'&gt;case&lt;/span&gt; &lt;span class='nc'&gt;GameResult&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='nc'&gt;NoResult&lt;/span&gt; &lt;span class='k'&gt;=&amp;gt;&lt;/span&gt; &lt;span class='s'&gt;&amp;quot;No winner yet!&amp;quot;&lt;/span&gt;
            &lt;span class='k'&gt;case&lt;/span&gt; &lt;span class='nc'&gt;GameResult&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='nc'&gt;Tie&lt;/span&gt; &lt;span class='k'&gt;=&amp;gt;&lt;/span&gt; &lt;span class='s'&gt;&amp;quot;It&amp;#39;s a tie!&amp;quot;&lt;/span&gt;
            &lt;span class='k'&gt;case&lt;/span&gt; &lt;span class='n'&gt;player&lt;/span&gt; &lt;span class='k'&gt;=&amp;gt;&lt;/span&gt; &lt;span class='n'&gt;winnerText&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='n'&gt;format&lt;/span&gt;&lt;span class='o'&gt;(&lt;/span&gt;&lt;span class='n'&gt;player&lt;/span&gt;&lt;span class='o'&gt;)&lt;/span&gt;
        &lt;span class='o'&gt;}&lt;/span&gt;
    &lt;span class='o'&gt;}&lt;/span&gt;
&lt;span class='o'&gt;}&lt;/span&gt;

&lt;span class='k'&gt;class&lt;/span&gt; &lt;span class='nc'&gt;TicTacToeBoard&lt;/span&gt;&lt;span class='o'&gt;(&lt;/span&gt;&lt;span class='n'&gt;board&lt;/span&gt; &lt;span class='k'&gt;:&lt;/span&gt; &lt;span class='kt'&gt;Array&lt;/span&gt;&lt;span class='o'&gt;[&lt;/span&gt;&lt;span class='kt'&gt;Array&lt;/span&gt;&lt;span class='o'&gt;[&lt;/span&gt;&lt;span class='kt'&gt;Player&lt;/span&gt;&lt;span class='o'&gt;]])&lt;/span&gt; &lt;span class='o'&gt;{&lt;/span&gt;

    &lt;span class='k'&gt;def&lt;/span&gt; &lt;span class='k'&gt;this&lt;/span&gt;&lt;span class='o'&gt;(&lt;/span&gt;&lt;span class='n'&gt;stringBoard&lt;/span&gt;&lt;span class='k'&gt;:&lt;/span&gt; &lt;span class='kt'&gt;Array&lt;/span&gt;&lt;span class='o'&gt;[&lt;/span&gt;&lt;span class='kt'&gt;String&lt;/span&gt;&lt;span class='o'&gt;])&lt;/span&gt; &lt;span class='k'&gt;=&lt;/span&gt; &lt;span class='k'&gt;this&lt;/span&gt;&lt;span class='o'&gt;(&lt;/span&gt;&lt;span class='n'&gt;stringBoard&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='n'&gt;map&lt;/span&gt;&lt;span class='o'&gt;(&lt;/span&gt;&lt;span class='n'&gt;row&lt;/span&gt; &lt;span class='k'&gt;=&amp;gt;&lt;/span&gt; &lt;span class='nc'&gt;TicTacToeBoard&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='n'&gt;getPlayersFromString&lt;/span&gt;&lt;span class='o'&gt;(&lt;/span&gt;&lt;span class='n'&gt;row&lt;/span&gt;&lt;span class='o'&gt;)))&lt;/span&gt;
    &lt;span class='k'&gt;def&lt;/span&gt; &lt;span class='k'&gt;this&lt;/span&gt;&lt;span class='o'&gt;(&lt;/span&gt;&lt;span class='n'&gt;rows&lt;/span&gt;&lt;span class='k'&gt;:&lt;/span&gt; &lt;span class='kt'&gt;Int&lt;/span&gt;&lt;span class='o'&gt;,&lt;/span&gt; &lt;span class='n'&gt;cols&lt;/span&gt;&lt;span class='k'&gt;:&lt;/span&gt; &lt;span class='kt'&gt;Int&lt;/span&gt;&lt;span class='o'&gt;)&lt;/span&gt; &lt;span class='k'&gt;=&lt;/span&gt; &lt;span class='k'&gt;this&lt;/span&gt;&lt;span class='o'&gt;(&lt;/span&gt;&lt;span class='nc'&gt;Array&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='n'&gt;fill&lt;/span&gt;&lt;span class='o'&gt;(&lt;/span&gt;&lt;span class='n'&gt;rows&lt;/span&gt;&lt;span class='o'&gt;,&lt;/span&gt; &lt;span class='n'&gt;cols&lt;/span&gt;&lt;span class='o'&gt;)(&lt;/span&gt;&lt;span class='nc'&gt;Blank&lt;/span&gt;&lt;span class='o'&gt;)&lt;/span&gt; &lt;span class='k'&gt;:&lt;/span&gt; &lt;span class='kt'&gt;Array&lt;/span&gt;&lt;span class='o'&gt;[&lt;/span&gt;&lt;span class='kt'&gt;Array&lt;/span&gt;&lt;span class='o'&gt;[&lt;/span&gt;&lt;span class='kt'&gt;Player&lt;/span&gt;&lt;span class='o'&gt;]])&lt;/span&gt;
    &lt;span class='k'&gt;def&lt;/span&gt; &lt;span class='k'&gt;this&lt;/span&gt;&lt;span class='o'&gt;(&lt;/span&gt;&lt;span class='n'&gt;size&lt;/span&gt;&lt;span class='k'&gt;:&lt;/span&gt; &lt;span class='kt'&gt;Int&lt;/span&gt;&lt;span class='o'&gt;)&lt;/span&gt; &lt;span class='k'&gt;=&lt;/span&gt; &lt;span class='k'&gt;this&lt;/span&gt;&lt;span class='o'&gt;(&lt;/span&gt;&lt;span class='n'&gt;size&lt;/span&gt;&lt;span class='o'&gt;,&lt;/span&gt; &lt;span class='n'&gt;size&lt;/span&gt;&lt;span class='o'&gt;)&lt;/span&gt;

    &lt;span class='k'&gt;val&lt;/span&gt; &lt;span class='n'&gt;rowCount&lt;/span&gt; &lt;span class='k'&gt;=&lt;/span&gt; &lt;span class='n'&gt;board&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='n'&gt;length&lt;/span&gt;
    &lt;span class='k'&gt;val&lt;/span&gt; &lt;span class='n'&gt;columnCount&lt;/span&gt; &lt;span class='k'&gt;=&lt;/span&gt; &lt;span class='k'&gt;if&lt;/span&gt; &lt;span class='o'&gt;(&lt;/span&gt;&lt;span class='n'&gt;board&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='n'&gt;isEmpty&lt;/span&gt;&lt;span class='o'&gt;)&lt;/span&gt; &lt;span class='mi'&gt;0&lt;/span&gt; &lt;span class='k'&gt;else&lt;/span&gt; &lt;span class='n'&gt;board&lt;/span&gt;&lt;span class='o'&gt;(&lt;/span&gt;&lt;span class='mi'&gt;0&lt;/span&gt;&lt;span class='o'&gt;).&lt;/span&gt;&lt;span class='n'&gt;length&lt;/span&gt;
    &lt;span class='k'&gt;val&lt;/span&gt; &lt;span class='n'&gt;columnNameMapping&lt;/span&gt; &lt;span class='k'&gt;=&lt;/span&gt; &lt;span class='o'&gt;(&lt;/span&gt;&lt;span class='mi'&gt;0&lt;/span&gt; &lt;span class='n'&gt;until&lt;/span&gt; &lt;span class='mi'&gt;5&lt;/span&gt;&lt;span class='o'&gt;*&lt;/span&gt;&lt;span class='n'&gt;columnCount&lt;/span&gt;&lt;span class='o'&gt;).&lt;/span&gt;&lt;span class='n'&gt;map&lt;/span&gt;&lt;span class='o'&gt;(&lt;/span&gt;&lt;span class='n'&gt;n&lt;/span&gt; &lt;span class='k'&gt;=&amp;gt;&lt;/span&gt; &lt;span class='o'&gt;(&lt;/span&gt;&lt;span class='nc'&gt;TicTacToeBoard&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='n'&gt;numToAlpha&lt;/span&gt;&lt;span class='o'&gt;(&lt;/span&gt;&lt;span class='n'&gt;n&lt;/span&gt;&lt;span class='o'&gt;),&lt;/span&gt; &lt;span class='n'&gt;n&lt;/span&gt;&lt;span class='o'&gt;)).&lt;/span&gt;&lt;span class='n'&gt;toMap&lt;/span&gt;

    &lt;span class='k'&gt;val&lt;/span&gt; &lt;span class='n'&gt;numInARowNeeded&lt;/span&gt; &lt;span class='k'&gt;:&lt;/span&gt; &lt;span class='kt'&gt;Int&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='o'&gt;{&lt;/span&gt;
        &lt;span class='c1'&gt;// numbers chosen rather arbitrarily by me. I looked at this: http://en.wikipedia.org/wiki/M,n,k-game&lt;/span&gt;
        &lt;span class='c1'&gt;// and tried to pick numbers that more or less made sense&lt;/span&gt;
        &lt;span class='k'&gt;if&lt;/span&gt;&lt;span class='o'&gt;(&lt;/span&gt;&lt;span class='n'&gt;rowCount&lt;/span&gt; &lt;span class='o'&gt;&amp;lt;=&lt;/span&gt; &lt;span class='mi'&gt;3&lt;/span&gt;&lt;span class='o'&gt;||&lt;/span&gt; &lt;span class='n'&gt;columnCount&lt;/span&gt; &lt;span class='o'&gt;&amp;lt;=&lt;/span&gt; &lt;span class='mi'&gt;3&lt;/span&gt;&lt;span class='o'&gt;)&lt;/span&gt;
        &lt;span class='o'&gt;{&lt;/span&gt;
            &lt;span class='c1'&gt;// tic tac toe or bizarre tiny variants&lt;/span&gt;
            &lt;span class='n'&gt;scala&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='n'&gt;math&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='n'&gt;min&lt;/span&gt;&lt;span class='o'&gt;(&lt;/span&gt;&lt;span class='n'&gt;rowCount&lt;/span&gt;&lt;span class='o'&gt;,&lt;/span&gt; &lt;span class='n'&gt;columnCount&lt;/span&gt;&lt;span class='o'&gt;)&lt;/span&gt;
        &lt;span class='o'&gt;}&lt;/span&gt; &lt;span class='k'&gt;else&lt;/span&gt; &lt;span class='k'&gt;if&lt;/span&gt;&lt;span class='o'&gt;(&lt;/span&gt;&lt;span class='n'&gt;rowCount&lt;/span&gt; &lt;span class='o'&gt;&amp;lt;=&lt;/span&gt; &lt;span class='mi'&gt;5&lt;/span&gt;&lt;span class='o'&gt;)&lt;/span&gt; &lt;span class='o'&gt;{&lt;/span&gt;
            &lt;span class='c1'&gt;// connect 4, sort of&lt;/span&gt;
            &lt;span class='mi'&gt;4&lt;/span&gt;
        &lt;span class='o'&gt;}&lt;/span&gt; &lt;span class='k'&gt;else&lt;/span&gt; &lt;span class='k'&gt;if&lt;/span&gt;&lt;span class='o'&gt;(&lt;/span&gt;&lt;span class='n'&gt;rowCount&lt;/span&gt; &lt;span class='o'&gt;&amp;lt;=&lt;/span&gt; &lt;span class='mi'&gt;14&lt;/span&gt;&lt;span class='o'&gt;)&lt;/span&gt; &lt;span class='o'&gt;{&lt;/span&gt;
            &lt;span class='c1'&gt;// gomoku&lt;/span&gt;
            &lt;span class='mi'&gt;5&lt;/span&gt;
        &lt;span class='o'&gt;}&lt;/span&gt; &lt;span class='k'&gt;else&lt;/span&gt; &lt;span class='o'&gt;{&lt;/span&gt;
            &lt;span class='c1'&gt;// connect6. Seems like a good place to leave it&lt;/span&gt;
            &lt;span class='mi'&gt;6&lt;/span&gt;
        &lt;span class='o'&gt;}&lt;/span&gt;
    &lt;span class='o'&gt;}&lt;/span&gt;

    &lt;span class='k'&gt;def&lt;/span&gt; &lt;span class='n'&gt;rows&lt;/span&gt;&lt;span class='k'&gt;:&lt;/span&gt; &lt;span class='kt'&gt;Seq&lt;/span&gt;&lt;span class='o'&gt;[&lt;/span&gt;&lt;span class='kt'&gt;Array&lt;/span&gt;&lt;span class='o'&gt;[&lt;/span&gt;&lt;span class='kt'&gt;Player&lt;/span&gt;&lt;span class='o'&gt;]]&lt;/span&gt; &lt;span class='k'&gt;=&lt;/span&gt; &lt;span class='o'&gt;{&lt;/span&gt;
        &lt;span class='k'&gt;for&lt;/span&gt;&lt;span class='o'&gt;(&lt;/span&gt;&lt;span class='n'&gt;r&lt;/span&gt; &lt;span class='k'&gt;&amp;lt;-&lt;/span&gt; &lt;span class='mi'&gt;0&lt;/span&gt; &lt;span class='n'&gt;until&lt;/span&gt; &lt;span class='n'&gt;rowCount&lt;/span&gt;&lt;span class='o'&gt;)&lt;/span&gt; 
            &lt;span class='k'&gt;yield&lt;/span&gt; &lt;span class='n'&gt;board&lt;/span&gt;&lt;span class='o'&gt;(&lt;/span&gt;&lt;span class='n'&gt;r&lt;/span&gt;&lt;span class='o'&gt;)&lt;/span&gt;
    &lt;span class='o'&gt;}&lt;/span&gt;

    &lt;span class='k'&gt;def&lt;/span&gt; &lt;span class='n'&gt;columns&lt;/span&gt;&lt;span class='k'&gt;:&lt;/span&gt; &lt;span class='kt'&gt;Seq&lt;/span&gt;&lt;span class='o'&gt;[&lt;/span&gt;&lt;span class='kt'&gt;Array&lt;/span&gt;&lt;span class='o'&gt;[&lt;/span&gt;&lt;span class='kt'&gt;Player&lt;/span&gt;&lt;span class='o'&gt;]]&lt;/span&gt; &lt;span class='k'&gt;=&lt;/span&gt; &lt;span class='o'&gt;{&lt;/span&gt;
        &lt;span class='k'&gt;for&lt;/span&gt;&lt;span class='o'&gt;(&lt;/span&gt;&lt;span class='n'&gt;c&lt;/span&gt; &lt;span class='k'&gt;&amp;lt;-&lt;/span&gt; &lt;span class='mi'&gt;0&lt;/span&gt; &lt;span class='n'&gt;until&lt;/span&gt; &lt;span class='n'&gt;columnCount&lt;/span&gt;&lt;span class='o'&gt;)&lt;/span&gt; &lt;span class='k'&gt;yield&lt;/span&gt; &lt;span class='o'&gt;(&lt;/span&gt;
            &lt;span class='k'&gt;for&lt;/span&gt;&lt;span class='o'&gt;(&lt;/span&gt;&lt;span class='n'&gt;r&lt;/span&gt; &lt;span class='k'&gt;&amp;lt;-&lt;/span&gt; &lt;span class='o'&gt;(&lt;/span&gt;&lt;span class='mi'&gt;0&lt;/span&gt; &lt;span class='n'&gt;until&lt;/span&gt; &lt;span class='n'&gt;rowCount&lt;/span&gt;&lt;span class='o'&gt;))&lt;/span&gt; 
                &lt;span class='k'&gt;yield&lt;/span&gt; &lt;span class='n'&gt;board&lt;/span&gt;&lt;span class='o'&gt;(&lt;/span&gt;&lt;span class='n'&gt;r&lt;/span&gt;&lt;span class='o'&gt;)(&lt;/span&gt;&lt;span class='n'&gt;c&lt;/span&gt;&lt;span class='o'&gt;)).&lt;/span&gt;&lt;span class='n'&gt;toArray&lt;/span&gt;
    &lt;span class='o'&gt;}&lt;/span&gt;

    &lt;span class='k'&gt;def&lt;/span&gt; &lt;span class='n'&gt;diagonalsLTR&lt;/span&gt;&lt;span class='k'&gt;:&lt;/span&gt; &lt;span class='kt'&gt;Seq&lt;/span&gt;&lt;span class='o'&gt;[&lt;/span&gt;&lt;span class='kt'&gt;Array&lt;/span&gt;&lt;span class='o'&gt;[&lt;/span&gt;&lt;span class='kt'&gt;Player&lt;/span&gt;&lt;span class='o'&gt;]]&lt;/span&gt; &lt;span class='k'&gt;=&lt;/span&gt; &lt;span class='o'&gt;{&lt;/span&gt;
        &lt;span class='k'&gt;for&lt;/span&gt;&lt;span class='o'&gt;(&lt;/span&gt;&lt;span class='n'&gt;offset&lt;/span&gt; &lt;span class='k'&gt;&amp;lt;-&lt;/span&gt; &lt;span class='o'&gt;(&lt;/span&gt;&lt;span class='mi'&gt;1&lt;/span&gt;&lt;span class='o'&gt;-&lt;/span&gt;&lt;span class='n'&gt;columnCount&lt;/span&gt;&lt;span class='o'&gt;)&lt;/span&gt; &lt;span class='n'&gt;until&lt;/span&gt; &lt;span class='n'&gt;columnCount&lt;/span&gt;&lt;span class='o'&gt;)&lt;/span&gt; &lt;span class='k'&gt;yield&lt;/span&gt; &lt;span class='o'&gt;(&lt;/span&gt;
            &lt;span class='k'&gt;for&lt;/span&gt;&lt;span class='o'&gt;(&lt;/span&gt;&lt;span class='n'&gt;row&lt;/span&gt; &lt;span class='k'&gt;&amp;lt;-&lt;/span&gt; &lt;span class='mi'&gt;0&lt;/span&gt; &lt;span class='n'&gt;until&lt;/span&gt; &lt;span class='n'&gt;rowCount&lt;/span&gt; &lt;span class='k'&gt;if&lt;/span&gt; &lt;span class='n'&gt;offset&lt;/span&gt; &lt;span class='o'&gt;+&lt;/span&gt; &lt;span class='n'&gt;row&lt;/span&gt; &lt;span class='o'&gt;&amp;lt;&lt;/span&gt; &lt;span class='n'&gt;columnCount&lt;/span&gt; &lt;span class='o'&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class='n'&gt;offset&lt;/span&gt; &lt;span class='o'&gt;+&lt;/span&gt; &lt;span class='n'&gt;row&lt;/span&gt; &lt;span class='o'&gt;&amp;gt;&lt;/span&gt; &lt;span class='o'&gt;-&lt;/span&gt;&lt;span class='mi'&gt;1&lt;/span&gt;&lt;span class='o'&gt;)&lt;/span&gt;
                &lt;span class='k'&gt;yield&lt;/span&gt;&lt;span class='o'&gt;(&lt;/span&gt;&lt;span class='n'&gt;board&lt;/span&gt;&lt;span class='o'&gt;(&lt;/span&gt;&lt;span class='n'&gt;row&lt;/span&gt;&lt;span class='o'&gt;)(&lt;/span&gt;&lt;span class='n'&gt;row&lt;/span&gt;&lt;span class='o'&gt;+&lt;/span&gt;&lt;span class='n'&gt;offset&lt;/span&gt;&lt;span class='o'&gt;))).&lt;/span&gt;&lt;span class='n'&gt;toArray&lt;/span&gt;
    &lt;span class='o'&gt;}&lt;/span&gt;

    &lt;span class='k'&gt;def&lt;/span&gt; &lt;span class='n'&gt;diagonalsRTL&lt;/span&gt;&lt;span class='k'&gt;:&lt;/span&gt; &lt;span class='kt'&gt;Seq&lt;/span&gt;&lt;span class='o'&gt;[&lt;/span&gt;&lt;span class='kt'&gt;Array&lt;/span&gt;&lt;span class='o'&gt;[&lt;/span&gt;&lt;span class='kt'&gt;Player&lt;/span&gt;&lt;span class='o'&gt;]]&lt;/span&gt;  &lt;span class='k'&gt;=&lt;/span&gt; &lt;span class='o'&gt;{&lt;/span&gt;
        &lt;span class='k'&gt;for&lt;/span&gt;&lt;span class='o'&gt;(&lt;/span&gt;&lt;span class='n'&gt;offset&lt;/span&gt; &lt;span class='k'&gt;&amp;lt;-&lt;/span&gt; &lt;span class='mi'&gt;0&lt;/span&gt; &lt;span class='n'&gt;until&lt;/span&gt; &lt;span class='n'&gt;rowCount&lt;/span&gt; &lt;span class='o'&gt;+&lt;/span&gt; &lt;span class='n'&gt;rowCount&lt;/span&gt; &lt;span class='o'&gt;-&lt;/span&gt; &lt;span class='mi'&gt;1&lt;/span&gt;&lt;span class='o'&gt;)&lt;/span&gt; &lt;span class='k'&gt;yield&lt;/span&gt; &lt;span class='o'&gt;(&lt;/span&gt;
            &lt;span class='k'&gt;for&lt;/span&gt;&lt;span class='o'&gt;(&lt;/span&gt;&lt;span class='n'&gt;col&lt;/span&gt; &lt;span class='k'&gt;&amp;lt;-&lt;/span&gt; &lt;span class='mi'&gt;0&lt;/span&gt; &lt;span class='n'&gt;until&lt;/span&gt; &lt;span class='n'&gt;columnCount&lt;/span&gt; &lt;span class='k'&gt;if&lt;/span&gt; &lt;span class='n'&gt;offset&lt;/span&gt; &lt;span class='o'&gt;-&lt;/span&gt; &lt;span class='n'&gt;col&lt;/span&gt; &lt;span class='o'&gt;&amp;lt;&lt;/span&gt; &lt;span class='n'&gt;rowCount&lt;/span&gt; &lt;span class='o'&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class='n'&gt;offset&lt;/span&gt; &lt;span class='o'&gt;-&lt;/span&gt; &lt;span class='n'&gt;col&lt;/span&gt; &lt;span class='o'&gt;&amp;gt;&lt;/span&gt; &lt;span class='o'&gt;-&lt;/span&gt;&lt;span class='mi'&gt;1&lt;/span&gt;&lt;span class='o'&gt;)&lt;/span&gt;
                &lt;span class='k'&gt;yield&lt;/span&gt;&lt;span class='o'&gt;(&lt;/span&gt;&lt;span class='n'&gt;board&lt;/span&gt;&lt;span class='o'&gt;(&lt;/span&gt;&lt;span class='n'&gt;offset&lt;/span&gt; &lt;span class='o'&gt;-&lt;/span&gt; &lt;span class='n'&gt;col&lt;/span&gt;&lt;span class='o'&gt;)(&lt;/span&gt;&lt;span class='n'&gt;col&lt;/span&gt;&lt;span class='o'&gt;))).&lt;/span&gt;&lt;span class='n'&gt;toArray&lt;/span&gt;
    &lt;span class='o'&gt;}&lt;/span&gt;

    &lt;span class='k'&gt;def&lt;/span&gt; &lt;span class='n'&gt;determineWinner&lt;/span&gt; &lt;span class='k'&gt;:&lt;/span&gt; &lt;span class='kt'&gt;GameResult.Value&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='o'&gt;{&lt;/span&gt;
        &lt;span class='k'&gt;val&lt;/span&gt; &lt;span class='n'&gt;winnerText&lt;/span&gt; &lt;span class='k'&gt;=&lt;/span&gt; &lt;span class='s'&gt;&amp;quot;Player %s won!&amp;quot;&lt;/span&gt;
        &lt;span class='k'&gt;val&lt;/span&gt; &lt;span class='n'&gt;checkForWinner&lt;/span&gt; &lt;span class='k'&gt;=&lt;/span&gt; &lt;span class='o'&gt;{&lt;/span&gt; &lt;span class='n'&gt;array&lt;/span&gt; &lt;span class='k'&gt;:&lt;/span&gt; &lt;span class='kt'&gt;Array&lt;/span&gt;&lt;span class='o'&gt;[&lt;/span&gt;&lt;span class='kt'&gt;Player&lt;/span&gt;&lt;span class='o'&gt;]&lt;/span&gt; &lt;span class='k'&gt;=&amp;gt;&lt;/span&gt;
            &lt;span class='nc'&gt;TicTacToeBoard&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='n'&gt;nInARow&lt;/span&gt;&lt;span class='o'&gt;(&lt;/span&gt;&lt;span class='n'&gt;numInARowNeeded&lt;/span&gt;&lt;span class='o'&gt;,&lt;/span&gt; &lt;span class='n'&gt;array&lt;/span&gt;&lt;span class='o'&gt;)&lt;/span&gt; &lt;span class='k'&gt;match&lt;/span&gt; &lt;span class='o'&gt;{&lt;/span&gt;
                &lt;span class='k'&gt;case&lt;/span&gt; &lt;span class='nc'&gt;Some&lt;/span&gt;&lt;span class='o'&gt;(&lt;/span&gt;&lt;span class='n'&gt;player&lt;/span&gt;&lt;span class='o'&gt;)&lt;/span&gt; &lt;span class='k'&gt;=&amp;gt;&lt;/span&gt; &lt;span class='k'&gt;return&lt;/span&gt; &lt;span class='n'&gt;player&lt;/span&gt; &lt;span class='k'&gt;match&lt;/span&gt; &lt;span class='o'&gt;{&lt;/span&gt; &lt;span class='c1'&gt;// non-local return!&lt;/span&gt;
                    &lt;span class='k'&gt;case&lt;/span&gt; &lt;span class='n'&gt;X&lt;/span&gt; &lt;span class='k'&gt;=&amp;gt;&lt;/span&gt; &lt;span class='nc'&gt;GameResult&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='n'&gt;X&lt;/span&gt;
                    &lt;span class='k'&gt;case&lt;/span&gt; &lt;span class='n'&gt;O&lt;/span&gt; &lt;span class='k'&gt;=&amp;gt;&lt;/span&gt; &lt;span class='nc'&gt;GameResult&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='n'&gt;O&lt;/span&gt;
                    &lt;span class='k'&gt;case&lt;/span&gt; &lt;span class='n'&gt;other&lt;/span&gt; &lt;span class='k'&gt;=&amp;gt;&lt;/span&gt; &lt;span class='k'&gt;throw&lt;/span&gt; &lt;span class='k'&gt;new&lt;/span&gt; &lt;span class='nc'&gt;Exception&lt;/span&gt;&lt;span class='o'&gt;(&lt;/span&gt;&lt;span class='s'&gt;&amp;quot;Error, &amp;#39;&amp;quot;&lt;/span&gt; &lt;span class='o'&gt;+&lt;/span&gt; &lt;span class='n'&gt;other&lt;/span&gt; &lt;span class='o'&gt;+&lt;/span&gt; &lt;span class='s'&gt;&amp;quot;&amp;#39; is not a player.&amp;quot;&lt;/span&gt;&lt;span class='o'&gt;)&lt;/span&gt;
                &lt;span class='o'&gt;}&lt;/span&gt;
                &lt;span class='k'&gt;case&lt;/span&gt; &lt;span class='nc'&gt;None&lt;/span&gt; &lt;span class='k'&gt;=&amp;gt;&lt;/span&gt; &lt;span class='c1'&gt;// do nothing&lt;/span&gt;
            &lt;span class='o'&gt;}&lt;/span&gt;
        &lt;span class='o'&gt;}&lt;/span&gt;

        &lt;span class='n'&gt;rows&lt;/span&gt; &lt;span class='n'&gt;foreach&lt;/span&gt; &lt;span class='n'&gt;checkForWinner&lt;/span&gt;
        &lt;span class='n'&gt;columns&lt;/span&gt; &lt;span class='n'&gt;foreach&lt;/span&gt; &lt;span class='n'&gt;checkForWinner&lt;/span&gt;
        &lt;span class='n'&gt;diagonalsLTR&lt;/span&gt; &lt;span class='n'&gt;foreach&lt;/span&gt; &lt;span class='n'&gt;checkForWinner&lt;/span&gt;
        &lt;span class='n'&gt;diagonalsRTL&lt;/span&gt; &lt;span class='n'&gt;foreach&lt;/span&gt; &lt;span class='n'&gt;checkForWinner&lt;/span&gt;

        &lt;span class='k'&gt;if&lt;/span&gt;&lt;span class='o'&gt;(&lt;/span&gt;&lt;span class='n'&gt;board&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='n'&gt;map&lt;/span&gt;&lt;span class='o'&gt;(&lt;/span&gt;&lt;span class='n'&gt;row&lt;/span&gt; &lt;span class='k'&gt;=&amp;gt;&lt;/span&gt; &lt;span class='n'&gt;row&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='n'&gt;contains&lt;/span&gt;&lt;span class='o'&gt;(&lt;/span&gt;&lt;span class='nc'&gt;Blank&lt;/span&gt;&lt;span class='o'&gt;)).&lt;/span&gt;&lt;span class='n'&gt;contains&lt;/span&gt;&lt;span class='o'&gt;(&lt;/span&gt;&lt;span class='kc'&gt;true&lt;/span&gt;&lt;span class='o'&gt;))&lt;/span&gt; &lt;span class='o'&gt;{&lt;/span&gt;
            &lt;span class='k'&gt;return&lt;/span&gt; &lt;span class='nc'&gt;GameResult&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='nc'&gt;NoResult&lt;/span&gt;
        &lt;span class='o'&gt;}&lt;/span&gt;

        &lt;span class='k'&gt;return&lt;/span&gt; &lt;span class='nc'&gt;GameResult&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='nc'&gt;Tie&lt;/span&gt;
    &lt;span class='o'&gt;}&lt;/span&gt;

    &lt;span class='k'&gt;override&lt;/span&gt; &lt;span class='k'&gt;def&lt;/span&gt; &lt;span class='n'&gt;toString&lt;/span&gt; &lt;span class='k'&gt;:&lt;/span&gt; &lt;span class='kt'&gt;String&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='o'&gt;{&lt;/span&gt;
        &lt;span class='k'&gt;var&lt;/span&gt; &lt;span class='n'&gt;boardRepresentation&lt;/span&gt; &lt;span class='k'&gt;=&lt;/span&gt; &lt;span class='s'&gt;&amp;quot;&amp;quot;&lt;/span&gt;

        &lt;span class='k'&gt;def&lt;/span&gt; &lt;span class='n'&gt;p&lt;/span&gt; &lt;span class='k'&gt;=&lt;/span&gt; &lt;span class='o'&gt;{&lt;/span&gt; &lt;span class='n'&gt;str&lt;/span&gt; &lt;span class='k'&gt;:&lt;/span&gt; &lt;span class='kt'&gt;String&lt;/span&gt; &lt;span class='o'&gt;=&amp;gt;&lt;/span&gt; &lt;span class='n'&gt;boardRepresentation&lt;/span&gt; &lt;span class='k'&gt;=&lt;/span&gt; &lt;span class='n'&gt;boardRepresentation&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='n'&gt;concat&lt;/span&gt;&lt;span class='o'&gt;(&lt;/span&gt;&lt;span class='n'&gt;str&lt;/span&gt; &lt;span class='o'&gt;+&lt;/span&gt; &lt;span class='s'&gt;&amp;quot;\n&amp;quot;&lt;/span&gt;&lt;span class='o'&gt;)&lt;/span&gt; &lt;span class='o'&gt;}&lt;/span&gt;

        &lt;span class='k'&gt;val&lt;/span&gt; &lt;span class='n'&gt;topLine&lt;/span&gt; &lt;span class='k'&gt;=&lt;/span&gt; &lt;span class='o'&gt;(&lt;/span&gt;&lt;span class='mi'&gt;1&lt;/span&gt; &lt;span class='n'&gt;until&lt;/span&gt; &lt;span class='n'&gt;columnCount&lt;/span&gt;&lt;span class='o'&gt;).&lt;/span&gt;&lt;span class='n'&gt;foldLeft&lt;/span&gt;&lt;span class='o'&gt;(&lt;/span&gt;&lt;span class='s'&gt;&amp;quot;   ┌&amp;quot;&lt;/span&gt;&lt;span class='o'&gt;)((&lt;/span&gt;&lt;span class='n'&gt;acc&lt;/span&gt;&lt;span class='o'&gt;,&lt;/span&gt; &lt;span class='n'&gt;c&lt;/span&gt;&lt;span class='o'&gt;)&lt;/span&gt; &lt;span class='k'&gt;=&amp;gt;&lt;/span&gt; &lt;span class='n'&gt;acc&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='n'&gt;concat&lt;/span&gt;&lt;span class='o'&gt;(&lt;/span&gt;&lt;span class='s'&gt;&amp;quot;───┬&amp;quot;&lt;/span&gt;&lt;span class='o'&gt;)).&lt;/span&gt;&lt;span class='n'&gt;concat&lt;/span&gt;&lt;span class='o'&gt;(&lt;/span&gt;&lt;span class='s'&gt;&amp;quot;───┐&amp;quot;&lt;/span&gt;&lt;span class='o'&gt;)&lt;/span&gt;
        &lt;span class='k'&gt;val&lt;/span&gt; &lt;span class='n'&gt;middleLine&lt;/span&gt; &lt;span class='k'&gt;=&lt;/span&gt; &lt;span class='o'&gt;(&lt;/span&gt;&lt;span class='mi'&gt;0&lt;/span&gt; &lt;span class='n'&gt;until&lt;/span&gt; &lt;span class='n'&gt;columnCount&lt;/span&gt;&lt;span class='o'&gt;).&lt;/span&gt;&lt;span class='n'&gt;foldLeft&lt;/span&gt;&lt;span class='o'&gt;(&lt;/span&gt;&lt;span class='s'&gt;&amp;quot;   │&amp;quot;&lt;/span&gt;&lt;span class='o'&gt;)((&lt;/span&gt;&lt;span class='n'&gt;acc&lt;/span&gt;&lt;span class='o'&gt;,&lt;/span&gt; &lt;span class='n'&gt;c&lt;/span&gt;&lt;span class='o'&gt;)&lt;/span&gt; &lt;span class='k'&gt;=&amp;gt;&lt;/span&gt; &lt;span class='n'&gt;acc&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='n'&gt;concat&lt;/span&gt;&lt;span class='o'&gt;(&lt;/span&gt;&lt;span class='s'&gt;&amp;quot;───│&amp;quot;&lt;/span&gt;&lt;span class='o'&gt;))&lt;/span&gt;
        &lt;span class='k'&gt;val&lt;/span&gt; &lt;span class='n'&gt;bottomLine&lt;/span&gt; &lt;span class='k'&gt;=&lt;/span&gt; &lt;span class='o'&gt;(&lt;/span&gt;&lt;span class='mi'&gt;1&lt;/span&gt; &lt;span class='n'&gt;until&lt;/span&gt; &lt;span class='n'&gt;columnCount&lt;/span&gt;&lt;span class='o'&gt;).&lt;/span&gt;&lt;span class='n'&gt;foldLeft&lt;/span&gt;&lt;span class='o'&gt;(&lt;/span&gt;&lt;span class='s'&gt;&amp;quot;   └&amp;quot;&lt;/span&gt;&lt;span class='o'&gt;)((&lt;/span&gt;&lt;span class='n'&gt;acc&lt;/span&gt;&lt;span class='o'&gt;,&lt;/span&gt; &lt;span class='n'&gt;c&lt;/span&gt;&lt;span class='o'&gt;)&lt;/span&gt; &lt;span class='k'&gt;=&amp;gt;&lt;/span&gt; &lt;span class='n'&gt;acc&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='n'&gt;concat&lt;/span&gt;&lt;span class='o'&gt;(&lt;/span&gt;&lt;span class='s'&gt;&amp;quot;───┴&amp;quot;&lt;/span&gt;&lt;span class='o'&gt;)).&lt;/span&gt;&lt;span class='n'&gt;concat&lt;/span&gt;&lt;span class='o'&gt;(&lt;/span&gt;&lt;span class='s'&gt;&amp;quot;───┘&amp;quot;&lt;/span&gt;&lt;span class='o'&gt;)&lt;/span&gt;

        &lt;span class='n'&gt;p&lt;/span&gt;&lt;span class='o'&gt;(&lt;/span&gt;&lt;span class='s'&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class='o'&gt;)&lt;/span&gt;
        &lt;span class='n'&gt;p&lt;/span&gt;&lt;span class='o'&gt;((&lt;/span&gt;&lt;span class='mi'&gt;0&lt;/span&gt; &lt;span class='n'&gt;until&lt;/span&gt; &lt;span class='n'&gt;columnCount&lt;/span&gt;&lt;span class='o'&gt;).&lt;/span&gt;&lt;span class='n'&gt;foldLeft&lt;/span&gt;&lt;span class='o'&gt;(&lt;/span&gt;&lt;span class='s'&gt;&amp;quot;     &amp;quot;&lt;/span&gt;&lt;span class='o'&gt;)((&lt;/span&gt;&lt;span class='n'&gt;acc&lt;/span&gt;&lt;span class='o'&gt;,&lt;/span&gt; &lt;span class='n'&gt;n&lt;/span&gt;&lt;span class='o'&gt;)&lt;/span&gt; &lt;span class='k'&gt;=&amp;gt;&lt;/span&gt; &lt;span class='n'&gt;acc&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='n'&gt;concat&lt;/span&gt;&lt;span class='o'&gt;(&lt;/span&gt;&lt;span class='s'&gt;&amp;quot;%-4s&amp;quot;&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='n'&gt;format&lt;/span&gt;&lt;span class='o'&gt;(&lt;/span&gt;&lt;span class='nc'&gt;TicTacToeBoard&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='n'&gt;numToAlpha&lt;/span&gt;&lt;span class='o'&gt;(&lt;/span&gt;&lt;span class='n'&gt;n&lt;/span&gt;&lt;span class='o'&gt;)))))&lt;/span&gt;
        &lt;span class='n'&gt;p&lt;/span&gt;&lt;span class='o'&gt;(&lt;/span&gt;&lt;span class='n'&gt;topLine&lt;/span&gt;&lt;span class='o'&gt;)&lt;/span&gt;
        &lt;span class='k'&gt;for&lt;/span&gt;&lt;span class='o'&gt;(&lt;/span&gt;&lt;span class='n'&gt;r&lt;/span&gt; &lt;span class='k'&gt;&amp;lt;-&lt;/span&gt; &lt;span class='mi'&gt;0&lt;/span&gt; &lt;span class='n'&gt;until&lt;/span&gt; &lt;span class='n'&gt;rowCount&lt;/span&gt;&lt;span class='o'&gt;)&lt;/span&gt; &lt;span class='o'&gt;{&lt;/span&gt;
            &lt;span class='k'&gt;var&lt;/span&gt; &lt;span class='n'&gt;rowString&lt;/span&gt; &lt;span class='k'&gt;=&lt;/span&gt; &lt;span class='s'&gt;&amp;quot;%-3d&amp;quot;&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='n'&gt;format&lt;/span&gt;&lt;span class='o'&gt;(&lt;/span&gt;&lt;span class='n'&gt;r&lt;/span&gt;&lt;span class='o'&gt;).&lt;/span&gt;&lt;span class='n'&gt;concat&lt;/span&gt;&lt;span class='o'&gt;(&lt;/span&gt;&lt;span class='s'&gt;&amp;quot;│&amp;quot;&lt;/span&gt;&lt;span class='o'&gt;)&lt;/span&gt;
            &lt;span class='k'&gt;for&lt;/span&gt;&lt;span class='o'&gt;(&lt;/span&gt;&lt;span class='n'&gt;c&lt;/span&gt; &lt;span class='k'&gt;&amp;lt;-&lt;/span&gt; &lt;span class='mi'&gt;0&lt;/span&gt; &lt;span class='n'&gt;until&lt;/span&gt; &lt;span class='n'&gt;columnCount&lt;/span&gt;&lt;span class='o'&gt;)&lt;/span&gt; &lt;span class='o'&gt;{&lt;/span&gt;
                &lt;span class='n'&gt;rowString&lt;/span&gt; &lt;span class='k'&gt;=&lt;/span&gt; &lt;span class='n'&gt;rowString&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='n'&gt;concat&lt;/span&gt;&lt;span class='o'&gt;(&lt;/span&gt;&lt;span class='s'&gt;&amp;quot; %s │&amp;quot;&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='n'&gt;format&lt;/span&gt;&lt;span class='o'&gt;(&lt;/span&gt;&lt;span class='n'&gt;board&lt;/span&gt;&lt;span class='o'&gt;(&lt;/span&gt;&lt;span class='n'&gt;r&lt;/span&gt;&lt;span class='o'&gt;)(&lt;/span&gt;&lt;span class='n'&gt;c&lt;/span&gt;&lt;span class='o'&gt;)))&lt;/span&gt;
            &lt;span class='o'&gt;}&lt;/span&gt;
            &lt;span class='n'&gt;p&lt;/span&gt;&lt;span class='o'&gt;(&lt;/span&gt;&lt;span class='n'&gt;rowString&lt;/span&gt;&lt;span class='o'&gt;)&lt;/span&gt;
            &lt;span class='k'&gt;if&lt;/span&gt;&lt;span class='o'&gt;(&lt;/span&gt;&lt;span class='n'&gt;r&lt;/span&gt; &lt;span class='o'&gt;&amp;lt;&lt;/span&gt; &lt;span class='n'&gt;rowCount&lt;/span&gt;&lt;span class='o'&gt;-&lt;/span&gt;&lt;span class='mi'&gt;1&lt;/span&gt;&lt;span class='o'&gt;)&lt;/span&gt; &lt;span class='o'&gt;{&lt;/span&gt;
                &lt;span class='n'&gt;p&lt;/span&gt;&lt;span class='o'&gt;(&lt;/span&gt;&lt;span class='n'&gt;middleLine&lt;/span&gt;&lt;span class='o'&gt;)&lt;/span&gt;
            &lt;span class='o'&gt;}&lt;/span&gt;
        &lt;span class='o'&gt;}&lt;/span&gt;
        &lt;span class='n'&gt;p&lt;/span&gt;&lt;span class='o'&gt;(&lt;/span&gt;&lt;span class='n'&gt;bottomLine&lt;/span&gt;&lt;span class='o'&gt;)&lt;/span&gt;
        &lt;span class='n'&gt;p&lt;/span&gt;&lt;span class='o'&gt;(&lt;/span&gt;&lt;span class='s'&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class='o'&gt;)&lt;/span&gt;

        &lt;span class='k'&gt;return&lt;/span&gt; &lt;span class='n'&gt;boardRepresentation&lt;/span&gt;
    &lt;span class='o'&gt;}&lt;/span&gt;

    &lt;span class='k'&gt;def&lt;/span&gt; &lt;span class='n'&gt;validMove&lt;/span&gt;&lt;span class='o'&gt;(&lt;/span&gt;&lt;span class='n'&gt;row&lt;/span&gt; &lt;span class='k'&gt;:&lt;/span&gt; &lt;span class='kt'&gt;Int&lt;/span&gt;&lt;span class='o'&gt;,&lt;/span&gt; &lt;span class='n'&gt;col&lt;/span&gt; &lt;span class='k'&gt;:&lt;/span&gt; &lt;span class='kt'&gt;Int&lt;/span&gt;&lt;span class='o'&gt;)&lt;/span&gt; &lt;span class='k'&gt;:&lt;/span&gt; &lt;span class='kt'&gt;Boolean&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='o'&gt;{&lt;/span&gt;
        &lt;span class='k'&gt;return&lt;/span&gt; &lt;span class='n'&gt;row&lt;/span&gt; &lt;span class='o'&gt;&amp;lt;&lt;/span&gt; &lt;span class='n'&gt;rowCount&lt;/span&gt; &lt;span class='o'&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class='n'&gt;row&lt;/span&gt; &lt;span class='o'&gt;&amp;gt;=&lt;/span&gt; &lt;span class='mi'&gt;0&lt;/span&gt; &lt;span class='o'&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class='n'&gt;col&lt;/span&gt; &lt;span class='o'&gt;&amp;lt;&lt;/span&gt; &lt;span class='n'&gt;columnCount&lt;/span&gt; &lt;span class='o'&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class='n'&gt;col&lt;/span&gt; &lt;span class='o'&gt;&amp;gt;=&lt;/span&gt; &lt;span class='mi'&gt;0&lt;/span&gt; &lt;span class='o'&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class='n'&gt;board&lt;/span&gt;&lt;span class='o'&gt;(&lt;/span&gt;&lt;span class='n'&gt;row&lt;/span&gt;&lt;span class='o'&gt;)(&lt;/span&gt;&lt;span class='n'&gt;col&lt;/span&gt;&lt;span class='o'&gt;)&lt;/span&gt; &lt;span class='o'&gt;==&lt;/span&gt; &lt;span class='nc'&gt;Blank&lt;/span&gt;
    &lt;span class='o'&gt;}&lt;/span&gt;

    &lt;span class='k'&gt;def&lt;/span&gt; &lt;span class='n'&gt;update&lt;/span&gt;&lt;span class='o'&gt;(&lt;/span&gt;&lt;span class='n'&gt;row&lt;/span&gt; &lt;span class='k'&gt;:&lt;/span&gt; &lt;span class='kt'&gt;Int&lt;/span&gt;&lt;span class='o'&gt;,&lt;/span&gt; &lt;span class='n'&gt;col&lt;/span&gt; &lt;span class='k'&gt;:&lt;/span&gt; &lt;span class='kt'&gt;Int&lt;/span&gt;&lt;span class='o'&gt;,&lt;/span&gt; &lt;span class='n'&gt;player&lt;/span&gt; &lt;span class='k'&gt;:&lt;/span&gt; &lt;span class='kt'&gt;Player&lt;/span&gt;&lt;span class='o'&gt;)&lt;/span&gt; &lt;span class='k'&gt;=&lt;/span&gt; &lt;span class='o'&gt;{&lt;/span&gt;
        &lt;span class='n'&gt;board&lt;/span&gt;&lt;span class='o'&gt;(&lt;/span&gt;&lt;span class='n'&gt;row&lt;/span&gt;&lt;span class='o'&gt;)(&lt;/span&gt;&lt;span class='n'&gt;col&lt;/span&gt;&lt;span class='o'&gt;)&lt;/span&gt; &lt;span class='k'&gt;=&lt;/span&gt; &lt;span class='n'&gt;player&lt;/span&gt;
    &lt;span class='o'&gt;}&lt;/span&gt;

    &lt;span class='k'&gt;def&lt;/span&gt; &lt;span class='n'&gt;columnNumber&lt;/span&gt;&lt;span class='o'&gt;(&lt;/span&gt;&lt;span class='n'&gt;columnName&lt;/span&gt; &lt;span class='k'&gt;:&lt;/span&gt; &lt;span class='kt'&gt;String&lt;/span&gt;&lt;span class='o'&gt;)&lt;/span&gt; &lt;span class='k'&gt;:&lt;/span&gt; &lt;span class='kt'&gt;Int&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='o'&gt;{&lt;/span&gt;
        &lt;span class='k'&gt;return&lt;/span&gt; &lt;span class='n'&gt;columnNameMapping&lt;/span&gt;&lt;span class='o'&gt;(&lt;/span&gt;&lt;span class='n'&gt;columnName&lt;/span&gt;&lt;span class='o'&gt;)&lt;/span&gt;
    &lt;span class='o'&gt;}&lt;/span&gt;
&lt;span class='o'&gt;}&lt;/span&gt;

&lt;span class='k'&gt;object&lt;/span&gt; &lt;span class='nc'&gt;TicTacToeBoard&lt;/span&gt; &lt;span class='o'&gt;{&lt;/span&gt;

    &lt;span class='k'&gt;def&lt;/span&gt; &lt;span class='n'&gt;numToAlpha&lt;/span&gt;&lt;span class='o'&gt;(&lt;/span&gt;&lt;span class='n'&gt;number&lt;/span&gt; &lt;span class='k'&gt;:&lt;/span&gt; &lt;span class='kt'&gt;Int&lt;/span&gt;&lt;span class='o'&gt;)&lt;/span&gt; &lt;span class='k'&gt;:&lt;/span&gt; &lt;span class='kt'&gt;String&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='o'&gt;{&lt;/span&gt;
        &lt;span class='k'&gt;var&lt;/span&gt; &lt;span class='n'&gt;dividend&lt;/span&gt; &lt;span class='k'&gt;=&lt;/span&gt; &lt;span class='n'&gt;number&lt;/span&gt; &lt;span class='o'&gt;+&lt;/span&gt; &lt;span class='mi'&gt;1&lt;/span&gt; &lt;span class='c1'&gt;// internally, treat 1 as A - just makes it easier&lt;/span&gt;
        &lt;span class='k'&gt;var&lt;/span&gt; &lt;span class='n'&gt;letters&lt;/span&gt; &lt;span class='k'&gt;=&lt;/span&gt; &lt;span class='s'&gt;&amp;quot;&amp;quot;&lt;/span&gt;
        &lt;span class='k'&gt;var&lt;/span&gt; &lt;span class='n'&gt;modulo&lt;/span&gt; &lt;span class='k'&gt;=&lt;/span&gt; &lt;span class='mi'&gt;0&lt;/span&gt;

        &lt;span class='k'&gt;while&lt;/span&gt;&lt;span class='o'&gt;(&lt;/span&gt;&lt;span class='n'&gt;dividend&lt;/span&gt; &lt;span class='o'&gt;&amp;gt;&lt;/span&gt; &lt;span class='mi'&gt;0&lt;/span&gt;&lt;span class='o'&gt;)&lt;/span&gt; &lt;span class='o'&gt;{&lt;/span&gt;
            &lt;span class='n'&gt;modulo&lt;/span&gt; &lt;span class='k'&gt;=&lt;/span&gt; &lt;span class='o'&gt;(&lt;/span&gt;&lt;span class='n'&gt;dividend&lt;/span&gt; &lt;span class='o'&gt;-&lt;/span&gt; &lt;span class='mi'&gt;1&lt;/span&gt;&lt;span class='o'&gt;)&lt;/span&gt; &lt;span class='o'&gt;%&lt;/span&gt; &lt;span class='mi'&gt;26&lt;/span&gt;
            &lt;span class='n'&gt;letters&lt;/span&gt; &lt;span class='k'&gt;=&lt;/span&gt; &lt;span class='o'&gt;(&lt;/span&gt;&lt;span class='mi'&gt;65&lt;/span&gt; &lt;span class='o'&gt;+&lt;/span&gt; &lt;span class='n'&gt;modulo&lt;/span&gt;&lt;span class='o'&gt;).&lt;/span&gt;&lt;span class='n'&gt;toChar&lt;/span&gt; &lt;span class='o'&gt;+&lt;/span&gt; &lt;span class='n'&gt;letters&lt;/span&gt;
            &lt;span class='n'&gt;dividend&lt;/span&gt; &lt;span class='k'&gt;=&lt;/span&gt; &lt;span class='o'&gt;(&lt;/span&gt;&lt;span class='n'&gt;dividend&lt;/span&gt; &lt;span class='o'&gt;-&lt;/span&gt; &lt;span class='n'&gt;modulo&lt;/span&gt;&lt;span class='o'&gt;)&lt;/span&gt; &lt;span class='o'&gt;/&lt;/span&gt; &lt;span class='mi'&gt;26&lt;/span&gt;
        &lt;span class='o'&gt;}&lt;/span&gt;

        &lt;span class='k'&gt;return&lt;/span&gt; &lt;span class='n'&gt;letters&lt;/span&gt;
    &lt;span class='o'&gt;}&lt;/span&gt;

    &lt;span class='k'&gt;def&lt;/span&gt; &lt;span class='n'&gt;getPlayersFromString&lt;/span&gt;&lt;span class='o'&gt;(&lt;/span&gt;&lt;span class='n'&gt;row&lt;/span&gt; &lt;span class='k'&gt;:&lt;/span&gt; &lt;span class='kt'&gt;String&lt;/span&gt;&lt;span class='o'&gt;)&lt;/span&gt; &lt;span class='k'&gt;:&lt;/span&gt; &lt;span class='kt'&gt;Array&lt;/span&gt;&lt;span class='o'&gt;[&lt;/span&gt;&lt;span class='kt'&gt;Player&lt;/span&gt;&lt;span class='o'&gt;]&lt;/span&gt; &lt;span class='k'&gt;=&lt;/span&gt; &lt;span class='o'&gt;{&lt;/span&gt;
        &lt;span class='n'&gt;row&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='n'&gt;map&lt;/span&gt;&lt;span class='o'&gt;(&lt;/span&gt;&lt;span class='n'&gt;char&lt;/span&gt; &lt;span class='k'&gt;=&amp;gt;&lt;/span&gt; &lt;span class='o'&gt;{&lt;/span&gt; &lt;span class='k'&gt;if&lt;/span&gt;&lt;span class='o'&gt;(&lt;/span&gt;&lt;span class='n'&gt;char&lt;/span&gt; &lt;span class='o'&gt;==&lt;/span&gt; &lt;span class='-Symbol'&gt;&amp;#39;X&lt;/span&gt;&lt;span class='err'&gt;&amp;#39;&lt;/span&gt;&lt;span class='o'&gt;)&lt;/span&gt; &lt;span class='n'&gt;X&lt;/span&gt; &lt;span class='k'&gt;:&lt;/span&gt; &lt;span class='kt'&gt;Player&lt;/span&gt; &lt;span class='kt'&gt;else&lt;/span&gt; &lt;span class='kt'&gt;if&lt;/span&gt;&lt;span class='o'&gt;(&lt;/span&gt;&lt;span class='kt'&gt;char&lt;/span&gt; &lt;span class='o'&gt;==&lt;/span&gt; &lt;span class='-Symbol'&gt;&amp;#39;O&lt;/span&gt;&lt;span class='err'&gt;&amp;#39;&lt;/span&gt;&lt;span class='o'&gt;)&lt;/span&gt; &lt;span class='n'&gt;O&lt;/span&gt; &lt;span class='k'&gt;:&lt;/span&gt; &lt;span class='kt'&gt;Player&lt;/span&gt; &lt;span class='kt'&gt;else&lt;/span&gt; &lt;span class='kt'&gt;Blank&lt;/span&gt; &lt;span class='kt'&gt;:&lt;/span&gt; &lt;span class='kt'&gt;Player&lt;/span&gt; &lt;span class='o'&gt;}&lt;/span&gt; &lt;span class='o'&gt;).&lt;/span&gt;&lt;span class='n'&gt;toArray&lt;/span&gt;
    &lt;span class='o'&gt;}&lt;/span&gt;

    &lt;span class='k'&gt;def&lt;/span&gt; &lt;span class='n'&gt;threeInARow&lt;/span&gt;&lt;span class='o'&gt;(&lt;/span&gt;&lt;span class='n'&gt;list&lt;/span&gt; &lt;span class='k'&gt;:&lt;/span&gt; &lt;span class='kt'&gt;List&lt;/span&gt;&lt;span class='o'&gt;[&lt;/span&gt;&lt;span class='kt'&gt;Player&lt;/span&gt;&lt;span class='o'&gt;])&lt;/span&gt; &lt;span class='k'&gt;:&lt;/span&gt; &lt;span class='kt'&gt;Option&lt;/span&gt;&lt;span class='o'&gt;[&lt;/span&gt;&lt;span class='kt'&gt;Player&lt;/span&gt;&lt;span class='o'&gt;]&lt;/span&gt; &lt;span class='k'&gt;=&lt;/span&gt; &lt;span class='n'&gt;list&lt;/span&gt; &lt;span class='k'&gt;match&lt;/span&gt; &lt;span class='o'&gt;{&lt;/span&gt;
        &lt;span class='k'&gt;case&lt;/span&gt; &lt;span class='nc'&gt;Nil&lt;/span&gt; &lt;span class='k'&gt;=&amp;gt;&lt;/span&gt; &lt;span class='nc'&gt;None&lt;/span&gt;
        &lt;span class='k'&gt;case&lt;/span&gt; &lt;span class='n'&gt;x&lt;/span&gt; &lt;span class='o'&gt;::&lt;/span&gt; &lt;span class='n'&gt;y&lt;/span&gt; &lt;span class='o'&gt;::&lt;/span&gt; &lt;span class='n'&gt;z&lt;/span&gt; &lt;span class='o'&gt;::&lt;/span&gt; &lt;span class='n'&gt;tail&lt;/span&gt; &lt;span class='k'&gt;if&lt;/span&gt; &lt;span class='n'&gt;x&lt;/span&gt; &lt;span class='o'&gt;==&lt;/span&gt; &lt;span class='n'&gt;y&lt;/span&gt; &lt;span class='o'&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class='n'&gt;y&lt;/span&gt; &lt;span class='o'&gt;==&lt;/span&gt; &lt;span class='n'&gt;z&lt;/span&gt; &lt;span class='o'&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class='n'&gt;z&lt;/span&gt; &lt;span class='o'&gt;!=&lt;/span&gt; &lt;span class='nc'&gt;Blank&lt;/span&gt; &lt;span class='k'&gt;=&amp;gt;&lt;/span&gt; &lt;span class='nc'&gt;Some&lt;/span&gt;&lt;span class='o'&gt;(&lt;/span&gt;&lt;span class='n'&gt;z&lt;/span&gt;&lt;span class='o'&gt;)&lt;/span&gt;
        &lt;span class='k'&gt;case&lt;/span&gt; &lt;span class='k'&gt;_&lt;/span&gt; &lt;span class='o'&gt;::&lt;/span&gt; &lt;span class='n'&gt;tail&lt;/span&gt; &lt;span class='k'&gt;=&amp;gt;&lt;/span&gt; &lt;span class='n'&gt;threeInARow&lt;/span&gt;&lt;span class='o'&gt;(&lt;/span&gt;&lt;span class='n'&gt;tail&lt;/span&gt;&lt;span class='o'&gt;)&lt;/span&gt;
    &lt;span class='o'&gt;}&lt;/span&gt;

    &lt;span class='k'&gt;def&lt;/span&gt; &lt;span class='n'&gt;nInARow&lt;/span&gt;&lt;span class='o'&gt;(&lt;/span&gt;&lt;span class='n'&gt;n&lt;/span&gt; &lt;span class='k'&gt;:&lt;/span&gt; &lt;span class='kt'&gt;Int&lt;/span&gt;&lt;span class='o'&gt;,&lt;/span&gt; &lt;span class='n'&gt;array&lt;/span&gt; &lt;span class='k'&gt;:&lt;/span&gt; &lt;span class='kt'&gt;Array&lt;/span&gt;&lt;span class='o'&gt;[&lt;/span&gt;&lt;span class='kt'&gt;Player&lt;/span&gt;&lt;span class='o'&gt;])&lt;/span&gt; &lt;span class='k'&gt;:&lt;/span&gt; &lt;span class='kt'&gt;Option&lt;/span&gt;&lt;span class='o'&gt;[&lt;/span&gt;&lt;span class='kt'&gt;Player&lt;/span&gt;&lt;span class='o'&gt;]&lt;/span&gt; &lt;span class='k'&gt;=&lt;/span&gt; &lt;span class='o'&gt;{&lt;/span&gt;
        &lt;span class='k'&gt;for&lt;/span&gt;&lt;span class='o'&gt;(&lt;/span&gt;&lt;span class='n'&gt;i&lt;/span&gt; &lt;span class='k'&gt;&amp;lt;-&lt;/span&gt; &lt;span class='mi'&gt;0&lt;/span&gt; &lt;span class='n'&gt;until&lt;/span&gt; &lt;span class='n'&gt;array&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='n'&gt;length&lt;/span&gt; &lt;span class='o'&gt;-&lt;/span&gt; &lt;span class='o'&gt;(&lt;/span&gt;&lt;span class='n'&gt;n&lt;/span&gt;&lt;span class='o'&gt;-&lt;/span&gt;&lt;span class='mi'&gt;1&lt;/span&gt;&lt;span class='o'&gt;))&lt;/span&gt; &lt;span class='o'&gt;{&lt;/span&gt;
            &lt;span class='k'&gt;var&lt;/span&gt; &lt;span class='n'&gt;allTrue&lt;/span&gt; &lt;span class='k'&gt;=&lt;/span&gt; &lt;span class='kc'&gt;true&lt;/span&gt;&lt;span class='o'&gt;;&lt;/span&gt;
            &lt;span class='k'&gt;for&lt;/span&gt;&lt;span class='o'&gt;(&lt;/span&gt;&lt;span class='n'&gt;j&lt;/span&gt; &lt;span class='k'&gt;&amp;lt;-&lt;/span&gt; &lt;span class='n'&gt;i&lt;/span&gt;&lt;span class='o'&gt;+&lt;/span&gt;&lt;span class='mi'&gt;1&lt;/span&gt; &lt;span class='n'&gt;until&lt;/span&gt; &lt;span class='n'&gt;i&lt;/span&gt;&lt;span class='o'&gt;+&lt;/span&gt;&lt;span class='n'&gt;n&lt;/span&gt;&lt;span class='o'&gt;)&lt;/span&gt; &lt;span class='o'&gt;{&lt;/span&gt;
                &lt;span class='n'&gt;allTrue&lt;/span&gt; &lt;span class='o'&gt;&amp;amp;=&lt;/span&gt; &lt;span class='n'&gt;array&lt;/span&gt;&lt;span class='o'&gt;(&lt;/span&gt;&lt;span class='n'&gt;j&lt;/span&gt;&lt;span class='o'&gt;-&lt;/span&gt;&lt;span class='mi'&gt;1&lt;/span&gt;&lt;span class='o'&gt;)&lt;/span&gt; &lt;span class='o'&gt;==&lt;/span&gt; &lt;span class='n'&gt;array&lt;/span&gt;&lt;span class='o'&gt;(&lt;/span&gt;&lt;span class='n'&gt;j&lt;/span&gt;&lt;span class='o'&gt;)&lt;/span&gt;
            &lt;span class='o'&gt;}&lt;/span&gt;
            &lt;span class='k'&gt;if&lt;/span&gt;&lt;span class='o'&gt;(&lt;/span&gt;&lt;span class='n'&gt;allTrue&lt;/span&gt; &lt;span class='o'&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class='n'&gt;array&lt;/span&gt;&lt;span class='o'&gt;(&lt;/span&gt;&lt;span class='n'&gt;i&lt;/span&gt;&lt;span class='o'&gt;)&lt;/span&gt; &lt;span class='o'&gt;!=&lt;/span&gt; &lt;span class='nc'&gt;Blank&lt;/span&gt;&lt;span class='o'&gt;)&lt;/span&gt; &lt;span class='o'&gt;{&lt;/span&gt;
                &lt;span class='k'&gt;return&lt;/span&gt; &lt;span class='nc'&gt;Some&lt;/span&gt;&lt;span class='o'&gt;(&lt;/span&gt;&lt;span class='n'&gt;array&lt;/span&gt;&lt;span class='o'&gt;(&lt;/span&gt;&lt;span class='n'&gt;i&lt;/span&gt;&lt;span class='o'&gt;))&lt;/span&gt;
            &lt;span class='o'&gt;}&lt;/span&gt;
        &lt;span class='o'&gt;}&lt;/span&gt;

        &lt;span class='k'&gt;return&lt;/span&gt; &lt;span class='nc'&gt;None&lt;/span&gt;
    &lt;span class='o'&gt;}&lt;/span&gt;

&lt;span class='o'&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;div class='question'&gt;&lt;b&gt;2.&lt;/b&gt; Bonus Problem: Let two players play tic-tac-toe.&lt;/div&gt;


&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='scala'&gt;&lt;span class='k'&gt;object&lt;/span&gt; &lt;span class='nc'&gt;Game&lt;/span&gt; &lt;span class='o'&gt;{&lt;/span&gt;
    &lt;span class='k'&gt;val&lt;/span&gt; &lt;span class='nc'&gt;Position&lt;/span&gt; &lt;span class='k'&gt;=&lt;/span&gt; &lt;span class='s'&gt;&amp;quot;&amp;quot;&amp;quot;([A-Za-z]+)\s*(\d+)&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='n'&gt;r&lt;/span&gt;

    &lt;span class='k'&gt;def&lt;/span&gt; &lt;span class='n'&gt;main&lt;/span&gt;&lt;span class='o'&gt;(&lt;/span&gt;&lt;span class='n'&gt;args&lt;/span&gt;&lt;span class='k'&gt;:&lt;/span&gt;&lt;span class='kt'&gt;Array&lt;/span&gt;&lt;span class='o'&gt;[&lt;/span&gt;&lt;span class='kt'&gt;String&lt;/span&gt;&lt;span class='o'&gt;])&lt;/span&gt; &lt;span class='o'&gt;{&lt;/span&gt;
        &lt;span class='k'&gt;val&lt;/span&gt; &lt;span class='n'&gt;size&lt;/span&gt; &lt;span class='k'&gt;=&lt;/span&gt; &lt;span class='n'&gt;readBoardSize&lt;/span&gt;
        &lt;span class='k'&gt;var&lt;/span&gt; &lt;span class='n'&gt;board&lt;/span&gt; &lt;span class='k'&gt;=&lt;/span&gt; &lt;span class='k'&gt;new&lt;/span&gt; &lt;span class='nc'&gt;TicTacToeBoard&lt;/span&gt;&lt;span class='o'&gt;(&lt;/span&gt;&lt;span class='n'&gt;size&lt;/span&gt;&lt;span class='o'&gt;)&lt;/span&gt;
        &lt;span class='n'&gt;println&lt;/span&gt;&lt;span class='o'&gt;(&lt;/span&gt;&lt;span class='s'&gt;&amp;quot;\n&amp;quot;&lt;/span&gt; &lt;span class='o'&gt;+&lt;/span&gt; &lt;span class='n'&gt;board&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='n'&gt;numInARowNeeded&lt;/span&gt; &lt;span class='o'&gt;+&lt;/span&gt; &lt;span class='s'&gt;&amp;quot; in a row to win (&amp;quot;&lt;/span&gt; &lt;span class='o'&gt;+&lt;/span&gt; &lt;span class='n'&gt;size&lt;/span&gt; &lt;span class='o'&gt;+&lt;/span&gt; &lt;span class='s'&gt;&amp;quot;x&amp;quot;&lt;/span&gt; &lt;span class='o'&gt;+&lt;/span&gt; &lt;span class='n'&gt;size&lt;/span&gt; &lt;span class='o'&gt;+&lt;/span&gt; &lt;span class='s'&gt;&amp;quot; board)&amp;quot;&lt;/span&gt;&lt;span class='o'&gt;)&lt;/span&gt;

        &lt;span class='k'&gt;var&lt;/span&gt; &lt;span class='n'&gt;player&lt;/span&gt; &lt;span class='k'&gt;:&lt;/span&gt; &lt;span class='kt'&gt;Player&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='n'&gt;X&lt;/span&gt;
        &lt;span class='k'&gt;while&lt;/span&gt;&lt;span class='o'&gt;(&lt;/span&gt;&lt;span class='n'&gt;board&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='n'&gt;determineWinner&lt;/span&gt; &lt;span class='o'&gt;==&lt;/span&gt; &lt;span class='nc'&gt;GameResult&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='nc'&gt;NoResult&lt;/span&gt;&lt;span class='o'&gt;)&lt;/span&gt; &lt;span class='o'&gt;{&lt;/span&gt;
            &lt;span class='n'&gt;println&lt;/span&gt;&lt;span class='o'&gt;(&lt;/span&gt;&lt;span class='n'&gt;board&lt;/span&gt;&lt;span class='o'&gt;)&lt;/span&gt;
            &lt;span class='n'&gt;println&lt;/span&gt;&lt;span class='o'&gt;(&lt;/span&gt;&lt;span class='s'&gt;&amp;quot;Player %s&amp;#39;s turn.&amp;quot;&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='n'&gt;format&lt;/span&gt;&lt;span class='o'&gt;(&lt;/span&gt;&lt;span class='n'&gt;player&lt;/span&gt;&lt;span class='o'&gt;))&lt;/span&gt;

            &lt;span class='k'&gt;val&lt;/span&gt; &lt;span class='o'&gt;(&lt;/span&gt;&lt;span class='n'&gt;row&lt;/span&gt;&lt;span class='o'&gt;,&lt;/span&gt; &lt;span class='n'&gt;col&lt;/span&gt;&lt;span class='o'&gt;)&lt;/span&gt; &lt;span class='k'&gt;=&lt;/span&gt; &lt;span class='n'&gt;readNextMove&lt;/span&gt;&lt;span class='o'&gt;(&lt;/span&gt;&lt;span class='n'&gt;board&lt;/span&gt;&lt;span class='o'&gt;)&lt;/span&gt;
            &lt;span class='n'&gt;board&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='n'&gt;update&lt;/span&gt;&lt;span class='o'&gt;(&lt;/span&gt;&lt;span class='n'&gt;row&lt;/span&gt;&lt;span class='o'&gt;,&lt;/span&gt; &lt;span class='n'&gt;col&lt;/span&gt;&lt;span class='o'&gt;,&lt;/span&gt; &lt;span class='n'&gt;player&lt;/span&gt;&lt;span class='o'&gt;)&lt;/span&gt;

            &lt;span class='n'&gt;player&lt;/span&gt; &lt;span class='k'&gt;=&lt;/span&gt; &lt;span class='k'&gt;if&lt;/span&gt;&lt;span class='o'&gt;(&lt;/span&gt;&lt;span class='n'&gt;player&lt;/span&gt; &lt;span class='o'&gt;==&lt;/span&gt; &lt;span class='n'&gt;X&lt;/span&gt;&lt;span class='o'&gt;)&lt;/span&gt; &lt;span class='n'&gt;O&lt;/span&gt; &lt;span class='k'&gt;else&lt;/span&gt; &lt;span class='n'&gt;X&lt;/span&gt;
        &lt;span class='o'&gt;}&lt;/span&gt;

        &lt;span class='n'&gt;println&lt;/span&gt;&lt;span class='o'&gt;(&lt;/span&gt;&lt;span class='n'&gt;board&lt;/span&gt;&lt;span class='o'&gt;)&lt;/span&gt;
        &lt;span class='n'&gt;println&lt;/span&gt;&lt;span class='o'&gt;(&lt;/span&gt;&lt;span class='nc'&gt;GameResult&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='n'&gt;displayGameResult&lt;/span&gt;&lt;span class='o'&gt;(&lt;/span&gt;&lt;span class='n'&gt;board&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='n'&gt;determineWinner&lt;/span&gt;&lt;span class='o'&gt;))&lt;/span&gt;
        &lt;span class='n'&gt;println&lt;/span&gt;
    &lt;span class='o'&gt;}&lt;/span&gt;

    &lt;span class='k'&gt;def&lt;/span&gt; &lt;span class='n'&gt;readBoardSize&lt;/span&gt;&lt;span class='k'&gt;:&lt;/span&gt; &lt;span class='kt'&gt;Int&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='o'&gt;{&lt;/span&gt;
        &lt;span class='k'&gt;var&lt;/span&gt; &lt;span class='n'&gt;size&lt;/span&gt; &lt;span class='k'&gt;=&lt;/span&gt; &lt;span class='o'&gt;-&lt;/span&gt;&lt;span class='mi'&gt;1&lt;/span&gt;

        &lt;span class='k'&gt;while&lt;/span&gt;&lt;span class='o'&gt;(&lt;/span&gt;&lt;span class='n'&gt;size&lt;/span&gt; &lt;span class='o'&gt;&amp;lt;&lt;/span&gt; &lt;span class='mi'&gt;1&lt;/span&gt;&lt;span class='o'&gt;)&lt;/span&gt; &lt;span class='o'&gt;{&lt;/span&gt;
            &lt;span class='k'&gt;try&lt;/span&gt; &lt;span class='o'&gt;{&lt;/span&gt;
                &lt;span class='n'&gt;print&lt;/span&gt;&lt;span class='o'&gt;(&lt;/span&gt;&lt;span class='s'&gt;&amp;quot;Enter board size: &amp;quot;&lt;/span&gt;&lt;span class='o'&gt;)&lt;/span&gt;
                &lt;span class='n'&gt;size&lt;/span&gt; &lt;span class='k'&gt;=&lt;/span&gt; &lt;span class='nc'&gt;Console&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='n'&gt;readInt&lt;/span&gt;
            &lt;span class='o'&gt;}&lt;/span&gt; &lt;span class='k'&gt;catch&lt;/span&gt; &lt;span class='o'&gt;{&lt;/span&gt;
                &lt;span class='k'&gt;case&lt;/span&gt; &lt;span class='n'&gt;e&lt;/span&gt; &lt;span class='k'&gt;=&amp;gt;&lt;/span&gt; &lt;span class='o'&gt;{&lt;/span&gt; &lt;span class='n'&gt;size&lt;/span&gt; &lt;span class='k'&gt;=&lt;/span&gt; &lt;span class='o'&gt;-&lt;/span&gt;&lt;span class='mi'&gt;1&lt;/span&gt; &lt;span class='o'&gt;}&lt;/span&gt;
            &lt;span class='o'&gt;}&lt;/span&gt;
            &lt;span class='k'&gt;if&lt;/span&gt; &lt;span class='o'&gt;(&lt;/span&gt;&lt;span class='n'&gt;size&lt;/span&gt; &lt;span class='o'&gt;&amp;lt;&lt;/span&gt; &lt;span class='mi'&gt;1&lt;/span&gt;&lt;span class='o'&gt;)&lt;/span&gt; &lt;span class='o'&gt;{&lt;/span&gt;
                &lt;span class='n'&gt;println&lt;/span&gt;&lt;span class='o'&gt;(&lt;/span&gt;&lt;span class='s'&gt;&amp;quot;Invalid board size. Please enter a number greater than 0.&amp;quot;&lt;/span&gt;&lt;span class='o'&gt;)&lt;/span&gt;
            &lt;span class='o'&gt;}&lt;/span&gt;
        &lt;span class='o'&gt;}&lt;/span&gt;

        &lt;span class='k'&gt;return&lt;/span&gt; &lt;span class='n'&gt;size&lt;/span&gt;
    &lt;span class='o'&gt;}&lt;/span&gt;

    &lt;span class='k'&gt;def&lt;/span&gt; &lt;span class='n'&gt;readNextMove&lt;/span&gt;&lt;span class='o'&gt;(&lt;/span&gt;&lt;span class='n'&gt;board&lt;/span&gt;&lt;span class='k'&gt;:&lt;/span&gt; &lt;span class='kt'&gt;TicTacToeBoard&lt;/span&gt;&lt;span class='o'&gt;)&lt;/span&gt;&lt;span class='k'&gt;:&lt;/span&gt; &lt;span class='o'&gt;(&lt;/span&gt;&lt;span class='kt'&gt;Int&lt;/span&gt;&lt;span class='o'&gt;,&lt;/span&gt; &lt;span class='kt'&gt;Int&lt;/span&gt;&lt;span class='o'&gt;)&lt;/span&gt; &lt;span class='k'&gt;=&lt;/span&gt; &lt;span class='o'&gt;{&lt;/span&gt;
        &lt;span class='k'&gt;var&lt;/span&gt; &lt;span class='n'&gt;validMove&lt;/span&gt; &lt;span class='k'&gt;=&lt;/span&gt; &lt;span class='kc'&gt;false&lt;/span&gt;
        &lt;span class='k'&gt;var&lt;/span&gt; &lt;span class='n'&gt;col&lt;/span&gt; &lt;span class='k'&gt;=&lt;/span&gt; &lt;span class='o'&gt;-&lt;/span&gt;&lt;span class='mi'&gt;1&lt;/span&gt;
        &lt;span class='k'&gt;var&lt;/span&gt; &lt;span class='n'&gt;row&lt;/span&gt; &lt;span class='k'&gt;=&lt;/span&gt; &lt;span class='o'&gt;-&lt;/span&gt;&lt;span class='mi'&gt;1&lt;/span&gt;
        &lt;span class='k'&gt;while&lt;/span&gt;&lt;span class='o'&gt;(!&lt;/span&gt;&lt;span class='n'&gt;validMove&lt;/span&gt;&lt;span class='o'&gt;)&lt;/span&gt; &lt;span class='o'&gt;{&lt;/span&gt;
            &lt;span class='k'&gt;var&lt;/span&gt; &lt;span class='n'&gt;input&lt;/span&gt; &lt;span class='k'&gt;=&lt;/span&gt; &lt;span class='s'&gt;&amp;quot;&amp;quot;&lt;/span&gt;
            &lt;span class='k'&gt;try&lt;/span&gt; &lt;span class='o'&gt;{&lt;/span&gt;
                &lt;span class='n'&gt;print&lt;/span&gt;&lt;span class='o'&gt;(&lt;/span&gt;&lt;span class='s'&gt;&amp;quot;Enter square: (e.g. A0): &amp;quot;&lt;/span&gt;&lt;span class='o'&gt;)&lt;/span&gt;
                &lt;span class='n'&gt;input&lt;/span&gt; &lt;span class='k'&gt;=&lt;/span&gt; &lt;span class='nc'&gt;Console&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='n'&gt;readLine&lt;/span&gt;
                &lt;span class='k'&gt;val&lt;/span&gt; &lt;span class='nc'&gt;Position&lt;/span&gt;&lt;span class='o'&gt;(&lt;/span&gt;&lt;span class='n'&gt;columnName&lt;/span&gt;&lt;span class='o'&gt;,&lt;/span&gt; &lt;span class='n'&gt;rowNumber&lt;/span&gt;&lt;span class='o'&gt;)&lt;/span&gt; &lt;span class='k'&gt;=&lt;/span&gt; &lt;span class='n'&gt;input&lt;/span&gt;
                &lt;span class='n'&gt;row&lt;/span&gt; &lt;span class='k'&gt;=&lt;/span&gt; &lt;span class='n'&gt;rowNumber&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='n'&gt;toInt&lt;/span&gt;
                &lt;span class='n'&gt;col&lt;/span&gt; &lt;span class='k'&gt;=&lt;/span&gt; &lt;span class='n'&gt;board&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='n'&gt;columnNumber&lt;/span&gt;&lt;span class='o'&gt;(&lt;/span&gt;&lt;span class='n'&gt;columnName&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='n'&gt;toUpperCase&lt;/span&gt;&lt;span class='o'&gt;)&lt;/span&gt;
            &lt;span class='o'&gt;}&lt;/span&gt; &lt;span class='k'&gt;catch&lt;/span&gt; &lt;span class='o'&gt;{&lt;/span&gt;
                &lt;span class='k'&gt;case&lt;/span&gt; &lt;span class='n'&gt;e&lt;/span&gt; &lt;span class='k'&gt;=&amp;gt;&lt;/span&gt; &lt;span class='o'&gt;{&lt;/span&gt; &lt;span class='n'&gt;println&lt;/span&gt;&lt;span class='o'&gt;(&lt;/span&gt;&lt;span class='s'&gt;&amp;quot;Error reading input: Could not understand \&amp;quot;&amp;quot;&lt;/span&gt; &lt;span class='o'&gt;+&lt;/span&gt; &lt;span class='n'&gt;input&lt;/span&gt; &lt;span class='o'&gt;+&lt;/span&gt; &lt;span class='s'&gt;&amp;quot;\&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class='o'&gt;)&lt;/span&gt; &lt;span class='o'&gt;}&lt;/span&gt;
            &lt;span class='o'&gt;}&lt;/span&gt;

            &lt;span class='n'&gt;validMove&lt;/span&gt; &lt;span class='k'&gt;=&lt;/span&gt; &lt;span class='n'&gt;board&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='n'&gt;validMove&lt;/span&gt;&lt;span class='o'&gt;(&lt;/span&gt;&lt;span class='n'&gt;row&lt;/span&gt;&lt;span class='o'&gt;,&lt;/span&gt; &lt;span class='n'&gt;col&lt;/span&gt;&lt;span class='o'&gt;)&lt;/span&gt;
            &lt;span class='k'&gt;if&lt;/span&gt;&lt;span class='o'&gt;(!&lt;/span&gt;&lt;span class='n'&gt;validMove&lt;/span&gt;&lt;span class='o'&gt;)&lt;/span&gt; &lt;span class='o'&gt;{&lt;/span&gt;
                &lt;span class='n'&gt;println&lt;/span&gt;&lt;span class='o'&gt;(&lt;/span&gt;&lt;span class='s'&gt;&amp;quot;Can&amp;#39;t move there, try again!\n&amp;quot;&lt;/span&gt;&lt;span class='o'&gt;)&lt;/span&gt;
            &lt;span class='o'&gt;}&lt;/span&gt;
        &lt;span class='o'&gt;}&lt;/span&gt;

        &lt;span class='k'&gt;return&lt;/span&gt; &lt;span class='o'&gt;(&lt;/span&gt;&lt;span class='n'&gt;row&lt;/span&gt;&lt;span class='o'&gt;,&lt;/span&gt; &lt;span class='n'&gt;col&lt;/span&gt;&lt;span class='o'&gt;)&lt;/span&gt;
    &lt;span class='o'&gt;}&lt;/span&gt;

&lt;span class='o'&gt;}&lt;/span&gt;

&lt;span class='nc'&gt;Game&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='n'&gt;main&lt;/span&gt;&lt;span class='o'&gt;(&lt;/span&gt;&lt;span class='kc'&gt;null&lt;/span&gt;&lt;span class='o'&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;p&gt;Phew! That was a long one, eh? Once again, you can see more about the project by going to the &lt;a href='/projects/arbitrarily-sized-tic-tac-toe/'&gt;Tic Tac Toe project page&lt;/a&gt; and you can learn more about this series of posts by going to the &lt;a href='/projects/seven-languages-in-seven-weeks/'&gt;Seven Languages project page&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Next in this series: Day 2 of Scala (coming soon).&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>Counting Powers of Two - A Neat Pattern</title>
   <link href="http://nickknowlson.com/blog/2013/03/10/counting-powers-of-two/"/>
   <updated>2013-03-10T00:00:00-08:00</updated>
   <id>http://nickknowlson.com/blog/2013/03/10/counting-powers-of-two</id>
   <content type="html">&lt;p&gt;A little while ago I was going for a walk and searching for something to occupy my mind for a while. Something that would take my mind away from other problems and give it a simple, solvable, repetitive activity to do for a while. I hit upon counting up by powers of two.&lt;/p&gt;

&lt;p&gt;Why? I&amp;#8217;m a programmer, and powers of two are important and prevalent numbers in this field. By this point 128, 256 and 512 seem like nice round numbers to me, and I wouldn&amp;#8217;t mind feeling the same way about 65,536 and 131,072. Also, counting powers of two has the virtue of getting hard before getting boring.&lt;/p&gt;

&lt;p&gt;As I counted I noticed a neat pattern starting at the higher numbers. I thought it was pretty cool and maybe even a bit easier than doubling the numbers in the standard fashion (once you&amp;#8217;re out of memorized territory anyway).&lt;/p&gt;

&lt;p&gt;From what I&amp;#8217;ve seen of this pattern it only works at and above 1024 (2&lt;sup&gt;10&lt;/sup&gt;) so that&amp;#8217;s what I&amp;#8217;ll focus on.&lt;/p&gt;

&lt;h2 id='the_pattern'&gt;The Pattern&lt;/h2&gt;

&lt;p&gt;Take the number 1024 and split it into two parts, 1000 and 24. Keep on doing this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;1000 and 24
2000 and 48
4000 and 96
8000 and 192&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;There&amp;#8217;s an interesting relationship between the thousands digit and the rest (well, there&amp;#8217;s a few), do you see any yet?&lt;/p&gt;

&lt;p&gt;What if I represent it like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;1000 + (25 - 1)
2000 + (50 - 2)
4000 + (100 - 4)
8000 + (200 - 8)&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You can just keep on going, doubling both numbers and subtracting the thousands digit from the other number. It is a pretty quick mental operation to double 200 and subtract 16. This isn&amp;#8217;t the only way to express this relationship though:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;1000 + (24 * 1)
2000 + (24 * 2)
4000 + (24 * 4)
8000 + (24 * 8)&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;It&amp;#8217;s a simpler expression of the relationship but lacks the calculation shortcut the first one has. So what does these look like if you generalize them one step more&amp;#8230;?&lt;/p&gt;

&lt;h2 id='the_formulas'&gt;The Formulas&lt;/h2&gt;

&lt;p&gt;Where &lt;code&gt;x&lt;/code&gt; represents the thousands digits and is equal to 1 or greater (multiple digits work fine but substituting 0 in doesn&amp;#8217;t end up making any sense):&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;(x * 1000) + ((25 * x) - x)&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This can be simplified to:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;(x * 1000) + (24 * x)&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;An interesting benefit is that now you can answer the question &amp;#8220;Okay, &lt;code&gt;64kB&lt;/code&gt;&amp;#8230; 64 thousand and &lt;em&gt;how many&lt;/em&gt; bytes?&amp;#8221;&lt;/p&gt;

&lt;p&gt;Well using the first formula it is &lt;code&gt;(25 * 64) - 64&lt;/code&gt; bytes, but that&amp;#8217;s easier to do with rounder numbers. The number you&amp;#8217;re multiplying 25 by will always be easily divisible by 4 &lt;sup&gt;&lt;strong&gt;note 1&lt;/strong&gt;&lt;/sup&gt; and 100 is easier to multiply by than 25, so let&amp;#8217;s multiply 25 by 4 and divide 64 by 4 to get &lt;code&gt;100 * 16&lt;/code&gt;. It&amp;#8217;s easy to instantly see that&amp;#8217;s &lt;code&gt;1,600&lt;/code&gt;. Now the subtraction: &lt;code&gt;1,600 - 64 = 1,536&lt;/code&gt;. The answer is 64 thousand and &lt;code&gt;1,536&lt;/code&gt; bytes, or &lt;code&gt;65,536&lt;/code&gt; bytes. For those like me who were wondering, that&amp;#8217;s 2&lt;sup&gt;16&lt;/sup&gt;!&lt;/p&gt;

&lt;h2 id='in_closing'&gt;In Closing&lt;/h2&gt;

&lt;p&gt;I feel like this formula is only partway to somewhere - sure it&amp;#8217;s a neat pattern but it is a bit awkward. I&amp;#8217;d love to hear about any more cool patterns or neat mathematical tricks, if you know any and would like to share!&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;note 1&lt;/strong&gt; - Unless it's smaller than 4 in which case it doesn't matter, don't get too pedantic on me :)&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>Using core.match with function arguments</title>
   <link href="http://nickknowlson.com/blog/2013/02/17/using-core-match-with-function-arguments/"/>
   <updated>2013-02-17T00:00:00-08:00</updated>
   <id>http://nickknowlson.com/blog/2013/02/17/using-core-match-with-function-arguments</id>
   <content type="html">&lt;p&gt;Recently I started learning Clojure (partly in preparation for its upcoming section in &lt;a href='http://nickknowlson.com/projects/seven-languages-in-seven-weeks/'&gt;my tour through seven languages&lt;/a&gt;) and I ran into a problem when trying to pattern match on arguments. You can&amp;#8217;t just pass them straight to &lt;code&gt;match&lt;/code&gt; and expect to follow most current online examples. The types aren&amp;#8217;t quite right! You&amp;#8217;ll always get back the &lt;code&gt;:else&lt;/code&gt; clause or some other odd behaviour.&lt;/p&gt;

&lt;p&gt;Function arguments in Clojure are of type &lt;code&gt;ArraySeq&lt;/code&gt; (&lt;a href='http://stackoverflow.com/questions/8205209/why-argument-list-as-arrayseq'&gt;and for good reason&lt;/a&gt;), but using core.match with Seqs requires a different (slightly more verbose) syntax. The simplest way to make things work as you might expect is to convert the arguments into a Vector first.&lt;/p&gt;

&lt;h2 id='solution'&gt;Solution&lt;/h2&gt;

&lt;p&gt;Use &lt;a href='http://clojuredocs.org/clojure_core/clojure.core/vec'&gt;vec&lt;/a&gt; to convert the function arguments into a vector before passing them to &lt;code&gt;match&lt;/code&gt;:&lt;/p&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='clojure'&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nf'&gt;use&lt;/span&gt; &lt;span class='o'&gt;&amp;#39;&lt;/span&gt;&lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='nv'&gt;clojure.core.match&lt;/span&gt; &lt;span class='ss'&gt;:only&lt;/span&gt; &lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nf'&gt;match&lt;/span&gt;&lt;span class='p'&gt;)])&lt;/span&gt;

&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='kd'&gt;defn &lt;/span&gt;&lt;span class='nv'&gt;-main&lt;/span&gt; &lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='o'&gt;&amp;amp;&lt;/span&gt; &lt;span class='nv'&gt;args&lt;/span&gt;&lt;span class='p'&gt;]&lt;/span&gt;
    &lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nb'&gt;println &lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nf'&gt;match&lt;/span&gt; &lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nf'&gt;vec&lt;/span&gt; &lt;span class='nv'&gt;args&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt;
        &lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='s'&gt;&amp;quot;echo&amp;quot;&lt;/span&gt; &lt;span class='nv'&gt;word&lt;/span&gt;&lt;span class='p'&gt;]&lt;/span&gt; &lt;span class='nv'&gt;word&lt;/span&gt;
        &lt;span class='ss'&gt;:else&lt;/span&gt; &lt;span class='s'&gt;&amp;quot;Invalid command&amp;quot;&lt;/span&gt;&lt;span class='p'&gt;)))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id='alternate_solution'&gt;Alternate Solution&lt;/h2&gt;

&lt;p&gt;If spending time and processing power just to spare some syntax is unappealing to you, then I&amp;#8217;d recommend using core.match&amp;#8217;s &lt;a href='https://github.com/clojure/core.match/wiki/Overview'&gt;Seq Matching&lt;/a&gt; capabilities directly:&lt;/p&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='clojure'&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nf'&gt;use&lt;/span&gt; &lt;span class='o'&gt;&amp;#39;&lt;/span&gt;&lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='nv'&gt;clojure.core.match&lt;/span&gt; &lt;span class='ss'&gt;:only&lt;/span&gt; &lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nf'&gt;match&lt;/span&gt;&lt;span class='p'&gt;)])&lt;/span&gt;

&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='kd'&gt;defn &lt;/span&gt;&lt;span class='nv'&gt;-main&lt;/span&gt; &lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='o'&gt;&amp;amp;&lt;/span&gt; &lt;span class='nv'&gt;args&lt;/span&gt;&lt;span class='p'&gt;]&lt;/span&gt;
    &lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nb'&gt;println &lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nf'&gt;match&lt;/span&gt; &lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='nv'&gt;args&lt;/span&gt;&lt;span class='p'&gt;]&lt;/span&gt;
        &lt;span class='p'&gt;[([&lt;/span&gt;&lt;span class='s'&gt;&amp;quot;echo&amp;quot;&lt;/span&gt; &lt;span class='nv'&gt;word&lt;/span&gt;&lt;span class='p'&gt;]&lt;/span&gt; &lt;span class='ss'&gt;:seq&lt;/span&gt;&lt;span class='p'&gt;)]&lt;/span&gt; &lt;span class='nv'&gt;word&lt;/span&gt;
        &lt;span class='ss'&gt;:else&lt;/span&gt; &lt;span class='s'&gt;&amp;quot;Invalid command&amp;quot;&lt;/span&gt;&lt;span class='p'&gt;)))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Note the differences:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;code&gt;(match [args]&lt;/code&gt; - The arguments are &lt;em&gt;wrapped&lt;/em&gt; in a vector instead of being &lt;em&gt;converted&lt;/em&gt; to one&lt;/li&gt;

&lt;li&gt;&lt;code&gt;[([&amp;quot;echo&amp;quot; word] :seq)] word&lt;/code&gt; - Any pattern &lt;code&gt;x&lt;/code&gt; is enclosed like so: &lt;code&gt;[(x :seq)]&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Hope this has helped!&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>Ludum Dare &#35;24 - Post-mortem</title>
   <link href="http://nickknowlson.com/blog/2012/08/26/ludum-dare-24-finished/"/>
   <updated>2012-08-26T00:00:00-07:00</updated>
   <id>http://nickknowlson.com/blog/2012/08/26/ludum-dare-24-finished</id>
   <content type="html">&lt;p&gt;All right, that&amp;#8217;s it - for better or for worse, I&amp;#8217;m out of time. There were several major features in my game that I didn&amp;#8217;t finish, but the end result is actually playable, so I consider it a wild success!&lt;/p&gt;

&lt;p&gt;For a description of the game and screenshots, take a look at the project page here: &lt;a href='http://nickknowlson.com/projects/conways-revenge/'&gt;Conway&amp;#8217;s Revenge&lt;/a&gt;. Also, here is my official &lt;a href='http://www.ludumdare.com/compo/ludum-dare-24/?action=preview&amp;amp;uid=15084'&gt;Ludum Dare entry page&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id='what_was_missing'&gt;What was missing&lt;/h2&gt;

&lt;h3 id='soundtrack'&gt;Soundtrack&lt;/h3&gt;

&lt;p&gt;I originally had big plans for a procedurally generated soundtrack. It would be based off the action currently happening on the screen - each tribe of cells would be a different instrument/sound, and the x,y positions would determine the pitch somehow. For example, if green was winning on the top side you might hear a lot of higher pitched trumpets.&lt;/p&gt;

&lt;p&gt;This turned out to be too ambitious for the limited time frame. I think somewhere deep inside I knew this, and that&amp;#8217;s why I left it until last and implemented other, more key, features first.&lt;/p&gt;

&lt;h3 id='campaign'&gt;Campaign&lt;/h3&gt;

&lt;p&gt;Campaign mode was the way I envisioned turning Conway&amp;#8217;s Revenge from more of a toy into an actual game. I had in mind a set of puzzle levels where you face off against progressively more difficult enemy formations. You would have to experiment to find the fastest growing formations with a limited amount of cells to place.&lt;/p&gt;

&lt;p&gt;Unfortunately it took me too long to finish everything else, and I never did get started on this.&lt;/p&gt;

&lt;h3 id='multiple_colour_placement_and_scoring'&gt;Multiple colour placement and Scoring&lt;/h3&gt;

&lt;p&gt;Two more minor features I wanted to get done were: allowing the player to place all 4 (or more) cell colours, and giving them a score. I had thought about assigning points for each enemy cell you kill. This would give you more points for longer games, so instead of rewarding you for dominating your opponent it rewards you for judging the minimum amount of force necessary to eliminate them, which I thought was kind of interesting.&lt;/p&gt;

&lt;h2 id='what_was_accomplished'&gt;What was accomplished&lt;/h2&gt;

&lt;p&gt;Quite a lot, considering how unfamiliar with my tools I was. I came up with a modified live/die algorithm that I&amp;#8217;m actually quite happy with. It suits multiple players well, has a tendency to grow and eat up space, avoids deadlock/tie scenarios, still allows for stable formations and spinners, and can generate some lovely-looking &amp;#8216;explosions&amp;#8217;.&lt;/p&gt;

&lt;p&gt;I implemented two game modes, &lt;strong&gt;Sandbox&lt;/strong&gt; and &lt;strong&gt;Battle Royale&lt;/strong&gt;. They&amp;#8217;re pretty similar internally, but different enough to the user that it makes sense to separate them in the UI.&lt;/p&gt;

&lt;p&gt;I made a craptastic main menu and instruction screens. My idea was small enough in scope that I had time to do these, which I&amp;#8217;m happy about.&lt;/p&gt;

&lt;p&gt;Finally, I learned a bit about flash development, and discovered that I actually quite like it. Combined with a good game framework (I used &lt;a href='http://flashpunk.net/'&gt;FlashPunk&lt;/a&gt;) it gives you a lot of help, and makes common tasks really easy.&lt;/p&gt;

&lt;h2 id='what_went_wrong'&gt;What went wrong&lt;/h2&gt;

&lt;p&gt;I couldn&amp;#8217;t make up my mind on what set of development tools to use - I picked FlashPunk on my third attempt. Before the competition started I decided to use Unity and read few tutorials and created a small sample project. When I finally decided on my idea I realized that it would be using exactly zero of Unity&amp;#8217;s strengths and decided to change to something that made simple things easier. I initially tried XNA, downloaded it and installed Visual Studio Express, etc. then suddenly changed my mind because it would make running my game more of a pain and because people in the Ludum Dare chat were talking about how much of a pain XNA was to use.&lt;/p&gt;

&lt;p&gt;In the end Flashpunk was a good choice (I &lt;em&gt;almost&lt;/em&gt; used Flixel, and may try it next time), but it took me too long to make and I jumped into it several hours late without knowing the slightest thing about using it. Not the best strategy.&lt;/p&gt;

&lt;h2 id='what_went_right'&gt;What went right&lt;/h2&gt;

&lt;p&gt;I took my time coming up with a good idea. I must have thrown out the first ten or so I had for various reasons (unoriginal, not fun, too nebulous to implement). I personally find this idea really interesting, and it was small enough in scope that it fit my ability to implement it in less than 48 hours.&lt;/p&gt;

&lt;p&gt;Another thing I did right was prioritizing tasks and cutting down on scope at more or less the right times. I don&amp;#8217;t have a lot of half-done things left in the game - what is there is mostly complete (with a few exceptions of course). I focused on what I thought was possible to do within the limited time frame and deferred the rest until later (after the competition, even).&lt;/p&gt;

&lt;p&gt;Of course, if I had more experience, everything would look more polished and I might have been able to finish a few more of those missing bits, but the most important stuff got done. And that&amp;#8217;s what counts.&lt;/p&gt;

&lt;h2 id='closing_thoughts'&gt;Closing thoughts&lt;/h2&gt;

&lt;p&gt;I really enjoyed doing this. Quite a few times over the last few years I&amp;#8217;ve watched this event happen and thought I wasn&amp;#8217;t skilled enough to take part. I&amp;#8217;m glad I decided to join in anyway. Before the event started I was full of trepidation and self-doubt, but now that I&amp;#8217;m finished I feel exhilarated, exhausted, and I have a great feeling of accomplishment. I learned a lot of new skills, had fun with other people (I recommend joining in on the IRC channel), and I even have a cool new project to show off for it!&lt;/p&gt;

&lt;p&gt;If you&amp;#8217;re on the sidelines trying to decide whether to take part next time, I heartily recommend it. I know I will be.&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>Ludum Dare &#35;24 - Halfway!</title>
   <link href="http://nickknowlson.com/blog/2012/08/25/ludum-dare-24-halfway/"/>
   <updated>2012-08-25T00:00:00-07:00</updated>
   <id>http://nickknowlson.com/blog/2012/08/25/ludum-dare-24-halfway</id>
   <content type="html">&lt;p&gt;Well, a little past halfway in my case, since I’m going to a Barcraft tomorrow!&lt;/p&gt;

&lt;p&gt;&lt;a href='http://imgur.com/a/RLnJk#0'&gt;Here is an imgur album of what the game looks like right now&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;What is it?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;My game is essentially a multiplayer Conway’s Game of Life (it&amp;#8217;s loosely related to the theme, anyway). I’ve decided to call it “Conway’s Revenge”!&lt;/p&gt;

&lt;p&gt;It doesn’t follow the original rules for the Game of Life: I’ve made changes to the live/die algorithm to account for multiple players and to prevent spending too long in a deadlock scenario, while making sure it’s not too hard to get your cells to grow and expand.&lt;/p&gt;

&lt;p&gt;Current status is: I’m more or less happy with the live/die algorithm; I’ve got pause, play and step forward buttons; and you can draw new red or green tiles.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;So what’s next?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;I have something interesting planned for the music that I’d really like to get done, but I&amp;#8217;m not going to reveal that just yet. I want to have a main menu screen as well as some instructions. To give the game a bit of actual replay value I’d like to do one or more of the following:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Implement a progressively more difficult set of levels where you face off against different enemy formations&lt;/li&gt;

&lt;li&gt;Let you pick the number of players and place tiles of all colours so you can set up your own scenarios to see how they play out.&lt;/li&gt;

&lt;li&gt;(This is the way it works right now, but I’d like to keep this as an option) A ‘Battle Royale’ mode where all colours spawn randomly and fight it out to the death.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;If I have enough time, the ideal would be to have these three as three different game modes that you can pick right off the main menu with their own instruction screens.&lt;/p&gt;

&lt;p&gt;I think the way to go is to fully implement the main menu with one game mode (probably ‘Battle Royale’) including instructions, then move on to working on the music.&lt;/p&gt;

&lt;p&gt;If I still have time at the end, I’ll spend it on implementing the other game modes.&lt;/p&gt;

&lt;p&gt;(This post was originally published on the &lt;a href='http://www.ludumdare.com/compo/2012/08/25/halfway-4/'&gt;shared Ludum Dare blog&lt;/a&gt;)&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>Seven Languages: Week 3 (Prolog) - Day 3</title>
   <link href="http://nickknowlson.com/blog/2012/08/06/seven-languages-week-3-day-3/"/>
   <updated>2012-08-06T00:00:00-07:00</updated>
   <id>http://nickknowlson.com/blog/2012/08/06/seven-languages-week-3-day-3</id>
   <content type="html">&lt;p&gt;Day 3 tackled some bigger examples: solving sudoku and the eight queens problem. In today&amp;#8217;s post however, I&amp;#8217;m going to go a bit off the rails and talk a bit about how logic programming can be beneficial in more practical ways.&lt;/p&gt;
&lt;div class='interjection'&gt;&lt;p&gt;
(This article is part of a series of posts I am doing about my journey through the exercises of the book &lt;a href='http://pragprog.com/book/btlang/seven-languages-in-seven-weeks'&gt;Seven Languages In Seven Weeks&lt;/a&gt;. The article previous to this one is &lt;a href='/blog/2012/07/17/seven-languages-week-3-day-2/'&gt;Week 3 (Prolog) - Day 2&lt;/a&gt;. For an overview see the &lt;a href='/projects/seven-languages-in-seven-weeks/'&gt;Seven Languages project page&lt;/a&gt;.)
&lt;/p&gt;&lt;/div&gt;&lt;h3&gt;Datalog&lt;/h3&gt;
&lt;p&gt;Datalog is a subset of Prolog oriented towards querying that was designed to be embeddable in other languages. Many languages have datalog engines, such as &lt;a href='http://iris-reasoner.org/'&gt;Java&lt;/a&gt;, &lt;a href='https://sites.google.com/site/pydatalog/'&gt;Python&lt;/a&gt;, &lt;a href='http://code.google.com/p/clojure-contrib/wiki/DatalogOverview'&gt;Clojure&lt;/a&gt; and &lt;a href='http://docs.racket-lang.org/datalog/'&gt;Racket&lt;/a&gt;. It has become more well-known recently for being the query language of choice for &lt;a href='http://www.datomic.com/'&gt;Datomic&lt;/a&gt;, a promising new distributed database. &lt;a href='http://blog.fogus.me/'&gt;Michael Fogus&lt;/a&gt; is even giving a talk at this upcoming &lt;a href='https://thestrangeloop.com/'&gt;Strange Loop&lt;/a&gt; about &lt;a href='https://thestrangeloop.com/sessions/the-reemergence-of-datalog'&gt;&amp;#8220;The Reemergence of Datalog&amp;#8221;&lt;/a&gt;.&lt;/p&gt;
&lt;h3&gt;Constraint Programming&lt;/h3&gt;
&lt;p&gt;Every time in these past examples when I use the Prolog library &lt;code&gt;clp(fd)&lt;/code&gt; (which stands for Constraint Logic Programming over a Finite Domain), I&amp;#8217;m doing constraint programming. A lot of the time it is mixed in with logic programming, but it &lt;em&gt;doesn&amp;#8217;t have to be&lt;/em&gt;: there are constraint programming libraries for a lot of other languages. It can be really beneficial to know how to use even if you never write a line of Prolog.&lt;/p&gt;

&lt;p&gt;In fact, the prolog solution to sudoku below owes a lot of its conciseness to constraint programming. Sudoku solver implementations in other languages that have a constraint programming library can be about the same length! Another property of solutions using constraints is that they are usually a lot faster than an equivalent logic programming only solution.&lt;/p&gt;
&lt;h3&gt;Other logic languages&lt;/h3&gt;
&lt;p&gt;Prolog is the most widely used logic language, but it isn&amp;#8217;t the only one. Here are a few other interesting ones that caught my eye.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href='http://www.mercury.csse.unimelb.edu.au/'&gt;Mercury&lt;/a&gt; is a functional logic programming language that shares Prolog&amp;#8217;s syntax but has a strong static type system.&lt;/li&gt;

&lt;li&gt;&lt;a href='http://www-ps.informatik.uni-kiel.de/currywiki/'&gt;Curry&lt;/a&gt; is a functional logic programming language based on Haskell. It has constraint programming support built in.&lt;/li&gt;

&lt;li&gt;&lt;a href='http://www.mozart-oz.org/'&gt;Oz&lt;/a&gt; is a dynamically typed multi-paradigm language. The (reportedly excellent) book &lt;a href='http://www.info.ucl.ac.be/~pvr/book.html'&gt;Concepts, Techniques, and Models of Computer Programming&lt;/a&gt; uses Oz as its language of choice.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Logic libraries&lt;/h3&gt;
&lt;p&gt;Surprisingly, you can get logic programming functionality in library form as well! These libraries are less common than constraint programming libraries, I could only find a few:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Scheme: &lt;a href='http://kanren.sourceforge.net/'&gt;Kanren&lt;/a&gt;, miniKanren and &lt;a href='https://github.com/calvis/cKanren'&gt;cKanren&lt;/a&gt;. Kanren is the original implementation, miniKanren is a simplified implementation (~300 lines) for ease of teaching, and cKanren modifies miniKanren to support constraint logic programming.&lt;/li&gt;

&lt;li&gt;Clojure: &lt;a href='https://github.com/clojure/core.logic/'&gt;core.logic&lt;/a&gt;. This library was actually based off of miniKanren originally, and cKanren functionality is currently in progress.&lt;/li&gt;

&lt;li&gt;C++: &lt;a href='http://people.cs.umass.edu/~yannis/lc++/'&gt;LC++&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id='highlights_from_exercises'&gt;Highlights from exercises&lt;/h2&gt;

&lt;p&gt;The exercises in this chapter were pretty interesting, but also pretty exhausting for a newbie to logic programming. I ended up with two implementations of a sudoku solver. The second one was about a fifth the size of the first and I learned a ton in the process of writing it. I think my implementation is fairly readable, so if you&amp;#8217;re interested please feel free to scroll down to the &lt;a href='#formatted_solutions'&gt;formatted solutions&lt;/a&gt; and take a look.&lt;/p&gt;

&lt;p&gt;That&amp;#8217;s not what I&amp;#8217;ll be highlighting here though. I&amp;#8217;ll be pitting a Prolog solution against a solution from a regular (i.e. not logical) programming language that uses a constraint programming library. Since next week is Scala, I&amp;#8217;ll arbitrarily pick Scala as the language and &lt;a href='http://www.jacop.eu/'&gt;JaCoP&lt;/a&gt; as the constraint programming library. This is a light comparison done for my own fun and enlightenment, it isn&amp;#8217;t meant to be comprehensive.&lt;/p&gt;

&lt;p&gt;Since I&amp;#8217;m just a beginner with logic and constraint programming, it would be meaningless to compare implementations I wrote myself; the properties of the solutions would have more to do with my limitations than the languages they&amp;#8217;re written in. So for these examples I will be leaning on more experienced minds.&lt;/p&gt;
&lt;h3&gt;Prolog&lt;/h3&gt;
&lt;p&gt;This Prolog solution is taken from the &lt;a href='http://www.swi-prolog.org/man/clpfd.html'&gt;clp(fd) documentation&lt;/a&gt;.&lt;/p&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='prolog'&gt;&lt;span class='p'&gt;:-&lt;/span&gt; &lt;span class='nf'&gt;use_module&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nf'&gt;library&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='s-Atom'&gt;clpfd&lt;/span&gt;&lt;span class='p'&gt;)).&lt;/span&gt;

&lt;span class='nf'&gt;sudoku&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nv'&gt;Rows&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt; &lt;span class='p'&gt;:-&lt;/span&gt;
        &lt;span class='nf'&gt;length&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nv'&gt;Rows&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='m'&gt;9&lt;/span&gt;&lt;span class='p'&gt;),&lt;/span&gt; &lt;span class='nf'&gt;maplist&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nf'&gt;length_&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='m'&gt;9&lt;/span&gt;&lt;span class='p'&gt;),&lt;/span&gt; &lt;span class='nv'&gt;Rows&lt;/span&gt;&lt;span class='p'&gt;),&lt;/span&gt;
        &lt;span class='nf'&gt;append&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nv'&gt;Rows&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='nv'&gt;Vs&lt;/span&gt;&lt;span class='p'&gt;),&lt;/span&gt; &lt;span class='nv'&gt;Vs&lt;/span&gt; &lt;span class='s-Atom'&gt;ins&lt;/span&gt; &lt;span class='m'&gt;1&lt;/span&gt;&lt;span class='p'&gt;..&lt;/span&gt;&lt;span class='m'&gt;9&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt;
        &lt;span class='nf'&gt;maplist&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='s-Atom'&gt;all_distinct&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='nv'&gt;Rows&lt;/span&gt;&lt;span class='p'&gt;),&lt;/span&gt;
        &lt;span class='nf'&gt;transpose&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nv'&gt;Rows&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='nv'&gt;Columns&lt;/span&gt;&lt;span class='p'&gt;),&lt;/span&gt; &lt;span class='nf'&gt;maplist&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='s-Atom'&gt;all_distinct&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='nv'&gt;Columns&lt;/span&gt;&lt;span class='p'&gt;),&lt;/span&gt;
        &lt;span class='nv'&gt;Rows&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='nv'&gt;A&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt;&lt;span class='nv'&gt;B&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt;&lt;span class='nv'&gt;C&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt;&lt;span class='nv'&gt;D&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt;&lt;span class='nv'&gt;E&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt;&lt;span class='nv'&gt;F&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt;&lt;span class='nv'&gt;G&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt;&lt;span class='nv'&gt;H&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt;&lt;span class='nv'&gt;I&lt;/span&gt;&lt;span class='p'&gt;],&lt;/span&gt;
        &lt;span class='nf'&gt;blocks&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nv'&gt;A&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='nv'&gt;B&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='nv'&gt;C&lt;/span&gt;&lt;span class='p'&gt;),&lt;/span&gt; &lt;span class='nf'&gt;blocks&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nv'&gt;D&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='nv'&gt;E&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='nv'&gt;F&lt;/span&gt;&lt;span class='p'&gt;),&lt;/span&gt; &lt;span class='nf'&gt;blocks&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nv'&gt;G&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='nv'&gt;H&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='nv'&gt;I&lt;/span&gt;&lt;span class='p'&gt;).&lt;/span&gt;

&lt;span class='nf'&gt;length_&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nv'&gt;L&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='nv'&gt;Ls&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt; &lt;span class='p'&gt;:-&lt;/span&gt; &lt;span class='nf'&gt;length&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nv'&gt;Ls&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='nv'&gt;L&lt;/span&gt;&lt;span class='p'&gt;).&lt;/span&gt;

&lt;span class='nf'&gt;blocks&lt;/span&gt;&lt;span class='p'&gt;([],&lt;/span&gt; &lt;span class='p'&gt;[],&lt;/span&gt; &lt;span class='p'&gt;[]).&lt;/span&gt;
&lt;span class='nf'&gt;blocks&lt;/span&gt;&lt;span class='p'&gt;([&lt;/span&gt;&lt;span class='nv'&gt;A&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt;&lt;span class='nv'&gt;B&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt;&lt;span class='nv'&gt;C&lt;/span&gt;&lt;span class='p'&gt;|&lt;/span&gt;&lt;span class='nv'&gt;Bs1&lt;/span&gt;&lt;span class='p'&gt;],&lt;/span&gt; &lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='nv'&gt;D&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt;&lt;span class='nv'&gt;E&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt;&lt;span class='nv'&gt;F&lt;/span&gt;&lt;span class='p'&gt;|&lt;/span&gt;&lt;span class='nv'&gt;Bs2&lt;/span&gt;&lt;span class='p'&gt;],&lt;/span&gt; &lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='nv'&gt;G&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt;&lt;span class='nv'&gt;H&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt;&lt;span class='nv'&gt;I&lt;/span&gt;&lt;span class='p'&gt;|&lt;/span&gt;&lt;span class='nv'&gt;Bs3&lt;/span&gt;&lt;span class='p'&gt;])&lt;/span&gt; &lt;span class='p'&gt;:-&lt;/span&gt;
        &lt;span class='nf'&gt;all_distinct&lt;/span&gt;&lt;span class='p'&gt;([&lt;/span&gt;&lt;span class='nv'&gt;A&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt;&lt;span class='nv'&gt;B&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt;&lt;span class='nv'&gt;C&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt;&lt;span class='nv'&gt;D&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt;&lt;span class='nv'&gt;E&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt;&lt;span class='nv'&gt;F&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt;&lt;span class='nv'&gt;G&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt;&lt;span class='nv'&gt;H&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt;&lt;span class='nv'&gt;I&lt;/span&gt;&lt;span class='p'&gt;]),&lt;/span&gt;
        &lt;span class='nf'&gt;blocks&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nv'&gt;Bs1&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='nv'&gt;Bs2&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='nv'&gt;Bs3&lt;/span&gt;&lt;span class='p'&gt;).&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3&gt;Scala + JaCoP&lt;/h3&gt;
&lt;p&gt;This Scala solution is taken from &lt;a href='http://www.hakank.org/constraint_programming_blog/2011/08/a_first_look_at_scalajacop_scala_wrapper_for_jacop.html'&gt;Hakan Kjellerstrand&amp;#8217;s scalaJaCoP page&lt;/a&gt;. Here is a direct link to &lt;a href='http://www.hakank.org/jacop/Sudoku.scala'&gt;the file itself&lt;/a&gt;.&lt;/p&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='scala'&gt;&lt;span class='k'&gt;import&lt;/span&gt; &lt;span class='nn'&gt;scalaJaCoP._&lt;/span&gt;

&lt;span class='k'&gt;object&lt;/span&gt; &lt;span class='nc'&gt;Sudoku&lt;/span&gt; &lt;span class='k'&gt;extends&lt;/span&gt; &lt;span class='nc'&gt;App&lt;/span&gt; &lt;span class='k'&gt;with&lt;/span&gt; &lt;span class='n'&gt;jacop&lt;/span&gt; &lt;span class='o'&gt;{&lt;/span&gt;
  &lt;span class='k'&gt;val&lt;/span&gt; &lt;span class='n'&gt;n&lt;/span&gt; &lt;span class='k'&gt;=&lt;/span&gt; &lt;span class='mi'&gt;9&lt;/span&gt;
  &lt;span class='k'&gt;val&lt;/span&gt; &lt;span class='n'&gt;reg&lt;/span&gt; &lt;span class='k'&gt;=&lt;/span&gt; &lt;span class='mi'&gt;3&lt;/span&gt;

  &lt;span class='c1'&gt;// data&lt;/span&gt;
  &lt;span class='k'&gt;val&lt;/span&gt; &lt;span class='n'&gt;problem&lt;/span&gt; &lt;span class='k'&gt;=&lt;/span&gt; &lt;span class='o'&gt;...&lt;/span&gt; &lt;span class='c1'&gt;// omitted&lt;/span&gt;

  &lt;span class='k'&gt;val&lt;/span&gt; &lt;span class='n'&gt;x&lt;/span&gt; &lt;span class='k'&gt;=&lt;/span&gt; &lt;span class='nc'&gt;List&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='n'&gt;tabulate&lt;/span&gt;&lt;span class='o'&gt;(&lt;/span&gt;&lt;span class='n'&gt;n&lt;/span&gt;&lt;span class='o'&gt;)(&lt;/span&gt;&lt;span class='n'&gt;i&lt;/span&gt;&lt;span class='k'&gt;=&amp;gt;&lt;/span&gt; 
                &lt;span class='nc'&gt;List&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='n'&gt;tabulate&lt;/span&gt;&lt;span class='o'&gt;(&lt;/span&gt;&lt;span class='n'&gt;n&lt;/span&gt;&lt;span class='o'&gt;)(&lt;/span&gt;&lt;span class='n'&gt;j&lt;/span&gt;&lt;span class='k'&gt;=&amp;gt;&lt;/span&gt;
                  &lt;span class='k'&gt;new&lt;/span&gt; &lt;span class='nc'&gt;IntVar&lt;/span&gt;&lt;span class='o'&gt;(&lt;/span&gt;&lt;span class='s'&gt;&amp;quot;x(&amp;quot;&lt;/span&gt;&lt;span class='o'&gt;+&lt;/span&gt;&lt;span class='n'&gt;i&lt;/span&gt;&lt;span class='o'&gt;+&lt;/span&gt;&lt;span class='s'&gt;&amp;quot;,&amp;quot;&lt;/span&gt;&lt;span class='o'&gt;+&lt;/span&gt;&lt;span class='n'&gt;j&lt;/span&gt;&lt;span class='o'&gt;+&lt;/span&gt;&lt;span class='s'&gt;&amp;quot;)&amp;quot;&lt;/span&gt;&lt;span class='o'&gt;,&lt;/span&gt; &lt;span class='mi'&gt;1&lt;/span&gt;&lt;span class='o'&gt;,&lt;/span&gt; &lt;span class='n'&gt;n&lt;/span&gt;&lt;span class='o'&gt;)))&lt;/span&gt;

  &lt;span class='c1'&gt;// constraints&lt;/span&gt;

  &lt;span class='c1'&gt;// fill with the hints&lt;/span&gt;
  &lt;span class='k'&gt;for&lt;/span&gt;&lt;span class='o'&gt;(&lt;/span&gt;&lt;span class='n'&gt;i&lt;/span&gt; &lt;span class='k'&gt;&amp;lt;-&lt;/span&gt; &lt;span class='mi'&gt;0&lt;/span&gt; &lt;span class='n'&gt;until&lt;/span&gt; &lt;span class='n'&gt;n&lt;/span&gt;&lt;span class='o'&gt;)&lt;/span&gt; &lt;span class='o'&gt;{&lt;/span&gt;
    &lt;span class='k'&gt;for&lt;/span&gt;&lt;span class='o'&gt;(&lt;/span&gt;&lt;span class='n'&gt;j&lt;/span&gt; &lt;span class='k'&gt;&amp;lt;-&lt;/span&gt; &lt;span class='mi'&gt;0&lt;/span&gt; &lt;span class='n'&gt;until&lt;/span&gt; &lt;span class='n'&gt;n&lt;/span&gt;&lt;span class='o'&gt;)&lt;/span&gt; &lt;span class='o'&gt;{&lt;/span&gt;
      &lt;span class='k'&gt;if&lt;/span&gt; &lt;span class='o'&gt;(&lt;/span&gt;&lt;span class='n'&gt;problem&lt;/span&gt;&lt;span class='o'&gt;(&lt;/span&gt;&lt;span class='n'&gt;i&lt;/span&gt;&lt;span class='o'&gt;)(&lt;/span&gt;&lt;span class='n'&gt;j&lt;/span&gt;&lt;span class='o'&gt;)&lt;/span&gt; &lt;span class='o'&gt;&amp;gt;&lt;/span&gt; &lt;span class='mi'&gt;0&lt;/span&gt;&lt;span class='o'&gt;)&lt;/span&gt; &lt;span class='o'&gt;{&lt;/span&gt;
        &lt;span class='n'&gt;x&lt;/span&gt;&lt;span class='o'&gt;(&lt;/span&gt;&lt;span class='n'&gt;i&lt;/span&gt;&lt;span class='o'&gt;)(&lt;/span&gt;&lt;span class='n'&gt;j&lt;/span&gt;&lt;span class='o'&gt;)&lt;/span&gt; &lt;span class='o'&gt;#&lt;/span&gt;&lt;span class='k'&gt;=&lt;/span&gt; &lt;span class='n'&gt;problem&lt;/span&gt;&lt;span class='o'&gt;(&lt;/span&gt;&lt;span class='n'&gt;i&lt;/span&gt;&lt;span class='o'&gt;)(&lt;/span&gt;&lt;span class='n'&gt;j&lt;/span&gt;&lt;span class='o'&gt;)&lt;/span&gt;
      &lt;span class='o'&gt;}&lt;/span&gt;
    &lt;span class='o'&gt;}&lt;/span&gt;
  &lt;span class='o'&gt;}&lt;/span&gt;
  
  &lt;span class='c1'&gt;// rows and columns&lt;/span&gt;
  &lt;span class='k'&gt;for&lt;/span&gt;&lt;span class='o'&gt;(&lt;/span&gt;&lt;span class='n'&gt;i&lt;/span&gt; &lt;span class='k'&gt;&amp;lt;-&lt;/span&gt; &lt;span class='mi'&gt;0&lt;/span&gt; &lt;span class='n'&gt;until&lt;/span&gt; &lt;span class='n'&gt;n&lt;/span&gt;&lt;span class='o'&gt;)&lt;/span&gt; &lt;span class='o'&gt;{&lt;/span&gt;
    &lt;span class='n'&gt;alldifferent&lt;/span&gt;&lt;span class='o'&gt;(&lt;/span&gt; &lt;span class='nc'&gt;Array&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='n'&gt;tabulate&lt;/span&gt;&lt;span class='o'&gt;(&lt;/span&gt;&lt;span class='n'&gt;n&lt;/span&gt;&lt;span class='o'&gt;)(&lt;/span&gt;&lt;span class='n'&gt;j&lt;/span&gt;&lt;span class='k'&gt;=&amp;gt;&lt;/span&gt; &lt;span class='n'&gt;x&lt;/span&gt;&lt;span class='o'&gt;(&lt;/span&gt;&lt;span class='n'&gt;i&lt;/span&gt;&lt;span class='o'&gt;)(&lt;/span&gt;&lt;span class='n'&gt;j&lt;/span&gt;&lt;span class='o'&gt;))&lt;/span&gt; &lt;span class='o'&gt;)&lt;/span&gt;
    &lt;span class='n'&gt;alldifferent&lt;/span&gt;&lt;span class='o'&gt;(&lt;/span&gt; &lt;span class='nc'&gt;Array&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='n'&gt;tabulate&lt;/span&gt;&lt;span class='o'&gt;(&lt;/span&gt;&lt;span class='n'&gt;n&lt;/span&gt;&lt;span class='o'&gt;)(&lt;/span&gt;&lt;span class='n'&gt;j&lt;/span&gt;&lt;span class='k'&gt;=&amp;gt;&lt;/span&gt; &lt;span class='n'&gt;x&lt;/span&gt;&lt;span class='o'&gt;(&lt;/span&gt;&lt;span class='n'&gt;j&lt;/span&gt;&lt;span class='o'&gt;)(&lt;/span&gt;&lt;span class='n'&gt;i&lt;/span&gt;&lt;span class='o'&gt;))&lt;/span&gt; &lt;span class='o'&gt;)&lt;/span&gt; 
  &lt;span class='o'&gt;}&lt;/span&gt;

  &lt;span class='c1'&gt;// blocks&lt;/span&gt;
  &lt;span class='k'&gt;for&lt;/span&gt;&lt;span class='o'&gt;(&lt;/span&gt;&lt;span class='n'&gt;i&lt;/span&gt; &lt;span class='k'&gt;&amp;lt;-&lt;/span&gt; &lt;span class='mi'&gt;0&lt;/span&gt; &lt;span class='n'&gt;until&lt;/span&gt; &lt;span class='n'&gt;reg&lt;/span&gt;&lt;span class='o'&gt;;&lt;/span&gt; &lt;span class='n'&gt;j&lt;/span&gt; &lt;span class='k'&gt;&amp;lt;-&lt;/span&gt; &lt;span class='mi'&gt;0&lt;/span&gt; &lt;span class='n'&gt;until&lt;/span&gt; &lt;span class='n'&gt;reg&lt;/span&gt;&lt;span class='o'&gt;)&lt;/span&gt; &lt;span class='o'&gt;{&lt;/span&gt;
    &lt;span class='n'&gt;alldifferent&lt;/span&gt;&lt;span class='o'&gt;(&lt;/span&gt;  &lt;span class='o'&gt;(&lt;/span&gt;&lt;span class='k'&gt;for&lt;/span&gt;&lt;span class='o'&gt;{&lt;/span&gt; &lt;span class='n'&gt;r&lt;/span&gt; &lt;span class='k'&gt;&amp;lt;-&lt;/span&gt; &lt;span class='n'&gt;i&lt;/span&gt;&lt;span class='o'&gt;*&lt;/span&gt;&lt;span class='n'&gt;reg&lt;/span&gt; &lt;span class='n'&gt;until&lt;/span&gt; &lt;span class='n'&gt;i&lt;/span&gt;&lt;span class='o'&gt;*&lt;/span&gt;&lt;span class='n'&gt;reg&lt;/span&gt;&lt;span class='o'&gt;+&lt;/span&gt;&lt;span class='n'&gt;reg&lt;/span&gt;&lt;span class='o'&gt;;&lt;/span&gt;
                        &lt;span class='n'&gt;c&lt;/span&gt; &lt;span class='k'&gt;&amp;lt;-&lt;/span&gt; &lt;span class='n'&gt;j&lt;/span&gt;&lt;span class='o'&gt;*&lt;/span&gt;&lt;span class='n'&gt;reg&lt;/span&gt; &lt;span class='n'&gt;until&lt;/span&gt; &lt;span class='n'&gt;j&lt;/span&gt;&lt;span class='o'&gt;*&lt;/span&gt;&lt;span class='n'&gt;reg&lt;/span&gt;&lt;span class='o'&gt;+&lt;/span&gt;&lt;span class='n'&gt;reg&lt;/span&gt;
                     &lt;span class='o'&gt;}&lt;/span&gt; &lt;span class='k'&gt;yield&lt;/span&gt; &lt;span class='n'&gt;x&lt;/span&gt;&lt;span class='o'&gt;(&lt;/span&gt;&lt;span class='n'&gt;r&lt;/span&gt;&lt;span class='o'&gt;)(&lt;/span&gt;&lt;span class='n'&gt;c&lt;/span&gt;&lt;span class='o'&gt;)).&lt;/span&gt;&lt;span class='n'&gt;toArray&lt;/span&gt;
               &lt;span class='o'&gt;)&lt;/span&gt;
  &lt;span class='o'&gt;}&lt;/span&gt;

   &lt;span class='c1'&gt;// search&lt;/span&gt;
  &lt;span class='k'&gt;val&lt;/span&gt; &lt;span class='n'&gt;result&lt;/span&gt; &lt;span class='k'&gt;=&lt;/span&gt; &lt;span class='n'&gt;satisfyAll&lt;/span&gt;&lt;span class='o'&gt;(&lt;/span&gt;&lt;span class='n'&gt;search&lt;/span&gt;&lt;span class='o'&gt;(&lt;/span&gt;&lt;span class='n'&gt;x&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='n'&gt;flatten&lt;/span&gt;&lt;span class='o'&gt;,&lt;/span&gt; &lt;span class='n'&gt;max_regret&lt;/span&gt;&lt;span class='o'&gt;,&lt;/span&gt; &lt;span class='n'&gt;indomain_max&lt;/span&gt;&lt;span class='o'&gt;),&lt;/span&gt; &lt;span class='n'&gt;printIt&lt;/span&gt;&lt;span class='o'&gt;)&lt;/span&gt; 

  &lt;span class='k'&gt;def&lt;/span&gt; &lt;span class='n'&gt;printIt&lt;/span&gt;&lt;span class='o'&gt;()&lt;/span&gt; &lt;span class='o'&gt;{&lt;/span&gt; &lt;span class='o'&gt;...&lt;/span&gt; &lt;span class='o'&gt;}&lt;/span&gt; &lt;span class='c1'&gt;// omitted&lt;/span&gt;
&lt;span class='o'&gt;}&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;For brevity I&amp;#8217;m omitting how the Prolog solution is queried and how the Scala solution is printed. I want to keep the focus on the interesting parts of these programs. For the full source code, check the links above or the &lt;a href='https://github.com/nickknw/constraint-programming-benchmarks'&gt;benchmark source code&lt;/a&gt; on github.&lt;/p&gt;
&lt;h3&gt;Scoring&lt;/h3&gt;&lt;h4&gt;Size&lt;/h4&gt;
&lt;p&gt;The Prolog program is just over half as long at &lt;strong&gt;13&lt;/strong&gt; lines instead of &lt;strong&gt;25&lt;/strong&gt; for Scala (not counting comments or whitespace). Although this is definitely a win for Prolog, the Scala version is still far shorter than any Sudoku solvers that don&amp;#8217;t take advantage of constraint programming.&lt;/p&gt;
&lt;h4&gt;Readability&lt;/h4&gt;
&lt;p&gt;Ah, the most subjective benchmark! This one is hard for me to judge fairly, since I&amp;#8217;ve spent a lot of time inside of Prolog recently, and none using Scala or JaCoP. That said, even trying to account for my bias I think the Prolog solution has a big advantage here. It reads a lot more declaratively than the Scala solution and doesn&amp;#8217;t have to worry about as many details.&lt;/p&gt;

&lt;p&gt;Given my bias I would be very interested to hear feedback on this topic. Which solution did &lt;strong&gt;you&lt;/strong&gt; think was more readable?&lt;/p&gt;
&lt;h4&gt;Speed&lt;/h4&gt;
&lt;p&gt;Now we are into interesting territory. Prolog has a few decades&amp;#8217; headstart on JaCoP, but JaCoP has the speed of the highly optimized JVM behind it. Let&amp;#8217;s see who comes out on top!&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Disclaimer:&lt;/strong&gt; I acknowledge that benchmarking is an easy thing to do incorrectly. I&amp;#8217;ve made the &lt;a href='https://github.com/nickknw/constraint-programming-benchmarks'&gt;source code for these benchmarks&lt;/a&gt; available on github and included instructions to allow you to (hopefully!) easily replicate my results. Please feel free to double check what I&amp;#8217;ve done, I am more than happy to receive feedback telling me I am wrong. Contributions using other libraries or languages are also welcome.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Results:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;SWI-Prolog managed to solve the sample sudoku problem in an average of &lt;strong&gt;78 milliseconds&lt;/strong&gt; on my machine.&lt;/p&gt;

&lt;p&gt;JaCoP managed to solve the sample sudoku problem in an average of &lt;strong&gt;95 milliseconds&lt;/strong&gt; on my machine.&lt;/p&gt;

&lt;p&gt;The Scala version takes &lt;strong&gt;1.2 times&lt;/strong&gt; the amount of time the Prolog version takes. Honestly, this was an unexpected result for me; I would have guessed JaCoP had the edge. Regardless, they are both &lt;em&gt;pretty damn fast&lt;/em&gt; solutions for not a lot of effort. Both win here.&lt;/p&gt;
&lt;h4&gt;Conclusions&lt;/h4&gt;
&lt;p&gt;Given the close results, there is only one clear conclusion I can draw from this comparison: Scala + JaCoP can roughly match the expressiveness and speed of a Prolog solution, at least for Sudoku. But that&amp;#8217;s boring! If I may hypothesize, I would guess that: for a large class of problems, constraint programming libraries can give you most of the benefits of a logic programming solution while only sacrificing a little bit of declarative conciseness and elegance.&lt;/p&gt;

&lt;p&gt;Good news for the working programmer who doesn&amp;#8217;t feel he has time to learn Prolog!&lt;/p&gt;
&lt;h4&gt;More constraint programming examples&lt;/h4&gt;
&lt;p&gt;Hakan Kjellerstrand has a &lt;a href='http://www.hakank.org/constraint_programming/'&gt;fantastic collection of problems&lt;/a&gt; solved using many different constraint programming libraries. It is a great resource and can be fun to compare different implementations of the same problem.&lt;/p&gt;

&lt;h2 id='full_code_listing'&gt;Full Code Listing&lt;/h2&gt;

&lt;p&gt;Here is a nicely formatted version of my solutions to the exercises from Day 3 of Prolog. The home of the following code is &lt;a href='https://github.com/nickknw/seven-languages-in-seven-weeks/blob/master/week-3-prolog/day3.pl'&gt;on github&lt;/a&gt; with the other exercises.&lt;/p&gt;
&lt;div id='formatted_solutions'&gt;

&lt;h3&gt;Find:&lt;/h3&gt;

&lt;div class='question'&gt;&lt;b&gt;1.&lt;/b&gt; Prolog has some input/output features as well. Find print predicates that print out variables.&lt;/div&gt;

&lt;div class='code_explanation'&gt;
There's 'write'. I'll paste my minInList function in here and make it
write each element of the list while it checks them.
Aha, 'format' and 'writef' are very nice too.
&lt;/div&gt;


&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='prolog'&gt;&lt;span class='nf'&gt;min&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nv'&gt;A&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt;&lt;span class='nv'&gt;A&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt;&lt;span class='nv'&gt;A&lt;/span&gt;&lt;span class='p'&gt;).&lt;/span&gt;
&lt;span class='nf'&gt;min&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nv'&gt;A&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt;&lt;span class='nv'&gt;B&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt;&lt;span class='nv'&gt;B&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt; &lt;span class='p'&gt;:-&lt;/span&gt; &lt;span class='nv'&gt;B&lt;/span&gt; &lt;span class='o'&gt;&amp;lt;&lt;/span&gt; &lt;span class='nv'&gt;A&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;
&lt;span class='nf'&gt;min&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nv'&gt;A&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt;&lt;span class='nv'&gt;B&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt;&lt;span class='nv'&gt;A&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt; &lt;span class='p'&gt;:-&lt;/span&gt; &lt;span class='nv'&gt;A&lt;/span&gt; &lt;span class='o'&gt;&amp;lt;&lt;/span&gt; &lt;span class='nv'&gt;B&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;

&lt;span class='nf'&gt;minInList&lt;/span&gt;&lt;span class='p'&gt;([&lt;/span&gt;&lt;span class='nv'&gt;X&lt;/span&gt;&lt;span class='p'&gt;|&lt;/span&gt;&lt;span class='nv'&gt;XS&lt;/span&gt;&lt;span class='p'&gt;],&lt;/span&gt; &lt;span class='nv'&gt;M&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt; &lt;span class='p'&gt;:-&lt;/span&gt; &lt;span class='nf'&gt;minInList&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nv'&gt;XS&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='nv'&gt;M1&lt;/span&gt;&lt;span class='p'&gt;),&lt;/span&gt; &lt;span class='nf'&gt;min&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nv'&gt;X&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='nv'&gt;M1&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='nv'&gt;M&lt;/span&gt;&lt;span class='p'&gt;),&lt;/span&gt; &lt;span class='nf'&gt;format&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='s-Atom'&gt;&amp;#39;~a, &amp;#39;&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='nv'&gt;X&lt;/span&gt;&lt;span class='p'&gt;).&lt;/span&gt;
&lt;span class='nf'&gt;minInList&lt;/span&gt;&lt;span class='p'&gt;([&lt;/span&gt;&lt;span class='nv'&gt;X&lt;/span&gt;&lt;span class='p'&gt;],&lt;/span&gt; &lt;span class='nv'&gt;X&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt; &lt;span class='p'&gt;:-&lt;/span&gt; &lt;span class='nf'&gt;format&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='s-Atom'&gt;&amp;#39;~a, &amp;#39;&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='nv'&gt;X&lt;/span&gt;&lt;span class='p'&gt;).&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;div class='question'&gt;&lt;b&gt;2.&lt;/b&gt; Find a way to use the print predicates to print only successful solutions. How do they work?&lt;/div&gt;

&lt;div class='code_explanation'&gt;
To answer this one... I guess I want to use a rule that can have multiple
correct answers. I'll take an example from the book.
&lt;/div&gt;


&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='prolog'&gt;&lt;span class='nf'&gt;different&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='s-Atom'&gt;red&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='s-Atom'&gt;green&lt;/span&gt;&lt;span class='p'&gt;).&lt;/span&gt; &lt;span class='nf'&gt;different&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='s-Atom'&gt;red&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='s-Atom'&gt;blue&lt;/span&gt;&lt;span class='p'&gt;).&lt;/span&gt;
&lt;span class='nf'&gt;different&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='s-Atom'&gt;green&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='s-Atom'&gt;red&lt;/span&gt;&lt;span class='p'&gt;).&lt;/span&gt; &lt;span class='nf'&gt;different&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='s-Atom'&gt;green&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='s-Atom'&gt;blue&lt;/span&gt;&lt;span class='p'&gt;).&lt;/span&gt;
&lt;span class='nf'&gt;different&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='s-Atom'&gt;blue&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='s-Atom'&gt;red&lt;/span&gt;&lt;span class='p'&gt;).&lt;/span&gt; &lt;span class='nf'&gt;different&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='s-Atom'&gt;blue&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='s-Atom'&gt;green&lt;/span&gt;&lt;span class='p'&gt;).&lt;/span&gt;

&lt;span class='nf'&gt;coloring&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nv'&gt;Alabama&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='nv'&gt;Mississippi&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='nv'&gt;Georgia&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='nv'&gt;Tennessee&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='nv'&gt;Florida&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt; &lt;span class='p'&gt;:-&lt;/span&gt;
    &lt;span class='nf'&gt;different&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nv'&gt;Mississippi&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='nv'&gt;Tennessee&lt;/span&gt;&lt;span class='p'&gt;),&lt;/span&gt;
    &lt;span class='nf'&gt;different&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nv'&gt;Mississippi&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='nv'&gt;Alabama&lt;/span&gt;&lt;span class='p'&gt;),&lt;/span&gt;
    &lt;span class='nf'&gt;different&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nv'&gt;Alabama&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='nv'&gt;Tennessee&lt;/span&gt;&lt;span class='p'&gt;),&lt;/span&gt;
    &lt;span class='nf'&gt;different&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nv'&gt;Alabama&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='nv'&gt;Mississippi&lt;/span&gt;&lt;span class='p'&gt;),&lt;/span&gt;
    &lt;span class='nf'&gt;different&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nv'&gt;Alabama&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='nv'&gt;Georgia&lt;/span&gt;&lt;span class='p'&gt;),&lt;/span&gt;
    &lt;span class='nf'&gt;different&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nv'&gt;Alabama&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='nv'&gt;Florida&lt;/span&gt;&lt;span class='p'&gt;),&lt;/span&gt;
    &lt;span class='nf'&gt;different&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nv'&gt;Georgia&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='nv'&gt;Florida&lt;/span&gt;&lt;span class='p'&gt;),&lt;/span&gt;
    &lt;span class='nf'&gt;different&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nv'&gt;Georgia&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='nv'&gt;Tennessee&lt;/span&gt;&lt;span class='p'&gt;),&lt;/span&gt;
    &lt;span class='nf'&gt;format&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='s-Atom'&gt;&amp;#39;~a, ~a, ~a, ~a, ~a&amp;#39;&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='nv'&gt;Alabama&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='nv'&gt;Mississippi&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='nv'&gt;Georgia&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='nv'&gt;Tennessee&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='nv'&gt;Florida&lt;/span&gt;&lt;span class='p'&gt;]).&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;div class='code_explanation'&gt;
Well, that will only print successful solutions, but I kind of feel like I've
missed the point. All this will do is repeat the information that you already
receive. Oh well, if I figure it out I'll come back to it.
&lt;/div&gt;


&lt;h3&gt;Do:&lt;/h3&gt;

&lt;div class='question'&gt;&lt;b&gt;1.&lt;/b&gt; Modify the Sudoku solver to work on six-by-six puzzles (squares are 3x2) and 9x9 puzzles)&lt;/div&gt;

&lt;div class='code_explanation'&gt;
I wrote a long awful version of this first, then cheated to write a better one.
I looked at &lt;a href='http://stackoverflow.com/questions/1768274/prolog-learning-by-example'&gt;this sudoku solver&lt;/a&gt; (found in the &lt;a href='http://www.swi-prolog.org/man/clpfd.html'&gt;clp(fd) documentation&lt;/a&gt;), understood how it worked, then closed it and wrote my own. This is the version that you see below. I also chose to do just 9x9.
&lt;/div&gt;


&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='prolog'&gt;&lt;span class='p'&gt;:-&lt;/span&gt; &lt;span class='nf'&gt;use_module&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nf'&gt;library&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='s-Atom'&gt;clpfd&lt;/span&gt;&lt;span class='p'&gt;)).&lt;/span&gt;

&lt;span class='nf'&gt;sudoku&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nv'&gt;Rows&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt; &lt;span class='p'&gt;:-&lt;/span&gt;
    &lt;span class='c1'&gt;% split into rows&lt;/span&gt;
    &lt;span class='nv'&gt;Rows&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='nv'&gt;A&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='nv'&gt;B&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='nv'&gt;C&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='nv'&gt;D&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='nv'&gt;E&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='nv'&gt;F&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='nv'&gt;G&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='nv'&gt;H&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='nv'&gt;I&lt;/span&gt;&lt;span class='p'&gt;],&lt;/span&gt;
    &lt;span class='c1'&gt;% and columns&lt;/span&gt;
    &lt;span class='nf'&gt;transpose&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nv'&gt;Rows&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='nv'&gt;Columns&lt;/span&gt;&lt;span class='p'&gt;),&lt;/span&gt; 

    &lt;span class='c1'&gt;% some bounds checking&lt;/span&gt;
    &lt;span class='nf'&gt;append&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nv'&gt;Rows&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='nv'&gt;FlattenedRows&lt;/span&gt;&lt;span class='p'&gt;),&lt;/span&gt; &lt;span class='nv'&gt;FlattenedRows&lt;/span&gt; &lt;span class='s-Atom'&gt;ins&lt;/span&gt; &lt;span class='m'&gt;1&lt;/span&gt;&lt;span class='p'&gt;..&lt;/span&gt;&lt;span class='m'&gt;9&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt;
    &lt;span class='nf'&gt;length&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nv'&gt;Rows&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='m'&gt;9&lt;/span&gt;&lt;span class='p'&gt;),&lt;/span&gt;
    &lt;span class='nf'&gt;length&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nv'&gt;Columns&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='m'&gt;9&lt;/span&gt;&lt;span class='p'&gt;),&lt;/span&gt;

    &lt;span class='c1'&gt;% all rows valid&lt;/span&gt;
    &lt;span class='nf'&gt;maplist&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='s-Atom'&gt;all_distinct&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='nv'&gt;Rows&lt;/span&gt;&lt;span class='p'&gt;),&lt;/span&gt;

    &lt;span class='c1'&gt;% all columns valid&lt;/span&gt;
    &lt;span class='nf'&gt;maplist&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='s-Atom'&gt;all_distinct&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='nv'&gt;Columns&lt;/span&gt;&lt;span class='p'&gt;),&lt;/span&gt;

    &lt;span class='c1'&gt;% all blocks valid&lt;/span&gt;
    &lt;span class='nf'&gt;valid_blocks&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nv'&gt;A&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='nv'&gt;B&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='nv'&gt;C&lt;/span&gt;&lt;span class='p'&gt;),&lt;/span&gt;
    &lt;span class='nf'&gt;valid_blocks&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nv'&gt;D&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='nv'&gt;E&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='nv'&gt;F&lt;/span&gt;&lt;span class='p'&gt;),&lt;/span&gt;
    &lt;span class='nf'&gt;valid_blocks&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nv'&gt;G&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='nv'&gt;H&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='nv'&gt;I&lt;/span&gt;&lt;span class='p'&gt;),&lt;/span&gt;

    &lt;span class='nf'&gt;prettier_print&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nv'&gt;FlattenedRows&lt;/span&gt;&lt;span class='p'&gt;).&lt;/span&gt;

&lt;span class='nf'&gt;valid_blocks&lt;/span&gt;&lt;span class='p'&gt;([],&lt;/span&gt; &lt;span class='p'&gt;[],&lt;/span&gt; &lt;span class='p'&gt;[]).&lt;/span&gt;  
&lt;span class='nf'&gt;valid_blocks&lt;/span&gt;&lt;span class='p'&gt;([&lt;/span&gt;&lt;span class='nv'&gt;A1&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='nv'&gt;A2&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='nv'&gt;A3&lt;/span&gt; &lt;span class='p'&gt;|&lt;/span&gt; &lt;span class='nv'&gt;As&lt;/span&gt;&lt;span class='p'&gt;],&lt;/span&gt; &lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='nv'&gt;B1&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='nv'&gt;B2&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='nv'&gt;B3&lt;/span&gt; &lt;span class='p'&gt;|&lt;/span&gt; &lt;span class='nv'&gt;Bs&lt;/span&gt;&lt;span class='p'&gt;],&lt;/span&gt; &lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='nv'&gt;C1&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='nv'&gt;C2&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='nv'&gt;C3&lt;/span&gt; &lt;span class='p'&gt;|&lt;/span&gt; &lt;span class='nv'&gt;Cs&lt;/span&gt;&lt;span class='p'&gt;])&lt;/span&gt; &lt;span class='p'&gt;:-&lt;/span&gt;
    &lt;span class='nf'&gt;maplist&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='s-Atom'&gt;all_distinct&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='nv'&gt;A1&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='nv'&gt;A2&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='nv'&gt;A3&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='nv'&gt;B1&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='nv'&gt;B2&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='nv'&gt;B3&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='nv'&gt;C1&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='nv'&gt;C2&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='nv'&gt;C3&lt;/span&gt;&lt;span class='p'&gt;]),&lt;/span&gt;
    &lt;span class='nf'&gt;valid_blocks&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nv'&gt;As&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='nv'&gt;Bs&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='nv'&gt;Cs&lt;/span&gt;&lt;span class='p'&gt;).&lt;/span&gt;


&lt;span class='nf'&gt;problem&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='m'&gt;1&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='p'&gt;[[&lt;/span&gt;&lt;span class='k'&gt;_&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt;&lt;span class='k'&gt;_&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt;&lt;span class='k'&gt;_&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt;&lt;span class='k'&gt;_&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt;&lt;span class='k'&gt;_&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt;&lt;span class='k'&gt;_&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt;&lt;span class='k'&gt;_&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt;&lt;span class='k'&gt;_&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt;&lt;span class='k'&gt;_&lt;/span&gt;&lt;span class='p'&gt;],&lt;/span&gt;                                   
            &lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='k'&gt;_&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt;&lt;span class='k'&gt;_&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt;&lt;span class='k'&gt;_&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt;&lt;span class='k'&gt;_&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt;&lt;span class='k'&gt;_&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt;&lt;span class='m'&gt;3&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt;&lt;span class='k'&gt;_&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt;&lt;span class='m'&gt;8&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt;&lt;span class='m'&gt;5&lt;/span&gt;&lt;span class='p'&gt;],&lt;/span&gt;                                   
            &lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='k'&gt;_&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt;&lt;span class='k'&gt;_&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt;&lt;span class='m'&gt;1&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt;&lt;span class='k'&gt;_&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt;&lt;span class='m'&gt;2&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt;&lt;span class='k'&gt;_&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt;&lt;span class='k'&gt;_&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt;&lt;span class='k'&gt;_&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt;&lt;span class='k'&gt;_&lt;/span&gt;&lt;span class='p'&gt;],&lt;/span&gt;                                   
            &lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='k'&gt;_&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt;&lt;span class='k'&gt;_&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt;&lt;span class='k'&gt;_&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt;&lt;span class='m'&gt;5&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt;&lt;span class='k'&gt;_&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt;&lt;span class='m'&gt;7&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt;&lt;span class='k'&gt;_&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt;&lt;span class='k'&gt;_&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt;&lt;span class='k'&gt;_&lt;/span&gt;&lt;span class='p'&gt;],&lt;/span&gt;                                   
            &lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='k'&gt;_&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt;&lt;span class='k'&gt;_&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt;&lt;span class='m'&gt;4&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt;&lt;span class='k'&gt;_&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt;&lt;span class='k'&gt;_&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt;&lt;span class='k'&gt;_&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt;&lt;span class='m'&gt;1&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt;&lt;span class='k'&gt;_&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt;&lt;span class='k'&gt;_&lt;/span&gt;&lt;span class='p'&gt;],&lt;/span&gt;                                   
            &lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='k'&gt;_&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt;&lt;span class='m'&gt;9&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt;&lt;span class='k'&gt;_&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt;&lt;span class='k'&gt;_&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt;&lt;span class='k'&gt;_&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt;&lt;span class='k'&gt;_&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt;&lt;span class='k'&gt;_&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt;&lt;span class='k'&gt;_&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt;&lt;span class='k'&gt;_&lt;/span&gt;&lt;span class='p'&gt;],&lt;/span&gt;                                  
            &lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='m'&gt;5&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt;&lt;span class='k'&gt;_&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt;&lt;span class='k'&gt;_&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt;&lt;span class='k'&gt;_&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt;&lt;span class='k'&gt;_&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt;&lt;span class='k'&gt;_&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt;&lt;span class='k'&gt;_&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt;&lt;span class='m'&gt;7&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt;&lt;span class='m'&gt;3&lt;/span&gt;&lt;span class='p'&gt;],&lt;/span&gt;                                  
            &lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='k'&gt;_&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt;&lt;span class='k'&gt;_&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt;&lt;span class='m'&gt;2&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt;&lt;span class='k'&gt;_&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt;&lt;span class='m'&gt;1&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt;&lt;span class='k'&gt;_&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt;&lt;span class='k'&gt;_&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt;&lt;span class='k'&gt;_&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt;&lt;span class='k'&gt;_&lt;/span&gt;&lt;span class='p'&gt;],&lt;/span&gt;                                   
            &lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='k'&gt;_&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt;&lt;span class='k'&gt;_&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt;&lt;span class='k'&gt;_&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt;&lt;span class='k'&gt;_&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt;&lt;span class='m'&gt;4&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt;&lt;span class='k'&gt;_&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt;&lt;span class='k'&gt;_&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt;&lt;span class='k'&gt;_&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt;&lt;span class='m'&gt;9&lt;/span&gt;&lt;span class='p'&gt;]]).&lt;/span&gt;

&lt;span class='c1'&gt;% can test with:&lt;/span&gt;
&lt;span class='c1'&gt;% ?- problem(1, Board), sudoku(Board).&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;div class='question'&gt;&lt;b&gt;2.&lt;/b&gt; Make the Sudoku solver print prettier
solutions.&lt;/div&gt;


&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='prolog'&gt;&lt;span class='nf'&gt;prettier_print&lt;/span&gt;&lt;span class='p'&gt;([]).&lt;/span&gt;
&lt;span class='nf'&gt;prettier_print&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nv'&gt;Puzzle&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt; &lt;span class='p'&gt;:-&lt;/span&gt; &lt;span class='nf'&gt;prettier_print&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='m'&gt;0&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='nv'&gt;Puzzle&lt;/span&gt;&lt;span class='p'&gt;).&lt;/span&gt;

&lt;span class='nf'&gt;prettier_print&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='m'&gt;0&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='nv'&gt;Puzzle&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt; &lt;span class='p'&gt;:-&lt;/span&gt; 
    &lt;span class='nf'&gt;writeln&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='s-Atom'&gt;&amp;#39;┌───────┬───────┬───────┐&amp;#39;&lt;/span&gt;&lt;span class='p'&gt;),&lt;/span&gt; 
    &lt;span class='nf'&gt;prettier_print&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='m'&gt;1&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='nv'&gt;Puzzle&lt;/span&gt;&lt;span class='p'&gt;).&lt;/span&gt;
&lt;span class='nf'&gt;prettier_print&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='m'&gt;4&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='nv'&gt;Puzzle&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt; &lt;span class='p'&gt;:-&lt;/span&gt; 
    &lt;span class='nf'&gt;writeln&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='s-Atom'&gt;&amp;#39;│───────┼───────┼───────│&amp;#39;&lt;/span&gt;&lt;span class='p'&gt;),&lt;/span&gt; 
    &lt;span class='nf'&gt;prettier_print&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='m'&gt;5&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='nv'&gt;Puzzle&lt;/span&gt;&lt;span class='p'&gt;).&lt;/span&gt;
&lt;span class='nf'&gt;prettier_print&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='m'&gt;8&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='nv'&gt;Puzzle&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt; &lt;span class='p'&gt;:-&lt;/span&gt; 
    &lt;span class='nf'&gt;writeln&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='s-Atom'&gt;&amp;#39;│───────┼───────┼───────│&amp;#39;&lt;/span&gt;&lt;span class='p'&gt;),&lt;/span&gt; 
    &lt;span class='nf'&gt;prettier_print&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='m'&gt;9&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='nv'&gt;Puzzle&lt;/span&gt;&lt;span class='p'&gt;).&lt;/span&gt;
&lt;span class='nf'&gt;prettier_print&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='m'&gt;12&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='p'&gt;[])&lt;/span&gt; &lt;span class='p'&gt;:-&lt;/span&gt; 
    &lt;span class='nf'&gt;writeln&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='s-Atom'&gt;&amp;#39;└───────┴───────┴───────┘&amp;#39;&lt;/span&gt;&lt;span class='p'&gt;).&lt;/span&gt;

&lt;span class='nf'&gt;prettier_print&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nv'&gt;N&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='nv'&gt;Col1&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='nv'&gt;Col2&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='nv'&gt;Col3&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='nv'&gt;Col4&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='nv'&gt;Col5&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='nv'&gt;Col6&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='nv'&gt;Col7&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='nv'&gt;Col8&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='nv'&gt;Col9&lt;/span&gt; &lt;span class='p'&gt;|&lt;/span&gt; &lt;span class='nv'&gt;Puzzle&lt;/span&gt;&lt;span class='p'&gt;])&lt;/span&gt; &lt;span class='p'&gt;:-&lt;/span&gt; 
    &lt;span class='nf'&gt;member&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nv'&gt;N&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='m'&gt;1&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt;&lt;span class='m'&gt;2&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt;&lt;span class='m'&gt;3&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt;&lt;span class='m'&gt;5&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt;&lt;span class='m'&gt;6&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt;&lt;span class='m'&gt;7&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt;&lt;span class='m'&gt;9&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt;&lt;span class='m'&gt;10&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt;&lt;span class='m'&gt;11&lt;/span&gt;&lt;span class='p'&gt;]),&lt;/span&gt;
    &lt;span class='c1'&gt;%N =\= 0, N =\= 4, N =\= 8, N =\= 13,&lt;/span&gt;
    &lt;span class='c1'&gt;% note to self about above: remember, prolog&amp;#39;s pattern matching isn&amp;#39;t&lt;/span&gt;
    &lt;span class='c1'&gt;% like pattern matching in other languages&lt;/span&gt;

    &lt;span class='nf'&gt;format&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='s-Atom'&gt;&amp;#39;│ ~d ~d ~d │ ~d ~d ~d │ ~d ~d ~d │~n&amp;#39;&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='nv'&gt;Col1&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='nv'&gt;Col2&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='nv'&gt;Col3&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='nv'&gt;Col4&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='nv'&gt;Col5&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='nv'&gt;Col6&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='nv'&gt;Col7&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='nv'&gt;Col8&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='nv'&gt;Col9&lt;/span&gt;&lt;span class='p'&gt;]),&lt;/span&gt; 
    &lt;span class='nf'&gt;succ&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nv'&gt;N&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='nv'&gt;N1&lt;/span&gt;&lt;span class='p'&gt;),&lt;/span&gt;
    &lt;span class='nf'&gt;prettier_print&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nv'&gt;N1&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='nv'&gt;Puzzle&lt;/span&gt;&lt;span class='p'&gt;).&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;div class='tiny_title'&gt;Output&lt;/div&gt;

&lt;div class='symmetrical_line_height'&gt;

&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='bash'&gt;?- problem&lt;span class='o'&gt;(&lt;/span&gt;1, Board&lt;span class='o'&gt;)&lt;/span&gt;, sudoku&lt;span class='o'&gt;(&lt;/span&gt;Board&lt;span class='o'&gt;)&lt;/span&gt;.

┌───────┬───────┬───────┐
│ 9 8 7 │ 6 5 4 │ 3 2 1 │
│ 2 4 6 │ 1 7 3 │ 9 8 5 │
│ 3 5 1 │ 9 2 8 │ 7 4 6 │
│───────┼───────┼───────│
│ 1 2 8 │ 5 3 7 │ 6 9 4 │
│ 6 3 4 │ 8 9 2 │ 1 5 7 │
│ 7 9 5 │ 4 6 1 │ 8 3 2 │
│───────┼───────┼───────│
│ 5 1 9 │ 2 8 6 │ 4 7 3 │
│ 4 7 2 │ 3 1 9 │ 5 6 8 │
│ 8 6 3 │ 7 4 5 │ 2 1 9 │
└───────┴───────┴───────┘
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;

&lt;div class='question'&gt;&lt;b&gt;3.&lt;/b&gt; Solve the Eight Queens problem by taking a list of queens. Rather than a
tuple, represent each queen with an integer, from 1-8. Get the row of a queen
by its position in the list and the column by the value in the list.
&lt;/div&gt;

&lt;div class='code_explanation'&gt;...I think I'm just going to leave this one. I'd
like to move on to Scala at this point&lt;/div&gt;

&lt;/div&gt;
&lt;p&gt;Next in this series: &lt;a href='http://localhost:4000/blog/2013/03/28/seven-languages-week-4-day-1/'&gt;Day 1 of Scala&lt;/a&gt;.&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>Seven Languages: Week 3 (Prolog) - Day 2</title>
   <link href="http://nickknowlson.com/blog/2012/07/17/seven-languages-week-3-day-2/"/>
   <updated>2012-07-17T00:00:00-07:00</updated>
   <id>http://nickknowlson.com/blog/2012/07/17/seven-languages-week-3-day-2</id>
   <content type="html">&lt;p&gt;Day 2 of Prolog really emphasized its declarative aspects for me. Writing Prolog well &lt;em&gt;requires&lt;/em&gt; you to think differently about the way you approach the problem. Yes, given enough time you can hack something together (I&amp;#8217;ve sure proven that!), but you can get a lot more out of it by learning to structure your thoughts to fit the way Prolog works. All languages are like this to some extent, and this isn&amp;#8217;t a bad thing. The difference is in degree - existing imperative and functional programming thought patterns help a lot less in Prolog.&lt;/p&gt;

&lt;p&gt;So what, in short, makes it so different? Putting aside my impulse to immediately whip out some code samples, I think characterizing it like this is an accurate enough high level summary for now:&lt;/p&gt;
&lt;ul class='compact_list'&gt;
&lt;li&gt;&lt;b&gt;Imperative programming:&lt;/b&gt; you state what steps you want the machine to perform&lt;/li&gt;
&lt;li&gt;&lt;b&gt;Functional programming:&lt;/b&gt; you state what operations you want to apply to some data&lt;/li&gt;
&lt;li&gt;&lt;b&gt;Logic programming:&lt;/b&gt; you state what goals will make this rule true&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Like my other experiences so far with Prolog, Day 2 was a mix of &amp;#8220;this is brilliant!&amp;#8221; and &amp;#8220;this is incredibly frustrating&amp;#8221;. It is possible to do some really cool things with Prolog (and other logic languages like Curry, Mercury, and Oz. Also Datalog and constraint solving libraries, which I am covering in Day 3), but it has some decently sized stumbling blocks as well:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Documentation&lt;/strong&gt;:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Resources for someone learning Prolog are sparse, even compared to a very new language like Io. When looking for documentation you can quickly find yourself reading academic papers. While these are interesting they are not especially useful when I just want to know more about list syntax or how to use higher order functions.&lt;/p&gt;
&lt;/li&gt;

&lt;li&gt;
&lt;p&gt;As an aside, it turns out Prolog does in fact have &lt;a href='http://www.j-paine.org/dobbs/ho_span_count.html'&gt;higher order function&lt;/a&gt; equivalents (or should I say higher order rules?). I didn&amp;#8217;t actually know about this until I came back to write this post after doing the exercises .&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Troubleshooting&lt;/strong&gt;:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;You have an almost absolute lack of help when something goes wrong with your Prolog program.&lt;/p&gt;
&lt;/li&gt;

&lt;li&gt;
&lt;p&gt;Many syntax errors don&amp;#8217;t give you much information as to what you&amp;#8217;ve phrased incorrectly, leaving you to go back to your program and try tweaking things that look off. For someone who has already internalized the syntax I am sure this isn&amp;#8217;t an issue, but for people still learning it can be quite frustrating. One example of something that gave me a hard time was &lt;code&gt;ERROR: Arguments are not sufficiently instantiated&lt;/code&gt;. That cryptic message is literally the only information you get: no line numbers, rule names, or any other hints.&lt;/p&gt;
&lt;/li&gt;

&lt;li&gt;
&lt;p&gt;More serious than syntax is trying to fix logical errors. It was common for me to have a program with some small flaw and just get back &lt;code&gt;false.&lt;/code&gt; when attempting to run it. It is hard to pick apart exactly what went wrong. Prolog is a &lt;a href='http://www.j-paine.org/dobbs/prolog_lightbulb.html'&gt;little bit famous for this&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Recursion&lt;/strong&gt; used to be on this list, but most of the issues I had turned out to really be a lack of knowledge on my part. It &lt;em&gt;was&lt;/em&gt; difficult for me to acquire that knowledge though, so I am going to document the parts that gave me the most trouble here in hopes I can save some future programmer a bit of time.&lt;/p&gt;
&lt;div class='interjection'&gt;&lt;p&gt;
(This article is part of a series of posts I am doing about my journey through the exercises of the book &lt;a href='http://pragprog.com/book/btlang/seven-languages-in-seven-weeks'&gt;Seven Languages In Seven Weeks&lt;/a&gt;. The article previous to this one is &lt;a href='/blog/2012/02/05/seven-languages-week-3-day-1/'&gt;Week 3 (Prolog) - Day 1&lt;/a&gt;. For an overview see the &lt;a href='/projects/seven-languages-in-seven-weeks/'&gt;Seven Languages project page&lt;/a&gt;.)
&lt;/p&gt;&lt;/div&gt;
&lt;h2 id='topics_covered'&gt;Topics covered&lt;/h2&gt;

&lt;p&gt;Day 2 of Prolog went over lists, unification, and recursion.&lt;/p&gt;

&lt;p&gt;I am going to write about these topics with a focus on the problems I encountered while trying to write solutions to the exercises (and another simple program that calculated &lt;a href='http://en.wikipedia.org/wiki/Combination'&gt;combinations&lt;/a&gt;).&lt;/p&gt;
&lt;h3&gt;Lists&lt;/h3&gt;
&lt;p&gt;Most of the trouble I had with lists was centered around the cons syntax for lists that is so useful in pattern matching. In Haskell, this looks like &lt;code&gt;(x:xs)&lt;/code&gt;, &lt;code&gt;(x:y:tail)&lt;/code&gt;, or even &lt;code&gt;(x:y:z:[])&lt;/code&gt;. When I first learned this syntax in Prolog I didn&amp;#8217;t have enough examples to form a correct mental model of the way it worked.&lt;/p&gt;

&lt;p&gt;So, here are bunch of valid examples of constructing lists.&lt;/p&gt;

&lt;p&gt;Basic examples:&lt;/p&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='prolog'&gt;&lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='nv'&gt;X&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='nv'&gt;Y&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='nv'&gt;Z&lt;/span&gt;&lt;span class='p'&gt;]&lt;/span&gt;           &lt;span class='c1'&gt;% normal list syntax - list of three elements&lt;/span&gt;

&lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='nv'&gt;X&lt;/span&gt;&lt;span class='p'&gt;|&lt;/span&gt;&lt;span class='nv'&gt;Xs&lt;/span&gt;&lt;span class='p'&gt;]&lt;/span&gt;              &lt;span class='c1'&gt;% basic use of cons operator - divide list into head (X) and tail (Xs)&lt;/span&gt;

&lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='nv'&gt;X&lt;/span&gt;&lt;span class='p'&gt;|[]]&lt;/span&gt;              &lt;span class='c1'&gt;% appending an empty list to a single item gives you a list with one element&lt;/span&gt;
&lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='nv'&gt;X&lt;/span&gt;&lt;span class='p'&gt;]&lt;/span&gt;                 &lt;span class='c1'&gt;% a shorter way to express having a list with a single element&lt;/span&gt;

&lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='nv'&gt;X&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='nv'&gt;Y&lt;/span&gt;&lt;span class='p'&gt;]&lt;/span&gt;              &lt;span class='c1'&gt;% list with two and only two elements - regular syntax&lt;/span&gt;
&lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='nv'&gt;X&lt;/span&gt;&lt;span class='p'&gt;|[&lt;/span&gt;&lt;span class='nv'&gt;Y&lt;/span&gt;&lt;span class='p'&gt;|[]]]&lt;/span&gt;          &lt;span class='c1'&gt;% same - using full cons syntax&lt;/span&gt;
&lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='nv'&gt;X&lt;/span&gt;&lt;span class='p'&gt;|[&lt;/span&gt;&lt;span class='nv'&gt;Y&lt;/span&gt;&lt;span class='p'&gt;]]&lt;/span&gt;             &lt;span class='c1'&gt;% same - without the unnecessary empty list concatenation&lt;/span&gt;

&lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='nv'&gt;X&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='nv'&gt;Y&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='nv'&gt;Z&lt;/span&gt;&lt;span class='p'&gt;]&lt;/span&gt;           &lt;span class='c1'&gt;% list with three and only three elements - regular syntax&lt;/span&gt;
&lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='nv'&gt;X&lt;/span&gt;&lt;span class='p'&gt;|[&lt;/span&gt;&lt;span class='nv'&gt;Y&lt;/span&gt;&lt;span class='p'&gt;|[&lt;/span&gt;&lt;span class='nv'&gt;Z&lt;/span&gt;&lt;span class='p'&gt;]]]&lt;/span&gt;         &lt;span class='c1'&gt;% same - using cons syntax&lt;/span&gt;
&lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='nv'&gt;X&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='nv'&gt;Y&lt;/span&gt;&lt;span class='p'&gt;|[&lt;/span&gt;&lt;span class='nv'&gt;Z&lt;/span&gt;&lt;span class='p'&gt;]]&lt;/span&gt;          &lt;span class='c1'&gt;% same - using simplified cons syntax&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;But it doesn&amp;#8217;t make sense to use cons syntax to do what regular list syntax already expresses better. Here are some more interesting examples that make use of the strengths of cons syntax:&lt;/p&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='prolog'&gt;&lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='nv'&gt;X&lt;/span&gt;&lt;span class='p'&gt;|[&lt;/span&gt;&lt;span class='nv'&gt;Y&lt;/span&gt;&lt;span class='p'&gt;|&lt;/span&gt;&lt;span class='nv'&gt;Ys&lt;/span&gt;&lt;span class='p'&gt;]]&lt;/span&gt;        &lt;span class='c1'&gt;% list with at least two elements (X and Y), bind the rest of the list to Ys&lt;/span&gt;
&lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='nv'&gt;X&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='nv'&gt;Y&lt;/span&gt;&lt;span class='p'&gt;|&lt;/span&gt;&lt;span class='nv'&gt;Ys&lt;/span&gt;&lt;span class='p'&gt;]&lt;/span&gt;         &lt;span class='c1'&gt;% same - using simplified cons syntax&lt;/span&gt;

&lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='k'&gt;_&lt;/span&gt;&lt;span class='p'&gt;|[&lt;/span&gt;&lt;span class='k'&gt;_&lt;/span&gt;&lt;span class='p'&gt;|&lt;/span&gt;&lt;span class='nv'&gt;Tail&lt;/span&gt;&lt;span class='p'&gt;]]&lt;/span&gt;      &lt;span class='c1'&gt;% list with at least two elements, don&amp;#39;t bind names to first two elements, bind the rest to Tail&lt;/span&gt;
&lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='k'&gt;_&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='k'&gt;_&lt;/span&gt;&lt;span class='p'&gt;|&lt;/span&gt;&lt;span class='nv'&gt;Tail&lt;/span&gt;&lt;span class='p'&gt;]&lt;/span&gt;       &lt;span class='c1'&gt;% same - using simplified cons syntax&lt;/span&gt;

&lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='nv'&gt;X&lt;/span&gt;&lt;span class='p'&gt;|[&lt;/span&gt;&lt;span class='nv'&gt;Y&lt;/span&gt;&lt;span class='p'&gt;|[&lt;/span&gt;&lt;span class='nv'&gt;Z&lt;/span&gt;&lt;span class='p'&gt;|&lt;/span&gt;&lt;span class='k'&gt;_&lt;/span&gt;&lt;span class='p'&gt;]]]&lt;/span&gt;     &lt;span class='c1'&gt;% list with at least three elements, discard the tail&lt;/span&gt;
&lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='nv'&gt;X&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='nv'&gt;Y&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='nv'&gt;Z&lt;/span&gt;&lt;span class='p'&gt;|&lt;/span&gt;&lt;span class='k'&gt;_&lt;/span&gt;&lt;span class='p'&gt;]&lt;/span&gt;       &lt;span class='c1'&gt;% same - using simplified cons syntax&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;To cement these, here are some concrete examples of pattern matching with lists:&lt;/p&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='prolog'&gt;&lt;span class='s-Atom'&gt;?-&lt;/span&gt; &lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='s-Atom'&gt;a&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='s-Atom'&gt;b&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='s-Atom'&gt;c&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='s-Atom'&gt;d&lt;/span&gt;&lt;span class='p'&gt;]&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='nv'&gt;X&lt;/span&gt;&lt;span class='p'&gt;|&lt;/span&gt;&lt;span class='nv'&gt;Xs&lt;/span&gt;&lt;span class='p'&gt;].&lt;/span&gt;           &lt;span class='c1'&gt;% X = a, Xs = [b, c, d].&lt;/span&gt;
&lt;span class='s-Atom'&gt;?-&lt;/span&gt; &lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='s-Atom'&gt;a&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='s-Atom'&gt;b&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='s-Atom'&gt;c&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='s-Atom'&gt;d&lt;/span&gt;&lt;span class='p'&gt;]&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='nv'&gt;X&lt;/span&gt;&lt;span class='p'&gt;|&lt;/span&gt;&lt;span class='k'&gt;_&lt;/span&gt;&lt;span class='p'&gt;].&lt;/span&gt;            &lt;span class='c1'&gt;% X = a.&lt;/span&gt;
&lt;span class='s-Atom'&gt;?-&lt;/span&gt; &lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='s-Atom'&gt;a&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='s-Atom'&gt;b&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='s-Atom'&gt;c&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='s-Atom'&gt;d&lt;/span&gt;&lt;span class='p'&gt;]&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='k'&gt;_&lt;/span&gt;&lt;span class='p'&gt;|&lt;/span&gt;&lt;span class='nv'&gt;Xs&lt;/span&gt;&lt;span class='p'&gt;].&lt;/span&gt;           &lt;span class='c1'&gt;% Xs = [b, c, d].&lt;/span&gt;

&lt;span class='s-Atom'&gt;?-&lt;/span&gt; &lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='s-Atom'&gt;a&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='s-Atom'&gt;b&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='s-Atom'&gt;c&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='s-Atom'&gt;d&lt;/span&gt;&lt;span class='p'&gt;]&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='nv'&gt;W&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='nv'&gt;X&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='nv'&gt;Y&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='nv'&gt;Z&lt;/span&gt;&lt;span class='p'&gt;].&lt;/span&gt;     &lt;span class='c1'&gt;% W = a, X = b, Y = c, Z = d. &lt;/span&gt;
&lt;span class='s-Atom'&gt;?-&lt;/span&gt; &lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='s-Atom'&gt;a&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='s-Atom'&gt;b&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='s-Atom'&gt;c&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='s-Atom'&gt;d&lt;/span&gt;&lt;span class='p'&gt;]&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='nv'&gt;W&lt;/span&gt;&lt;span class='p'&gt;|[&lt;/span&gt;&lt;span class='nv'&gt;X&lt;/span&gt;&lt;span class='p'&gt;|[&lt;/span&gt;&lt;span class='nv'&gt;Y&lt;/span&gt;&lt;span class='p'&gt;|[&lt;/span&gt;&lt;span class='nv'&gt;Z&lt;/span&gt;&lt;span class='p'&gt;]]].&lt;/span&gt;   &lt;span class='c1'&gt;% W = a, X = b, Y = c, Z = d. &lt;/span&gt;

&lt;span class='s-Atom'&gt;?-&lt;/span&gt; &lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='s-Atom'&gt;a&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='s-Atom'&gt;b&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='s-Atom'&gt;c&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='s-Atom'&gt;d&lt;/span&gt;&lt;span class='p'&gt;]&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='nv'&gt;W&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='nv'&gt;X&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='nv'&gt;Y&lt;/span&gt;&lt;span class='p'&gt;].&lt;/span&gt;        &lt;span class='c1'&gt;% false.&lt;/span&gt;
&lt;span class='s-Atom'&gt;?-&lt;/span&gt; &lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='s-Atom'&gt;a&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='s-Atom'&gt;b&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='s-Atom'&gt;c&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='s-Atom'&gt;d&lt;/span&gt;&lt;span class='p'&gt;]&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='nv'&gt;W&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='nv'&gt;X&lt;/span&gt;&lt;span class='p'&gt;|&lt;/span&gt;&lt;span class='nv'&gt;Y&lt;/span&gt;&lt;span class='p'&gt;].&lt;/span&gt;         &lt;span class='c1'&gt;% W = a, X = b, Y = [c, d].&lt;/span&gt;

&lt;span class='s-Atom'&gt;?-&lt;/span&gt; &lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='s-Atom'&gt;a&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='s-Atom'&gt;b&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='s-Atom'&gt;c&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='s-Atom'&gt;d&lt;/span&gt;&lt;span class='p'&gt;]&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='nv'&gt;W&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='nv'&gt;X&lt;/span&gt;&lt;span class='p'&gt;|&lt;/span&gt;&lt;span class='nv'&gt;Y&lt;/span&gt;&lt;span class='p'&gt;].&lt;/span&gt;         &lt;span class='c1'&gt;% W = a, X = b, Y = [c, d]. &lt;/span&gt;
&lt;span class='s-Atom'&gt;?-&lt;/span&gt; &lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='s-Atom'&gt;a&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='s-Atom'&gt;b&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='s-Atom'&gt;c&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='s-Atom'&gt;d&lt;/span&gt;&lt;span class='p'&gt;]&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='k'&gt;_&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='nv'&gt;X&lt;/span&gt;&lt;span class='p'&gt;|&lt;/span&gt;&lt;span class='nv'&gt;Y&lt;/span&gt;&lt;span class='p'&gt;].&lt;/span&gt;         &lt;span class='c1'&gt;% X = b, Y = [c, d].&lt;/span&gt;
&lt;span class='s-Atom'&gt;?-&lt;/span&gt; &lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='s-Atom'&gt;a&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='s-Atom'&gt;b&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='s-Atom'&gt;c&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='s-Atom'&gt;d&lt;/span&gt;&lt;span class='p'&gt;]&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='nv'&gt;W&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='k'&gt;_&lt;/span&gt;&lt;span class='p'&gt;|&lt;/span&gt;&lt;span class='nv'&gt;Y&lt;/span&gt;&lt;span class='p'&gt;].&lt;/span&gt;         &lt;span class='c1'&gt;% W = a, Y = [c, d].&lt;/span&gt;
&lt;span class='s-Atom'&gt;?-&lt;/span&gt; &lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='s-Atom'&gt;a&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='s-Atom'&gt;b&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='s-Atom'&gt;c&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='s-Atom'&gt;d&lt;/span&gt;&lt;span class='p'&gt;]&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='nv'&gt;W&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='nv'&gt;X&lt;/span&gt;&lt;span class='p'&gt;|&lt;/span&gt;&lt;span class='k'&gt;_&lt;/span&gt;&lt;span class='p'&gt;].&lt;/span&gt;         &lt;span class='c1'&gt;% W = a, X = b.&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3&gt;Unification&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;UPDATE:&lt;/strong&gt; Turns out I had a massive misunderstanding about what unification was. I had conflated it with a number of other concepts that combined together form Prolog&amp;#8217;s execution model. I&amp;#8217;ve removed what I wrote about unification and may some day do a follow-up article on Prolog&amp;#8217;s execution model.&lt;/p&gt;
&lt;h3&gt;The logic programming difference&lt;/h3&gt;
&lt;p&gt;So what does having that fancy execution model really mean? To demonstrate the difference it can make I am going to show you the same function written in three different languages and three different styles. I&amp;#8217;ve picked the &lt;code&gt;append&lt;/code&gt; function (append one list to another list) which is a great example, even though it&amp;#8217;s been explained many times before. In the comments on my &lt;a href='/blog/2012/02/05/seven-languages-week-3-day-1/'&gt;last post&lt;/a&gt; actually, &lt;a href='http://www.storytotell.org/'&gt;Daniel Lyons&lt;/a&gt; gave a &lt;a href='/blog/2012/02/05/seven-languages-week-3-day-1/#comment-446662856'&gt;nice demonstration&lt;/a&gt; of &lt;code&gt;append&lt;/code&gt; in Prolog, and it is an example &lt;a href='http://www.java.net/external?url=http://blog.rapidred.com'&gt;Bruce Tate&lt;/a&gt; spends a couple pages on as well.&lt;/p&gt;
&lt;h4&gt;Imperative (Javascript)&lt;/h4&gt;&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='javascript'&gt;&lt;span class='kd'&gt;function&lt;/span&gt; &lt;span class='nx'&gt;append&lt;/span&gt; &lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nx'&gt;xs&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='nx'&gt;ys&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt; &lt;span class='p'&gt;{&lt;/span&gt;
    &lt;span class='kd'&gt;var&lt;/span&gt; &lt;span class='nx'&gt;result&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='nx'&gt;xs&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='nx'&gt;slice&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='mi'&gt;0&lt;/span&gt;&lt;span class='p'&gt;),&lt;/span&gt;
    &lt;span class='nx'&gt;i&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt;

    &lt;span class='k'&gt;for&lt;/span&gt; &lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nx'&gt;i&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='mi'&gt;0&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt; &lt;span class='nx'&gt;i&lt;/span&gt; &lt;span class='o'&gt;&amp;lt;&lt;/span&gt; &lt;span class='nx'&gt;ys&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='nx'&gt;length&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt; &lt;span class='nx'&gt;i&lt;/span&gt;&lt;span class='o'&gt;++&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt; &lt;span class='p'&gt;{&lt;/span&gt;
        &lt;span class='nx'&gt;result&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='nx'&gt;push&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nx'&gt;ys&lt;/span&gt;&lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='nx'&gt;i&lt;/span&gt;&lt;span class='p'&gt;]);&lt;/span&gt;
    &lt;span class='p'&gt;}&lt;/span&gt;

    &lt;span class='k'&gt;return&lt;/span&gt; &lt;span class='nx'&gt;result&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt;
&lt;span class='p'&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The most straightforward implementation of append. Callers would use it like so:&lt;/p&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='javascript'&gt;&lt;span class='kd'&gt;var&lt;/span&gt; &lt;span class='nx'&gt;list&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='nx'&gt;append&lt;/span&gt;&lt;span class='p'&gt;([&lt;/span&gt;&lt;span class='mi'&gt;1&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='mi'&gt;2&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='mi'&gt;3&lt;/span&gt;&lt;span class='p'&gt;],&lt;/span&gt; &lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='mi'&gt;4&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='mi'&gt;5&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='mi'&gt;6&lt;/span&gt;&lt;span class='p'&gt;]);&lt;/span&gt;
&lt;span class='c1'&gt;// list is [1, 2, 3, 4, 5, 6]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Nothing fancy here! This essentially duplicates the existing &lt;code&gt;concat&lt;/code&gt; method in javascript.&lt;/p&gt;
&lt;h4&gt;Functional (Haskell)&lt;/h4&gt;&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='haskell'&gt;&lt;span class='nf'&gt;append&lt;/span&gt; &lt;span class='ow'&gt;::&lt;/span&gt; &lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='n'&gt;a&lt;/span&gt;&lt;span class='p'&gt;]&lt;/span&gt; &lt;span class='ow'&gt;-&amp;gt;&lt;/span&gt; &lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='n'&gt;a&lt;/span&gt;&lt;span class='p'&gt;]&lt;/span&gt; &lt;span class='ow'&gt;-&amp;gt;&lt;/span&gt; &lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='n'&gt;a&lt;/span&gt;&lt;span class='p'&gt;]&lt;/span&gt;
&lt;span class='nf'&gt;append&lt;/span&gt; &lt;span class='kt'&gt;[]&lt;/span&gt; &lt;span class='n'&gt;ys&lt;/span&gt; &lt;span class='ow'&gt;=&lt;/span&gt; &lt;span class='n'&gt;ys&lt;/span&gt;
&lt;span class='nf'&gt;append&lt;/span&gt; &lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='n'&gt;x&lt;/span&gt;&lt;span class='kt'&gt;:&lt;/span&gt;&lt;span class='n'&gt;xs&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt; &lt;span class='n'&gt;ys&lt;/span&gt; &lt;span class='ow'&gt;=&lt;/span&gt; &lt;span class='n'&gt;x&lt;/span&gt; &lt;span class='kt'&gt;:&lt;/span&gt; &lt;span class='n'&gt;append&lt;/span&gt; &lt;span class='n'&gt;xs&lt;/span&gt; &lt;span class='n'&gt;ys&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;A basic recursive implementation of append. Once again, it is straightforward to use:&lt;/p&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='haskell'&gt;&lt;span class='nf'&gt;list&lt;/span&gt; &lt;span class='ow'&gt;=&lt;/span&gt; &lt;span class='n'&gt;append&lt;/span&gt; &lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='mi'&gt;1&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='mi'&gt;2&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='mi'&gt;3&lt;/span&gt;&lt;span class='p'&gt;]&lt;/span&gt; &lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='mi'&gt;4&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='mi'&gt;5&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='mi'&gt;6&lt;/span&gt;&lt;span class='p'&gt;]&lt;/span&gt;
&lt;span class='c1'&gt;-- list is [1, 2, 3, 4, 5, 6]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now that we&amp;#8217;re in Haskell, we can of course easily take advantage of partial application and write things like:&lt;/p&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='haskell'&gt;&lt;span class='nf'&gt;appendList1&lt;/span&gt; &lt;span class='ow'&gt;=&lt;/span&gt; &lt;span class='n'&gt;append&lt;/span&gt; &lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='mi'&gt;1&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='mi'&gt;2&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='mi'&gt;3&lt;/span&gt;&lt;span class='p'&gt;]&lt;/span&gt;
&lt;span class='nf'&gt;list2&lt;/span&gt; &lt;span class='ow'&gt;=&lt;/span&gt; &lt;span class='n'&gt;appendList1&lt;/span&gt; &lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='mi'&gt;4&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='mi'&gt;5&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='mi'&gt;6&lt;/span&gt;&lt;span class='p'&gt;]&lt;/span&gt;
&lt;span class='c1'&gt;-- list2 is [1, 2, 3, 4, 5, 6]&lt;/span&gt;
&lt;span class='nf'&gt;list3&lt;/span&gt; &lt;span class='ow'&gt;=&lt;/span&gt; &lt;span class='n'&gt;appendList1&lt;/span&gt; &lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='mi'&gt;1&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='mi'&gt;2&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='mi'&gt;3&lt;/span&gt;&lt;span class='p'&gt;]&lt;/span&gt;
&lt;span class='c1'&gt;-- list3 is [1, 2, 3, 1, 2, 3]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;But this function still just appends one list to another. It&amp;#8217;s the same as the built in &lt;code&gt;++&lt;/code&gt; function, and basically equivalent to the previous javascript example.&lt;/p&gt;
&lt;h4&gt;Logic-based (Prolog)&lt;/h4&gt;&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='prolog'&gt;&lt;span class='nf'&gt;append&lt;/span&gt;&lt;span class='p'&gt;([],&lt;/span&gt;&lt;span class='nv'&gt;Ys&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt;&lt;span class='nv'&gt;Ys&lt;/span&gt;&lt;span class='p'&gt;).&lt;/span&gt;
&lt;span class='nf'&gt;append&lt;/span&gt;&lt;span class='p'&gt;([&lt;/span&gt;&lt;span class='nv'&gt;X&lt;/span&gt;&lt;span class='p'&gt;|&lt;/span&gt;&lt;span class='nv'&gt;Xs&lt;/span&gt;&lt;span class='p'&gt;],&lt;/span&gt;&lt;span class='nv'&gt;Ys&lt;/span&gt;&lt;span class='p'&gt;,[&lt;/span&gt;&lt;span class='nv'&gt;X&lt;/span&gt;&lt;span class='p'&gt;|&lt;/span&gt;&lt;span class='nv'&gt;Zs&lt;/span&gt;&lt;span class='p'&gt;])&lt;/span&gt; &lt;span class='p'&gt;:-&lt;/span&gt; &lt;span class='nf'&gt;append&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nv'&gt;Xs&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt;&lt;span class='nv'&gt;Ys&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt;&lt;span class='nv'&gt;Zs&lt;/span&gt;&lt;span class='p'&gt;).&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;At first glance, this function is just like the previous two. Note how similar it is to the Haskell example in particular, since it too is just a simple recursive function. It can be used like so:&lt;/p&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='prolog'&gt;&lt;span class='s-Atom'&gt;?-&lt;/span&gt; &lt;span class='nf'&gt;append&lt;/span&gt;&lt;span class='p'&gt;([&lt;/span&gt;&lt;span class='m'&gt;1&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='m'&gt;2&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='m'&gt;3&lt;/span&gt;&lt;span class='p'&gt;],&lt;/span&gt; &lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='m'&gt;4&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='m'&gt;5&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='m'&gt;6&lt;/span&gt;&lt;span class='p'&gt;],&lt;/span&gt; &lt;span class='nv'&gt;List&lt;/span&gt;&lt;span class='p'&gt;).&lt;/span&gt;
&lt;span class='nv'&gt;List&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='m'&gt;1&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='m'&gt;2&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='m'&gt;3&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='m'&gt;4&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='m'&gt;5&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='m'&gt;6&lt;/span&gt;&lt;span class='p'&gt;].&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;With Prolog it is sometimes accurate to look at a rule as a function with the parameters being &lt;code&gt;(param1, param2, return value)&lt;/code&gt;. If you look at the example above in this way it gives you an &lt;em&gt;accurate&lt;/em&gt;, but &lt;em&gt;limited&lt;/em&gt; picture of this rule. With unification, you could just as easily look at this rule as &lt;code&gt;(param1,
return value, param2)&lt;/code&gt;, like so:&lt;/p&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='prolog'&gt;&lt;span class='s-Atom'&gt;?-&lt;/span&gt; &lt;span class='nf'&gt;append&lt;/span&gt;&lt;span class='p'&gt;([&lt;/span&gt;&lt;span class='m'&gt;1&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='m'&gt;2&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='m'&gt;3&lt;/span&gt;&lt;span class='p'&gt;],&lt;/span&gt; &lt;span class='nv'&gt;List&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='m'&gt;1&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='m'&gt;2&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='m'&gt;3&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='m'&gt;4&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='m'&gt;5&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='m'&gt;6&lt;/span&gt;&lt;span class='p'&gt;]).&lt;/span&gt;
&lt;span class='nv'&gt;List&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='m'&gt;4&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='m'&gt;5&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='m'&gt;6&lt;/span&gt;&lt;span class='p'&gt;].&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Prolog solves for the missing parameter and correctly calculates the result! This is the major difference between traditional languages and a logic language. But &lt;code&gt;(param1, return value, param2)&lt;/code&gt; is still not the best way to think about rules, as it breaks down when confronted with something like this:&lt;/p&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='prolog'&gt;&lt;span class='s-Atom'&gt;?-&lt;/span&gt; &lt;span class='nf'&gt;append&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nv'&gt;List1&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='nv'&gt;List2&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='m'&gt;1&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='m'&gt;2&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='m'&gt;3&lt;/span&gt;&lt;span class='p'&gt;]).&lt;/span&gt;
&lt;span class='nv'&gt;List1&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='p'&gt;[],&lt;/span&gt;
&lt;span class='nv'&gt;List2&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='m'&gt;1&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='m'&gt;2&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='m'&gt;3&lt;/span&gt;&lt;span class='p'&gt;]&lt;/span&gt; &lt;span class='p'&gt;;&lt;/span&gt;
&lt;span class='nv'&gt;List1&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='m'&gt;1&lt;/span&gt;&lt;span class='p'&gt;],&lt;/span&gt;
&lt;span class='nv'&gt;List2&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='m'&gt;2&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='m'&gt;3&lt;/span&gt;&lt;span class='p'&gt;]&lt;/span&gt; &lt;span class='p'&gt;;&lt;/span&gt;
&lt;span class='nv'&gt;List1&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='m'&gt;1&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='m'&gt;2&lt;/span&gt;&lt;span class='p'&gt;],&lt;/span&gt;
&lt;span class='nv'&gt;List2&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='m'&gt;3&lt;/span&gt;&lt;span class='p'&gt;]&lt;/span&gt; &lt;span class='p'&gt;;&lt;/span&gt;
&lt;span class='nv'&gt;List1&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='m'&gt;1&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='m'&gt;2&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='m'&gt;3&lt;/span&gt;&lt;span class='p'&gt;],&lt;/span&gt;
&lt;span class='nv'&gt;List2&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='p'&gt;[]&lt;/span&gt; &lt;span class='p'&gt;;&lt;/span&gt;
&lt;span class='s-Atom'&gt;false&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Prolog just generated all the possible ways you could combine two lists to make &lt;code&gt;[1, 2, 3]&lt;/code&gt;! All this functionality from that tiny definition of &lt;code&gt;append&lt;/code&gt; up above!&lt;/p&gt;

&lt;p&gt;There&amp;#8217;s one more interesting use for append - as a lie-detector:&lt;/p&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='prolog'&gt;&lt;span class='s-Atom'&gt;?-&lt;/span&gt; &lt;span class='nf'&gt;append&lt;/span&gt;&lt;span class='p'&gt;([&lt;/span&gt;&lt;span class='m'&gt;1&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='m'&gt;2&lt;/span&gt;&lt;span class='p'&gt;],&lt;/span&gt; &lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='m'&gt;3&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='m'&gt;4&lt;/span&gt;&lt;span class='p'&gt;],&lt;/span&gt; &lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='m'&gt;1&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='m'&gt;2&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='m'&gt;3&lt;/span&gt;&lt;span class='p'&gt;]).&lt;/span&gt;
&lt;span class='s-Atom'&gt;false&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;
&lt;span class='s-Atom'&gt;?-&lt;/span&gt; &lt;span class='nf'&gt;append&lt;/span&gt;&lt;span class='p'&gt;([&lt;/span&gt;&lt;span class='m'&gt;1&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='m'&gt;2&lt;/span&gt;&lt;span class='p'&gt;],&lt;/span&gt; &lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='m'&gt;3&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='m'&gt;4&lt;/span&gt;&lt;span class='p'&gt;],&lt;/span&gt; &lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='m'&gt;1&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='m'&gt;2&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='m'&gt;3&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='m'&gt;4&lt;/span&gt;&lt;span class='p'&gt;]).&lt;/span&gt;
&lt;span class='s-Atom'&gt;true&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;All of this comes from the power of unification.&lt;/p&gt;
&lt;h3&gt;Recursion&lt;/h3&gt;
&lt;p&gt;When writing recursive rules in Prolog you really have to make sure to keep thinking in terms of &amp;#8216;making this statement true&amp;#8217; instead of your typical program execution. One thing that makes it more awkward is that you can&amp;#8217;t use return values: every &amp;#8216;result&amp;#8217; has to be a another parameter. And so you end up with more intermediate variables that have little meaning, as the example below shows.&lt;/p&gt;

&lt;p&gt;Since there is no such thing as a for or while loop in Prolog, you end up using recursion a lot, and you will use it more than you need to if you don&amp;#8217;t know that Prolog actually does have higher-order functions. This is important so I&amp;#8217;m going to say it again: &lt;strong&gt;Prolog has higher order functions&lt;/strong&gt;. They&amp;#8217;re just not widely advertised and they&amp;#8217;re barely documented. There&amp;#8217;s Lee Naish&amp;#8217;s paper, &lt;a href='http://www.cs.umbc.edu/771/papers/mu_96_02.pdf'&gt;Higher Order logic programming in Prolog&lt;/a&gt; and there&amp;#8217;s also &lt;a href='http://www.j-paine.org/dobbs/ho_span_count.html'&gt;this nice post&lt;/a&gt; which gives good examples of &lt;code&gt;maplist&lt;/code&gt; and &lt;code&gt;foldr&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The existence of &lt;code&gt;maplist&lt;/code&gt; makes a big difference in how many lines of code it takes to write recursive rules in Prolog. Here&amp;#8217;s the same recursive function in both Haskell and Prolog. Not being able to use return values makes it more awkward to read, but ultimately it&amp;#8217;s actually not too different.&lt;/p&gt;
&lt;h4&gt;Haskell&lt;/h4&gt;&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='haskell'&gt;&lt;span class='nf'&gt;combinations&lt;/span&gt; &lt;span class='ow'&gt;::&lt;/span&gt; &lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='n'&gt;a&lt;/span&gt;&lt;span class='p'&gt;]&lt;/span&gt; &lt;span class='ow'&gt;-&amp;gt;&lt;/span&gt; &lt;span class='p'&gt;[[&lt;/span&gt;&lt;span class='n'&gt;a&lt;/span&gt;&lt;span class='p'&gt;]]&lt;/span&gt;
&lt;span class='nf'&gt;combinations&lt;/span&gt; &lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='n'&gt;x&lt;/span&gt;&lt;span class='p'&gt;]&lt;/span&gt; &lt;span class='ow'&gt;=&lt;/span&gt; &lt;span class='p'&gt;[[&lt;/span&gt;&lt;span class='n'&gt;x&lt;/span&gt;&lt;span class='p'&gt;]]&lt;/span&gt;
&lt;span class='nf'&gt;combinations&lt;/span&gt; &lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='n'&gt;x&lt;/span&gt;&lt;span class='kt'&gt;:&lt;/span&gt;&lt;span class='n'&gt;xs&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt; &lt;span class='ow'&gt;=&lt;/span&gt; &lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='n'&gt;x&lt;/span&gt;&lt;span class='p'&gt;]&lt;/span&gt; &lt;span class='kt'&gt;:&lt;/span&gt; &lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='n'&gt;map&lt;/span&gt; &lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='n'&gt;x&lt;/span&gt; &lt;span class='kt'&gt;:&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt; &lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='n'&gt;combinations&lt;/span&gt; &lt;span class='n'&gt;xs&lt;/span&gt;&lt;span class='p'&gt;))&lt;/span&gt; &lt;span class='o'&gt;++&lt;/span&gt; &lt;span class='n'&gt;combinations&lt;/span&gt; &lt;span class='n'&gt;xs&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4&gt;Prolog&lt;/h4&gt;&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='prolog'&gt;&lt;span class='nf'&gt;combinations&lt;/span&gt;&lt;span class='p'&gt;([&lt;/span&gt;&lt;span class='nv'&gt;X&lt;/span&gt;&lt;span class='p'&gt;],&lt;/span&gt; &lt;span class='p'&gt;[[&lt;/span&gt;&lt;span class='nv'&gt;X&lt;/span&gt;&lt;span class='p'&gt;]]).&lt;/span&gt;
&lt;span class='nf'&gt;combinations&lt;/span&gt;&lt;span class='p'&gt;([&lt;/span&gt;&lt;span class='nv'&gt;X&lt;/span&gt;&lt;span class='p'&gt;|&lt;/span&gt;&lt;span class='nv'&gt;XS&lt;/span&gt;&lt;span class='p'&gt;],&lt;/span&gt; &lt;span class='nv'&gt;Result&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt; &lt;span class='p'&gt;:-&lt;/span&gt; 
    &lt;span class='nf'&gt;combinations&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nv'&gt;XS&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='nv'&gt;Comb1&lt;/span&gt;&lt;span class='p'&gt;),&lt;/span&gt; 
    &lt;span class='nf'&gt;maplist&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nf'&gt;append&lt;/span&gt;&lt;span class='p'&gt;([&lt;/span&gt;&lt;span class='nv'&gt;X&lt;/span&gt;&lt;span class='p'&gt;]),&lt;/span&gt; &lt;span class='nv'&gt;Comb1&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='nv'&gt;Comb2&lt;/span&gt;&lt;span class='p'&gt;),&lt;/span&gt;
    &lt;span class='nf'&gt;append&lt;/span&gt;&lt;span class='p'&gt;([[&lt;/span&gt;&lt;span class='nv'&gt;X&lt;/span&gt;&lt;span class='p'&gt;]],&lt;/span&gt; &lt;span class='nv'&gt;Comb1&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='nv'&gt;Comb3&lt;/span&gt;&lt;span class='p'&gt;),&lt;/span&gt; 
    &lt;span class='nf'&gt;append&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nv'&gt;Comb2&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='nv'&gt;Comb3&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='nv'&gt;Result&lt;/span&gt;&lt;span class='p'&gt;).&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;I still prefer the Haskell version :)&lt;/p&gt;

&lt;h2 id='full_solutions'&gt;Full solutions&lt;/h2&gt;

&lt;p&gt;Here is a nicely formatted version of my solutions to the exercises from Day 2 of Prolog. The home of the following code is &lt;a href='https://github.com/nickknw/seven-languages-in-seven-weeks/blob/master/week-3-prolog/day2.pl'&gt;on github&lt;/a&gt; with the other exercises.&lt;/p&gt;
&lt;div id='formatted_solutions'&gt;

&lt;h3&gt;Find:&lt;/h3&gt;

&lt;div class='question'&gt;&lt;b&gt;1.&lt;/b&gt; Some implementations of a Fibonacci series and factorials. How do they work?&lt;/div&gt;

&lt;div class='tiny_title'&gt;Fibonacci (from &lt;a href='http://cubbi.com/fibonacci/prolog.html'&gt;http://cubbi.com/fibonacci/prolog.html&lt;/a&gt;)&lt;/div&gt;


&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='prolog'&gt;&lt;span class='nf'&gt;fib&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='m'&gt;0&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt;&lt;span class='m'&gt;0&lt;/span&gt;&lt;span class='p'&gt;).&lt;/span&gt;
&lt;span class='nf'&gt;fib&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='m'&gt;1&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt;&lt;span class='m'&gt;1&lt;/span&gt;&lt;span class='p'&gt;).&lt;/span&gt;
&lt;span class='nf'&gt;fib&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nv'&gt;N&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt;&lt;span class='nv'&gt;F&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt; &lt;span class='p'&gt;:-&lt;/span&gt; &lt;span class='nf'&gt;succ&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nv'&gt;N1&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt;&lt;span class='nv'&gt;N&lt;/span&gt;&lt;span class='p'&gt;),&lt;/span&gt; &lt;span class='nf'&gt;succ&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nv'&gt;N2&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt;&lt;span class='nv'&gt;N1&lt;/span&gt;&lt;span class='p'&gt;),&lt;/span&gt; &lt;span class='nf'&gt;fib&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nv'&gt;N1&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt;&lt;span class='nv'&gt;F1&lt;/span&gt;&lt;span class='p'&gt;),&lt;/span&gt; &lt;span class='nf'&gt;fib&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nv'&gt;N2&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt;&lt;span class='nv'&gt;F2&lt;/span&gt;&lt;span class='p'&gt;),&lt;/span&gt; &lt;span class='nf'&gt;plus&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nv'&gt;F1&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt;&lt;span class='nv'&gt;F2&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt;&lt;span class='nv'&gt;F&lt;/span&gt;&lt;span class='p'&gt;).&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;div class='tiny_title'&gt;Explanation&lt;/div&gt;
&lt;div class='code_explanation'&gt;
First establish the two base cases.
Next, create a rule for the recursive case:
&lt;ol&gt;
&lt;li&gt;Find N-1 and N-2&lt;/li&gt;
&lt;li&gt;Find the N-1th fibonacci number&lt;/li&gt;
&lt;li&gt;Find the N-2th fibonacci number&lt;/li&gt;
&lt;li&gt;Add the N-1th and the N-2th fibonacci number&lt;/li&gt;
&lt;li&gt;The result is the Nth fibonacci number&lt;/li&gt;
&lt;/ol&gt;

Pretty straightforward!
&lt;/div&gt;

&lt;div class='tiny_title'&gt;Factorial (from &lt;a href='http://boklm.eu/prolog/page_6.html'&gt;http://boklm.eu/prolog/page_6.html&lt;/a&gt;)&lt;/div&gt;

&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='prolog'&gt;&lt;span class='nf'&gt;factorial&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='m'&gt;0&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt;&lt;span class='m'&gt;1&lt;/span&gt;&lt;span class='p'&gt;).&lt;/span&gt;
&lt;span class='nf'&gt;factorial&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nv'&gt;X&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt;&lt;span class='nv'&gt;Y&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt; &lt;span class='p'&gt;:-&lt;/span&gt;
  &lt;span class='nv'&gt;X1&lt;/span&gt; &lt;span class='o'&gt;is&lt;/span&gt; &lt;span class='nv'&gt;X&lt;/span&gt; &lt;span class='o'&gt;-&lt;/span&gt; &lt;span class='m'&gt;1&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt;
  &lt;span class='nf'&gt;factorial&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nv'&gt;X1&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt;&lt;span class='nv'&gt;Z&lt;/span&gt;&lt;span class='p'&gt;),&lt;/span&gt;
  &lt;span class='nv'&gt;Y&lt;/span&gt; &lt;span class='o'&gt;is&lt;/span&gt; &lt;span class='nv'&gt;Z&lt;/span&gt; &lt;span class='o'&gt;*&lt;/span&gt; &lt;span class='nv'&gt;X&lt;/span&gt;&lt;span class='p'&gt;,!.&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;div class='tiny_title'&gt;Explanation&lt;/div&gt;
&lt;div class='code_explanation'&gt;

First, establish the base case.
Next, create a rule for the recursive case:
&lt;ol&gt;
&lt;li&gt;Find X - 1&lt;/li&gt;
&lt;li&gt;Find the factorial of X - 1&lt;/li&gt;
&lt;li&gt;Multiply the result by X&lt;/li&gt;
&lt;li&gt;The result is the factorial of X&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;

&lt;div class='question'&gt;&lt;b&gt;2.&lt;/b&gt; A real-world community using Prolog. What problems are they solving with it today?&lt;/div&gt;

&lt;p&gt;
Nice SO question about this: 
&lt;ul&gt;&lt;li&gt;&lt;a href='http://stackoverflow.com/questions/130097/real-world-prolog-usage'&gt;http://stackoverflow.com/questions/130097/real-world-prolog-usage&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;
&lt;/p&gt;

&lt;p&gt;
Some companies that use Prolog:
&lt;ul&gt;
&lt;li&gt;&lt;a href='http://www.meridiansystems.com/products/prolog/construction-project-management.asp'&gt;http://www.meridiansystems.com/products/prolog/construction-project-management.asp&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href='http://www.intologic.com/'&gt;http://www.intologic.com/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href='http://www.sics.se/isl/sicstuswww/site/customers.html'&gt;http://www.sics.se/isl/sicstuswww/site/customers.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;powerset (acquired by microsoft)&lt;/li&gt;
&lt;/ul&gt;
&lt;/p&gt;

&lt;p&gt;
Dr. Dobbs article on this:
&lt;ul&gt;
&lt;li&gt;&lt;a href='http://drdobbs.com/architecture-and-design/184405220'&gt;http://drdobbs.com/architecture-and-design/184405220&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/p&gt;

&lt;div class='question'&gt;&lt;b&gt;3. (optional)&lt;/b&gt; What are some of the problems of dealing with &quot;not&quot; expressions? Why do you have to be careful with negation in Prolog?&lt;/div&gt;

&lt;p&gt;
Negation in Prolog is not &lt;i&gt;logical negation&lt;/i&gt;, it is &lt;i&gt;negation as failure&lt;/i&gt;.  So
&lt;code&gt;not(X)&lt;/code&gt; doesn't mean that X is false (like &lt;code&gt;¬X&lt;/code&gt; would), it means that X can't
be &lt;i&gt;proven true&lt;/i&gt;. Something else you have to be careful with is putting negated
predicates in the right order. Negation as failure is implemented using the
&lt;code&gt;cut&lt;/code&gt; and &lt;code&gt;fail&lt;/code&gt; predicates. The short story is: negating a predicate can
cause subsequent predicates to be ignored.
&lt;/p&gt;

&lt;p&gt;
For a better and more in-depth explanation of &lt;code&gt;cut&lt;/code&gt; and negation as failure, I
strongly recommend the following links:
&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href='http://pwnetics.wordpress.com/2011/04/10/negation-in-prolog/'&gt;Negation In Prolog&lt;/a&gt; — The author uses the wallace and grommit example from this book to show how
assuming logical negation can lead to subtle errors.&lt;/li&gt;

&lt;li&gt;&lt;a href='http://cs.union.edu/~striegnk/learn-prolog-now/html/node90.html#sec.l10.negation.as.failure'&gt;Negation as failure&lt;/a&gt; — A highly readable explanation of how negation as failure really works. Here is
one of the opening paragraphs which really helped make it click for me:&lt;/li&gt;
&lt;/ul&gt;

&lt;div class='indent'&gt;
    &lt;blockquote&gt;
        As a first step, let's introduce another built in predicate fail/0. As its name
        suggests, fail is a special symbol that will immediately fail when Prolog
        encounters it as a goal. That may not sound too useful, but remember: when
        Prolog fails, it tries to backtrack. Thus fail can be viewed as an instruction
        to force backtracking. And when used in combination with cut, which blocks
        backtracking, fail enables us to write some interesting programs, and in
        particular, it lets us define exceptions to general rules.   
    &lt;/blockquote&gt;
&lt;/div&gt;

&lt;p&gt;
If you find you need more background information first, try the page where they
&lt;a href='http://cs.union.edu/~striegnk/learn-prolog-now/html/node88.html#sec.l10.cut'&gt;introduce cut:&lt;/a&gt;
&lt;/p&gt;

&lt;h3&gt;Do:&lt;/h3&gt;

&lt;div class='question'&gt;&lt;b&gt;1.&lt;/b&gt; Reverse the elements of a list&lt;/div&gt;


&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='prolog'&gt;&lt;span class='nf'&gt;reverse&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nv'&gt;A&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt;&lt;span class='nv'&gt;R&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt; &lt;span class='p'&gt;:-&lt;/span&gt; &lt;span class='nf'&gt;reverse&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nv'&gt;A&lt;/span&gt;&lt;span class='p'&gt;,[],&lt;/span&gt;&lt;span class='nv'&gt;R&lt;/span&gt;&lt;span class='p'&gt;).&lt;/span&gt;
&lt;span class='nf'&gt;reverse&lt;/span&gt;&lt;span class='p'&gt;([&lt;/span&gt;&lt;span class='nv'&gt;X&lt;/span&gt;&lt;span class='p'&gt;|&lt;/span&gt;&lt;span class='nv'&gt;Y&lt;/span&gt;&lt;span class='p'&gt;],&lt;/span&gt;&lt;span class='nv'&gt;Z&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt;&lt;span class='nv'&gt;W&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt; &lt;span class='p'&gt;:-&lt;/span&gt; &lt;span class='nf'&gt;reverse&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nv'&gt;Y&lt;/span&gt;&lt;span class='p'&gt;,[&lt;/span&gt;&lt;span class='nv'&gt;X&lt;/span&gt;&lt;span class='p'&gt;|&lt;/span&gt;&lt;span class='nv'&gt;Z&lt;/span&gt;&lt;span class='p'&gt;],&lt;/span&gt;&lt;span class='nv'&gt;W&lt;/span&gt;&lt;span class='p'&gt;).&lt;/span&gt;
&lt;span class='nf'&gt;reverse&lt;/span&gt;&lt;span class='p'&gt;([],&lt;/span&gt;&lt;span class='nv'&gt;X&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt;&lt;span class='nv'&gt;X&lt;/span&gt;&lt;span class='p'&gt;).&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;div class='tiny_title'&gt;Notes&lt;/div&gt;

&lt;div class='code_explanation'&gt;
I ended up using an example from a tutorial - even then it still took a bit to make sense to me. The middle accumulation parameter specifically. I'm going to try the problem that the tutorial gives immediately after:

&lt;blockquote&gt;
&lt;p&gt;Write a two-parameter version of 'reverse' that does not use the accumulating parameter idea. Use 'append' instead, for example, where one rule would be paraphrased like this ...&lt;/p&gt;
  
&lt;code&gt;reverse list [X|R] by reversing R to get T, then append T to [X]&lt;/code&gt;

&lt;p&gt;What about the efficiency of this version? Compare it to the given 'reverse' above.&lt;/p&gt;
&lt;/blockquote&gt;

This is the way I was attempting to do it first as well. It is (probably) less efficient than the first version, because when I append an element to the end of the list it likely has to walk the list each time. Don't know for sure without measuring though.
&lt;/div&gt;


&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='prolog'&gt;&lt;span class='nf'&gt;reverseA&lt;/span&gt;&lt;span class='p'&gt;([&lt;/span&gt;&lt;span class='nv'&gt;X&lt;/span&gt;&lt;span class='p'&gt;|&lt;/span&gt;&lt;span class='nv'&gt;R&lt;/span&gt;&lt;span class='p'&gt;],&lt;/span&gt; &lt;span class='nv'&gt;Result&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt; &lt;span class='p'&gt;:-&lt;/span&gt; &lt;span class='nf'&gt;reverse&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nv'&gt;R&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='nv'&gt;T&lt;/span&gt;&lt;span class='p'&gt;),&lt;/span&gt; &lt;span class='nf'&gt;append&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nv'&gt;T&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='nv'&gt;X&lt;/span&gt;&lt;span class='p'&gt;],&lt;/span&gt; &lt;span class='nv'&gt;Result&lt;/span&gt;&lt;span class='p'&gt;).&lt;/span&gt;
&lt;span class='nf'&gt;reverseA&lt;/span&gt;&lt;span class='p'&gt;([&lt;/span&gt;&lt;span class='nv'&gt;X&lt;/span&gt;&lt;span class='p'&gt;],&lt;/span&gt; &lt;span class='nv'&gt;X&lt;/span&gt;&lt;span class='p'&gt;).&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;div class='question'&gt;&lt;b&gt;2.&lt;/b&gt; Find the smallest element of a list&lt;/div&gt;


&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='prolog'&gt;&lt;span class='nf'&gt;min&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nv'&gt;A&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt;&lt;span class='nv'&gt;A&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt;&lt;span class='nv'&gt;A&lt;/span&gt;&lt;span class='p'&gt;).&lt;/span&gt;
&lt;span class='nf'&gt;min&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nv'&gt;A&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt;&lt;span class='nv'&gt;B&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt;&lt;span class='nv'&gt;B&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt; &lt;span class='p'&gt;:-&lt;/span&gt; &lt;span class='nv'&gt;B&lt;/span&gt; &lt;span class='o'&gt;&amp;lt;&lt;/span&gt; &lt;span class='nv'&gt;A&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;
&lt;span class='nf'&gt;min&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nv'&gt;A&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt;&lt;span class='nv'&gt;B&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt;&lt;span class='nv'&gt;A&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt; &lt;span class='p'&gt;:-&lt;/span&gt; &lt;span class='nv'&gt;A&lt;/span&gt; &lt;span class='o'&gt;&amp;lt;&lt;/span&gt; &lt;span class='nv'&gt;B&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;

&lt;span class='nf'&gt;minInList&lt;/span&gt;&lt;span class='p'&gt;([&lt;/span&gt;&lt;span class='nv'&gt;X&lt;/span&gt;&lt;span class='p'&gt;|&lt;/span&gt;&lt;span class='nv'&gt;XS&lt;/span&gt;&lt;span class='p'&gt;],&lt;/span&gt; &lt;span class='nv'&gt;M&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt; &lt;span class='p'&gt;:-&lt;/span&gt; &lt;span class='nf'&gt;minInList&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nv'&gt;XS&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='nv'&gt;M1&lt;/span&gt;&lt;span class='p'&gt;),&lt;/span&gt; &lt;span class='nf'&gt;min&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nv'&gt;X&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='nv'&gt;M1&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='nv'&gt;M&lt;/span&gt;&lt;span class='p'&gt;).&lt;/span&gt;
&lt;span class='nf'&gt;minInList&lt;/span&gt;&lt;span class='p'&gt;([&lt;/span&gt;&lt;span class='nv'&gt;X&lt;/span&gt;&lt;span class='p'&gt;],&lt;/span&gt; &lt;span class='nv'&gt;X&lt;/span&gt;&lt;span class='p'&gt;).&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;div class='question'&gt;&lt;b&gt;3.&lt;/b&gt; Sort the elements of a list.&lt;/div&gt;


&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='prolog'&gt;&lt;span class='c1'&gt;% I&amp;#39;m just going to go for a very simple sort.&lt;/span&gt;

&lt;span class='nf'&gt;takeout&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nv'&gt;X&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='nv'&gt;X&lt;/span&gt;&lt;span class='p'&gt;|&lt;/span&gt;&lt;span class='nv'&gt;R&lt;/span&gt;&lt;span class='p'&gt;],&lt;/span&gt; &lt;span class='nv'&gt;R&lt;/span&gt;&lt;span class='p'&gt;).&lt;/span&gt;
&lt;span class='nf'&gt;takeout&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nv'&gt;X&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='nv'&gt;F&lt;/span&gt;&lt;span class='p'&gt;|&lt;/span&gt;&lt;span class='nv'&gt;R&lt;/span&gt;&lt;span class='p'&gt;],&lt;/span&gt; &lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='nv'&gt;F&lt;/span&gt;&lt;span class='p'&gt;|&lt;/span&gt;&lt;span class='nv'&gt;S&lt;/span&gt;&lt;span class='p'&gt;])&lt;/span&gt; &lt;span class='p'&gt;:-&lt;/span&gt; &lt;span class='nf'&gt;takeout&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nv'&gt;X&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt;&lt;span class='nv'&gt;R&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt;&lt;span class='nv'&gt;S&lt;/span&gt;&lt;span class='p'&gt;).&lt;/span&gt;

&lt;span class='nf'&gt;mySort&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nv'&gt;List&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='nv'&gt;Min&lt;/span&gt;&lt;span class='p'&gt;|&lt;/span&gt;&lt;span class='nv'&gt;Sorted&lt;/span&gt;&lt;span class='p'&gt;])&lt;/span&gt; &lt;span class='p'&gt;:-&lt;/span&gt; 
    &lt;span class='nf'&gt;minInList&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nv'&gt;List&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='nv'&gt;Min&lt;/span&gt;&lt;span class='p'&gt;),&lt;/span&gt; 
    &lt;span class='nf'&gt;takeout&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nv'&gt;Min&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='nv'&gt;List&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='nv'&gt;Rest&lt;/span&gt;&lt;span class='p'&gt;),&lt;/span&gt; 
    &lt;span class='nf'&gt;mySort&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nv'&gt;Rest&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='nv'&gt;Sorted&lt;/span&gt;&lt;span class='p'&gt;).&lt;/span&gt;
&lt;span class='nf'&gt;mySort&lt;/span&gt;&lt;span class='p'&gt;([&lt;/span&gt;&lt;span class='nv'&gt;X&lt;/span&gt;&lt;span class='p'&gt;],&lt;/span&gt; &lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='nv'&gt;X&lt;/span&gt;&lt;span class='p'&gt;]).&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;/div&gt;
&lt;p&gt;Next in this series: &lt;a href='/blog/2012/08/06/seven-languages-week-3-day-3/'&gt;Day 3 of Prolog&lt;/a&gt;&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>Seven Languages: Week 3 (Prolog) - Day 1</title>
   <link href="http://nickknowlson.com/blog/2012/02/05/seven-languages-week-3-day-1/"/>
   <updated>2012-02-05T00:00:00-08:00</updated>
   <id>http://nickknowlson.com/blog/2012/02/05/seven-languages-week-3-day-1</id>
   <content type="html">&lt;p&gt;Although I am not yet halfway through the book, I am pretty sure that Prolog will win the &amp;#8216;most foreign language&amp;#8217; category with ease. Going in, I knew Prolog was fairly old (born in 1972) and that it was a logic-based language, but I could not have estimated how, for lack of a better word, &lt;em&gt;picky&lt;/em&gt; it would be.&lt;/p&gt;

&lt;p&gt;My troubles started at installation - Bruce Tate uses GNU Prolog in the book, and I spent far too long trying to get that working only to discover that some library functions essential to the exercises (&lt;code&gt;fd_domain&lt;/code&gt;, &lt;code&gt;fd_all_different&lt;/code&gt;) just caused GNU Prolog to crash on my machine. I will elaborate on this more in Day 3, but for anyone encountering this post who is in a similar situation, just go use SWI Prolog instead.&lt;/p&gt;

&lt;p&gt;Prolog heavily relies on recursion but making a recursive rule is not the same as making a recursive function in functional languages. It is subtly different, and way easier to get wrong; you have to have an &lt;strong&gt;extremely&lt;/strong&gt; clear mental model of how Prolog operates (which I still don&amp;#8217;t). I will expand more on this in a future post.&lt;/p&gt;

&lt;p&gt;Despite all this, during the course of Week 3 I have been convinced that logic programming can be extremely powerful. If you know how to define a problem in terms that Prolog understands, then you can write a program that solves a problem without having the slightest idea of how to actually solve it (a good example is Sudoku, which shows up in Day 3). Logic languages are the closest I have seen to the unattainable ideal of &amp;#8216;writing a program that will look at the problem and write a program to solve it for you&amp;#8217;.&lt;/p&gt;
&lt;div class='interjection'&gt;&lt;p&gt;
(This article is part of a series of posts I am doing about my journey through the exercises of the book &lt;a href='http://pragprog.com/book/btlang/seven-languages-in-seven-weeks'&gt;Seven Languages In Seven Weeks&lt;/a&gt;. The article previous to this one is &lt;a href='/blog/2012/01/16/seven-languages-week-2-day-3/'&gt;Week 2 (Io) - Day 3&lt;/a&gt;. For an overview see the &lt;a href='/projects/seven-languages-in-seven-weeks/'&gt;Seven Languages project page&lt;/a&gt;.)
&lt;/p&gt;&lt;/div&gt;
&lt;h2 id='topics_covered'&gt;Topics covered&lt;/h2&gt;

&lt;p&gt;Day 1 covered the basic structural elements of Prolog. There are three kinds of statements in a Prolog program: &lt;strong&gt;facts&lt;/strong&gt;, &lt;strong&gt;rules&lt;/strong&gt;, and &lt;strong&gt;queries&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;A fact is a simple statement that essentially adds a nugget of information to a database. Here are some facts:&lt;/p&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='prolog'&gt;&lt;span class='s-Atom'&gt;daytime&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;
&lt;span class='s-Atom'&gt;clear_skies&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;

&lt;span class='nf'&gt;round&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='s-Atom'&gt;earth&lt;/span&gt;&lt;span class='p'&gt;).&lt;/span&gt;
&lt;span class='nf'&gt;round&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='s-Atom'&gt;ball&lt;/span&gt;&lt;span class='p'&gt;).&lt;/span&gt;

&lt;span class='nf'&gt;small&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='s-Atom'&gt;mouse&lt;/span&gt;&lt;span class='p'&gt;).&lt;/span&gt;
&lt;span class='nf'&gt;small&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='s-Atom'&gt;ball&lt;/span&gt;&lt;span class='p'&gt;).&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;A rule is a statement that relates facts and rules together. You can almost (but not quite) think of them as functions. Here are some rules:&lt;/p&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='prolog'&gt;&lt;span class='nf'&gt;time_to_play&lt;/span&gt; &lt;span class='o'&gt;:-&lt;/span&gt; &lt;span class='s-Atom'&gt;daytime&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='s-Atom'&gt;clear_skies&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;

&lt;span class='nf'&gt;suitable_for_playing_with&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nv'&gt;X&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt; &lt;span class='p'&gt;:-&lt;/span&gt; &lt;span class='nf'&gt;round&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nv'&gt;X&lt;/span&gt;&lt;span class='p'&gt;),&lt;/span&gt; &lt;span class='nf'&gt;small&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nv'&gt;X&lt;/span&gt;&lt;span class='p'&gt;).&lt;/span&gt;

&lt;span class='nf'&gt;does_nick_want_to_play_with&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nv'&gt;X&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt; &lt;span class='p'&gt;:-&lt;/span&gt; &lt;span class='s-Atom'&gt;time_to_play&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='nf'&gt;suitable_for_playing_with&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nv'&gt;X&lt;/span&gt;&lt;span class='p'&gt;).&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;If you collect all of the preceding statements and put them in a &lt;code&gt;hello.pl&lt;/code&gt; file then you have a valid Prolog program. To actually get some useful output from it, we can load this program into the prolog interpreter, and query this database we&amp;#8217;ve built up like so:&lt;/p&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='prolog'&gt;&lt;span class='s-Atom'&gt;?-&lt;/span&gt; &lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='s-Atom'&gt;&amp;#39;hello.pl&amp;#39;&lt;/span&gt;&lt;span class='p'&gt;].&lt;/span&gt;
&lt;span class='c1'&gt;% hello.pl compiled 0.00 sec, 3,352 bytes&lt;/span&gt;
&lt;span class='s-Atom'&gt;true&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;

&lt;span class='c1'&gt;% Let&amp;#39;s test out the facts:&lt;/span&gt;

&lt;span class='s-Atom'&gt;?-&lt;/span&gt; &lt;span class='s-Atom'&gt;daytime&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;
&lt;span class='s-Atom'&gt;true&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;

&lt;span class='s-Atom'&gt;?-&lt;/span&gt; &lt;span class='nf'&gt;round&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='s-Atom'&gt;earth&lt;/span&gt;&lt;span class='p'&gt;).&lt;/span&gt;
&lt;span class='s-Atom'&gt;true&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;

&lt;span class='s-Atom'&gt;?-&lt;/span&gt; &lt;span class='nf'&gt;round&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='s-Atom'&gt;cube&lt;/span&gt;&lt;span class='p'&gt;).&lt;/span&gt;
&lt;span class='s-Atom'&gt;false&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;

&lt;span class='s-Atom'&gt;?-&lt;/span&gt; &lt;span class='nf'&gt;round&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nv'&gt;What&lt;/span&gt;&lt;span class='p'&gt;).&lt;/span&gt; &lt;span class='c1'&gt;% Notice the capital letter here. Uppercase = variable, lowercase = atom.&lt;/span&gt;
&lt;span class='nv'&gt;What&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='s-Atom'&gt;earth&lt;/span&gt; &lt;span class='p'&gt;;&lt;/span&gt;
&lt;span class='nv'&gt;What&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='s-Atom'&gt;ball&lt;/span&gt; &lt;span class='p'&gt;;&lt;/span&gt;

&lt;span class='c1'&gt;% And now for the rules:&lt;/span&gt;

 &lt;span class='s-Atom'&gt;?-&lt;/span&gt; &lt;span class='s-Atom'&gt;time_to_play&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;
&lt;span class='s-Atom'&gt;true&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;

&lt;span class='s-Atom'&gt;?-&lt;/span&gt; &lt;span class='nf'&gt;suitable_for_playing_with&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='s-Atom'&gt;earth&lt;/span&gt;&lt;span class='p'&gt;).&lt;/span&gt;
&lt;span class='s-Atom'&gt;false&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;

&lt;span class='s-Atom'&gt;?-&lt;/span&gt; &lt;span class='nf'&gt;suitable_for_playing_with&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='s-Atom'&gt;ball&lt;/span&gt;&lt;span class='p'&gt;).&lt;/span&gt;
&lt;span class='s-Atom'&gt;true&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;

&lt;span class='s-Atom'&gt;?-&lt;/span&gt; &lt;span class='nf'&gt;does_nick_want_to_play_with&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='s-Atom'&gt;earth&lt;/span&gt;&lt;span class='p'&gt;).&lt;/span&gt;
&lt;span class='s-Atom'&gt;false&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;

&lt;span class='s-Atom'&gt;?-&lt;/span&gt; &lt;span class='nf'&gt;does_nick_want_to_play_with&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='s-Atom'&gt;ball&lt;/span&gt;&lt;span class='p'&gt;).&lt;/span&gt;
&lt;span class='s-Atom'&gt;true&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;

&lt;span class='s-Atom'&gt;?-&lt;/span&gt; &lt;span class='nf'&gt;does_nick_want_to_play_with&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nv'&gt;What&lt;/span&gt;&lt;span class='p'&gt;).&lt;/span&gt;
&lt;span class='nv'&gt;What&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='s-Atom'&gt;ball&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id='highlights_from_exercises'&gt;Highlights from exercises&lt;/h2&gt;

&lt;p&gt;The exercises in Day 1 aren&amp;#8217;t terribly interesting, so instead I&amp;#8217;ll show you an example from an earlier part of the book that threw me into confusion for a while. The goal of the following snippet of Prolog is to assign map colours such that no state borders on another state with the same colour.&lt;/p&gt;

&lt;p&gt;When I read this I flipped through the next few pages looking for the rest of the program. But there isn&amp;#8217;t any more - this is it!&lt;/p&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='prolog'&gt;&lt;span class='nf'&gt;different&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='s-Atom'&gt;red&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='s-Atom'&gt;green&lt;/span&gt;&lt;span class='p'&gt;).&lt;/span&gt; &lt;span class='nf'&gt;different&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='s-Atom'&gt;red&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='s-Atom'&gt;blue&lt;/span&gt;&lt;span class='p'&gt;).&lt;/span&gt;
&lt;span class='nf'&gt;different&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='s-Atom'&gt;green&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='s-Atom'&gt;red&lt;/span&gt;&lt;span class='p'&gt;).&lt;/span&gt; &lt;span class='nf'&gt;different&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='s-Atom'&gt;green&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='s-Atom'&gt;blue&lt;/span&gt;&lt;span class='p'&gt;).&lt;/span&gt;
&lt;span class='nf'&gt;different&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='s-Atom'&gt;blue&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='s-Atom'&gt;red&lt;/span&gt;&lt;span class='p'&gt;).&lt;/span&gt; &lt;span class='nf'&gt;different&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='s-Atom'&gt;blue&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='s-Atom'&gt;green&lt;/span&gt;&lt;span class='p'&gt;).&lt;/span&gt;

&lt;span class='nf'&gt;coloring&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nv'&gt;Alabama&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='nv'&gt;Mississippi&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='nv'&gt;Georgia&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='nv'&gt;Tennessee&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='nv'&gt;Florida&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt; &lt;span class='p'&gt;:-&lt;/span&gt;
    &lt;span class='nf'&gt;different&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nv'&gt;Mississippi&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='nv'&gt;Tennessee&lt;/span&gt;&lt;span class='p'&gt;),&lt;/span&gt;
    &lt;span class='nf'&gt;different&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nv'&gt;Mississippi&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='nv'&gt;Alabama&lt;/span&gt;&lt;span class='p'&gt;),&lt;/span&gt;
    &lt;span class='nf'&gt;different&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nv'&gt;Alabama&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='nv'&gt;Tennessee&lt;/span&gt;&lt;span class='p'&gt;),&lt;/span&gt;
    &lt;span class='nf'&gt;different&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nv'&gt;Alabama&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='nv'&gt;Mississippi&lt;/span&gt;&lt;span class='p'&gt;),&lt;/span&gt;
    &lt;span class='nf'&gt;different&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nv'&gt;Alabama&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='nv'&gt;Georgia&lt;/span&gt;&lt;span class='p'&gt;),&lt;/span&gt;
    &lt;span class='nf'&gt;different&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nv'&gt;Alabama&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='nv'&gt;Florida&lt;/span&gt;&lt;span class='p'&gt;),&lt;/span&gt;
    &lt;span class='nf'&gt;different&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nv'&gt;Georgia&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='nv'&gt;Florida&lt;/span&gt;&lt;span class='p'&gt;),&lt;/span&gt;
    &lt;span class='nf'&gt;different&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nv'&gt;Georgia&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='nv'&gt;Tennessee&lt;/span&gt;&lt;span class='p'&gt;).&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This program aims to colour these &lt;strong&gt;five&lt;/strong&gt; states with &lt;strong&gt;three&lt;/strong&gt; colours (such that no states of the same colour share borders). When we query this we get:&lt;/p&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='prolog'&gt;&lt;span class='s-Atom'&gt;?-&lt;/span&gt; &lt;span class='nf'&gt;coloring&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nv'&gt;Alabama&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='nv'&gt;Mississippi&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='nv'&gt;Georgia&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='nv'&gt;Tennessee&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='nv'&gt;Florida&lt;/span&gt;&lt;span class='p'&gt;).&lt;/span&gt;
&lt;span class='nv'&gt;Alabama&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='s-Atom'&gt;blue&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt;
&lt;span class='nv'&gt;Mississippi&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='nv'&gt;Georgia&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='nv'&gt;Georgia&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='s-Atom'&gt;red&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt;
&lt;span class='nv'&gt;Tennessee&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='nv'&gt;Florida&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='nv'&gt;Florida&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='s-Atom'&gt;green&lt;/span&gt; &lt;span class='p'&gt;.&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;img alt='Coloured map of states showing Mississippi and Georgia = red, Tennessee and Florida = green, and Alabama = blue.' src='/img/projects/seven-languages/state-colouring.png' /&gt;&lt;/p&gt;

&lt;p&gt;The program appears to be just the problem definition restated, and yet somehow Prolog can produce a correct answer!&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;DISCLAIMER:&lt;/strong&gt; I am not a Prolog expert and as such the following explanation will be a bit hand wavy. Please let me know if you spot any glaring inaccuracies.&lt;/p&gt;

&lt;p&gt;Prolog is trying to unify both sides of our rule and answer the question &amp;#8220;What values can I set these five variables to in order to make all of the following series of statements true&amp;#8221;. It knows there are six facts about &amp;#8220;different-ness&amp;#8221; and keeps on trying different combinations of these facts.&lt;/p&gt;

&lt;p&gt;Take as an example the first statement of the &lt;strong&gt;rule&lt;/strong&gt; &lt;code&gt;different(Mississippi,
Tennessee)&lt;/code&gt;. It might first try the &lt;strong&gt;fact&lt;/strong&gt; &lt;code&gt;different(red, green)&lt;/code&gt;, then continue on with the assumption that now &lt;code&gt;Mississippi = red&lt;/code&gt; and &lt;code&gt;Tennessee =
green&lt;/code&gt;, and see if it can still make the other statements true.&lt;/p&gt;

&lt;p&gt;Hopefully that more or less makes sense. But in case it doesn&amp;#8217;t, &lt;strong&gt;let&amp;#8217;s take a different tack now&lt;/strong&gt;. Pretend our rule is a mathematical equation: Prolog is trying to solve for five variables, given only a little bit of knowledge about numbers. As far as it is concerned, you may as well have given it this:&lt;/p&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='prolog'&gt;&lt;span class='nf'&gt;different&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='m'&gt;1&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='m'&gt;2&lt;/span&gt;&lt;span class='p'&gt;).&lt;/span&gt; &lt;span class='nf'&gt;different&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='m'&gt;1&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='m'&gt;3&lt;/span&gt;&lt;span class='p'&gt;).&lt;/span&gt;
&lt;span class='nf'&gt;different&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='m'&gt;2&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='m'&gt;1&lt;/span&gt;&lt;span class='p'&gt;).&lt;/span&gt; &lt;span class='nf'&gt;different&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='m'&gt;2&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='m'&gt;3&lt;/span&gt;&lt;span class='p'&gt;).&lt;/span&gt;
&lt;span class='nf'&gt;different&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='m'&gt;3&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='m'&gt;1&lt;/span&gt;&lt;span class='p'&gt;).&lt;/span&gt; &lt;span class='nf'&gt;different&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='m'&gt;3&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='m'&gt;2&lt;/span&gt;&lt;span class='p'&gt;).&lt;/span&gt;

&lt;span class='nf'&gt;solve_for&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nv'&gt;A&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='nv'&gt;B&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='nv'&gt;C&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='nv'&gt;D&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='nv'&gt;E&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt; &lt;span class='p'&gt;:-&lt;/span&gt;
    &lt;span class='nf'&gt;different&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nv'&gt;B&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='nv'&gt;D&lt;/span&gt;&lt;span class='p'&gt;),&lt;/span&gt;
    &lt;span class='nf'&gt;different&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nv'&gt;B&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='nv'&gt;A&lt;/span&gt;&lt;span class='p'&gt;),&lt;/span&gt;
    &lt;span class='nf'&gt;different&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nv'&gt;A&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='nv'&gt;D&lt;/span&gt;&lt;span class='p'&gt;),&lt;/span&gt;
    &lt;span class='nf'&gt;different&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nv'&gt;A&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='nv'&gt;B&lt;/span&gt;&lt;span class='p'&gt;),&lt;/span&gt;
    &lt;span class='nf'&gt;different&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nv'&gt;A&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='nv'&gt;C&lt;/span&gt;&lt;span class='p'&gt;),&lt;/span&gt;
    &lt;span class='nf'&gt;different&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nv'&gt;A&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='nv'&gt;E&lt;/span&gt;&lt;span class='p'&gt;),&lt;/span&gt;
    &lt;span class='nf'&gt;different&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nv'&gt;C&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='nv'&gt;E&lt;/span&gt;&lt;span class='p'&gt;),&lt;/span&gt;
    &lt;span class='nf'&gt;different&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nv'&gt;C&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='nv'&gt;D&lt;/span&gt;&lt;span class='p'&gt;).&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;In which case you would receive an answer like:&lt;/p&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='prolog'&gt;&lt;span class='s-Atom'&gt;?-&lt;/span&gt; &lt;span class='nf'&gt;solve_for&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nv'&gt;A&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='nv'&gt;B&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='nv'&gt;C&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='nv'&gt;D&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='nv'&gt;E&lt;/span&gt;&lt;span class='p'&gt;).&lt;/span&gt;
&lt;span class='nv'&gt;A&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='m'&gt;3&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt;
&lt;span class='nv'&gt;B&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='nv'&gt;C&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='nv'&gt;C&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='m'&gt;1&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt;
&lt;span class='nv'&gt;D&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='nv'&gt;E&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='nv'&gt;E&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='m'&gt;2&lt;/span&gt; &lt;span class='p'&gt;.&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Easy peasy, right?&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;UPDATE:&lt;/strong&gt; Thanks for the great comments, both below on my &lt;a href='#disqus_thread'&gt;blog comments&lt;/a&gt; and also &lt;a href='http://www.reddit.com/r/programming/comments/pd9z1/seven_languages_day_1_of_prolog/'&gt;on reddit&lt;/a&gt;. There are a few in particular that helped me learn more that I would like to highlight and save for posterity.&lt;/p&gt;

&lt;p&gt;&lt;a href='http://www.storytotell.org/'&gt;Daniel Lyons&lt;/a&gt; and &lt;a href='http://users.ecs.soton.ac.uk/mal/'&gt;Michael Leuschel&lt;/a&gt; pointed out some variations on solving this map colouring problem.&lt;/p&gt;

&lt;p&gt;Daniel showed how to &lt;a href='#dsq-comment-430894811'&gt;minimize redundancy&lt;/a&gt; when declaring red, green and blue as colours that are &lt;code&gt;different&lt;/code&gt; from each other:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The map example is wonderful! I would probably make the map coloring a little more abstract like so:&lt;/p&gt;

&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='prolog'&gt;&lt;span class='nf'&gt;color&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='s-Atom'&gt;red&lt;/span&gt;&lt;span class='p'&gt;).&lt;/span&gt; &lt;span class='nf'&gt;color&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='s-Atom'&gt;green&lt;/span&gt;&lt;span class='p'&gt;).&lt;/span&gt; &lt;span class='nf'&gt;color&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='s-Atom'&gt;blue&lt;/span&gt;&lt;span class='p'&gt;).&lt;/span&gt;
&lt;span class='nf'&gt;different&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nv'&gt;X&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='nv'&gt;Y&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt; &lt;span class='p'&gt;:-&lt;/span&gt; &lt;span class='nf'&gt;color&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nv'&gt;X&lt;/span&gt;&lt;span class='p'&gt;),&lt;/span&gt; &lt;span class='nf'&gt;color&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nv'&gt;Y&lt;/span&gt;&lt;span class='p'&gt;),&lt;/span&gt; &lt;span class='nv'&gt;X&lt;/span&gt; &lt;span class='s-Atom'&gt;\=&lt;/span&gt; &lt;span class='nv'&gt;Y&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;/blockquote&gt;
&lt;p&gt;Michael Leuschel showed how &lt;a href='#dsq-comment-431117487'&gt;this solution could take advantage&lt;/a&gt; of &lt;a href='http://www.swi-prolog.org/man/clpfd.html'&gt;CLP(FD)&lt;/a&gt; (a module that can &lt;strong&gt;drastically&lt;/strong&gt; improve performance when dealing with larger data sets) and was also kind enough to &lt;a href='#dsq-comment-432664414'&gt;explain labeling to me&lt;/a&gt;:&lt;/p&gt;
&lt;blockquote&gt;

&lt;p&gt;Another solution would be to use the different operator &lt;code&gt;#\=&lt;/code&gt; from clp(fd):&lt;/p&gt;


&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='prolog'&gt;&lt;span class='p'&gt;:-&lt;/span&gt; &lt;span class='nf'&gt;use_module&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nf'&gt;library&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='s-Atom'&gt;clpfd&lt;/span&gt;&lt;span class='p'&gt;)).&lt;/span&gt;
&lt;span class='nf'&gt;different&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nv'&gt;X&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt;&lt;span class='nv'&gt;Y&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt; &lt;span class='p'&gt;:-&lt;/span&gt; &lt;span class='nv'&gt;X&lt;/span&gt; &lt;span class='s-Atom'&gt;in&lt;/span&gt; &lt;span class='m'&gt;1&lt;/span&gt;&lt;span class='p'&gt;..&lt;/span&gt;&lt;span class='m'&gt;3&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='nv'&gt;Y&lt;/span&gt; &lt;span class='s-Atom'&gt;in&lt;/span&gt; &lt;span class='m'&gt;1&lt;/span&gt;&lt;span class='p'&gt;..&lt;/span&gt;&lt;span class='m'&gt;3&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='nv'&gt;X&lt;/span&gt; &lt;span class='s-Atom'&gt;#\=&lt;/span&gt;&lt;span class='nv'&gt;Y&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;You would then need to add a call to &lt;code&gt;labeling&lt;/code&gt; after setting up the constraints:&lt;/p&gt;


&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='prolog'&gt;&lt;span class='nf'&gt;solve_for&lt;/span&gt;&lt;span class='p'&gt;([&lt;/span&gt;&lt;span class='nv'&gt;A&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='nv'&gt;B&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='nv'&gt;C&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='nv'&gt;D&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='nv'&gt;E&lt;/span&gt;&lt;span class='p'&gt;])&lt;/span&gt; &lt;span class='p'&gt;:-&lt;/span&gt;
&lt;span class='nf'&gt;different&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nv'&gt;B&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='nv'&gt;D&lt;/span&gt;&lt;span class='p'&gt;),&lt;/span&gt; &lt;span class='nf'&gt;different&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nv'&gt;B&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='nv'&gt;A&lt;/span&gt;&lt;span class='p'&gt;),&lt;/span&gt; &lt;span class='nf'&gt;different&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nv'&gt;A&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='nv'&gt;D&lt;/span&gt;&lt;span class='p'&gt;),&lt;/span&gt; &lt;span class='nf'&gt;different&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nv'&gt;A&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='nv'&gt;B&lt;/span&gt;&lt;span class='p'&gt;),&lt;/span&gt;
&lt;span class='nf'&gt;different&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nv'&gt;A&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='nv'&gt;C&lt;/span&gt;&lt;span class='p'&gt;),&lt;/span&gt; &lt;span class='nf'&gt;different&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nv'&gt;A&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='nv'&gt;E&lt;/span&gt;&lt;span class='p'&gt;),&lt;/span&gt;
&lt;span class='nf'&gt;different&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nv'&gt;C&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='nv'&gt;E&lt;/span&gt;&lt;span class='p'&gt;),&lt;/span&gt; &lt;span class='nf'&gt;different&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nv'&gt;C&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='nv'&gt;D&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt; &lt;span class='p'&gt;,&lt;/span&gt;&lt;span class='nf'&gt;labeling&lt;/span&gt;&lt;span class='p'&gt;([],[&lt;/span&gt;&lt;span class='nv'&gt;A&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='nv'&gt;B&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='nv'&gt;C&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='nv'&gt;D&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='nv'&gt;E&lt;/span&gt;&lt;span class='p'&gt;]).&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This should be more efficient than the original, as you first set up the constraints and only *then* start enumerating candidate solutions.
(Of course this performance difference does not matter for such a small graph; it can make a huge difference for larger graphs.)&lt;/p&gt;

&lt;p&gt;&lt;a href='#dsq-comment-431117487'&gt;...continued in comments&lt;/a&gt;&lt;/p&gt;

&lt;/blockquote&gt;
&lt;p&gt;&lt;a href='http://egonelbre.com/'&gt;Egon Elbre&lt;/a&gt; and &lt;a href='http://www.reddit.com/user/gecko'&gt;gecko&lt;/a&gt; both helped explain different things about Prolog to me.&lt;/p&gt;

&lt;p&gt;Egon &lt;a href='https://gist.github.com/1755115'&gt;used relational databases as a metaphor&lt;/a&gt; to explain the map colouring example.&lt;/p&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='prolog'&gt;&lt;span class='nf'&gt;round&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='s-Atom'&gt;earth&lt;/span&gt;&lt;span class='p'&gt;).&lt;/span&gt;
&lt;span class='nf'&gt;round&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='s-Atom'&gt;ball&lt;/span&gt;&lt;span class='p'&gt;).&lt;/span&gt;

&lt;span class='nf'&gt;small&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='s-Atom'&gt;mouse&lt;/span&gt;&lt;span class='p'&gt;).&lt;/span&gt;
&lt;span class='nf'&gt;small&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='s-Atom'&gt;ball&lt;/span&gt;&lt;span class='p'&gt;).&lt;/span&gt;

&lt;span class='c1'&gt;% I want to have tables `round` and `small`&lt;/span&gt;
&lt;span class='c1'&gt;% `round` should contain `earth` and `ball`&lt;/span&gt;
&lt;span class='c1'&gt;% `small` should contain `mouse` and `ball`&lt;/span&gt;

&lt;span class='nf'&gt;time_to_play&lt;/span&gt; &lt;span class='o'&gt;:-&lt;/span&gt; &lt;span class='s-Atom'&gt;daytime&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='s-Atom'&gt;clear_skies&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;

&lt;span class='c1'&gt;% I have empty table (fact) `time_to_play` if&lt;/span&gt;
&lt;span class='c1'&gt;% there are two other tables (facts) `daytime` and `clear_skies`&lt;/span&gt;

&lt;span class='nf'&gt;suitable_for_playing_with&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nv'&gt;X&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt; &lt;span class='p'&gt;:-&lt;/span&gt; &lt;span class='nf'&gt;round&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nv'&gt;X&lt;/span&gt;&lt;span class='p'&gt;),&lt;/span&gt; &lt;span class='nf'&gt;small&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nv'&gt;X&lt;/span&gt;&lt;span class='p'&gt;).&lt;/span&gt;

&lt;span class='c1'&gt;% I want to have a table `suitable_for_playing_with`&lt;/span&gt;
&lt;span class='c1'&gt;% such that each value in it must be in tables `round` and `small`&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;gecko &lt;a href='http://www.reddit.com/r/programming/comments/pd9z1/seven_languages_day_1_of_prolog/c3ojly3?context=1'&gt;introduced me to Datalog&lt;/a&gt; and made me realize that knowing Prolog well can be useful and pay off even when developing systems in other languages.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;There are actually lots of languages that provide prologs for exactly this purpose. You&amp;#8217;ve found Perl&amp;#8217;s, but there&amp;#8217;s also small prologs for C#, Python, Ruby, and more. Generally, these implement a subset of Prolog called &lt;a href='https://en.wikipedia.org/wiki/Datalog'&gt;Datalog&lt;/a&gt;, which is optimized specifically to be used as a kind of query language or database from other languages.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;(part of my reply) &amp;#8230;I haven&amp;#8217;t used Prolog enough to know - do Datalog&amp;#8217;s restrictions turn out to be a big limiter in practice? Does it flat out stop you from being able to solve some things? Is it just a bit less expressive?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;I&amp;#8217;ve never found it to be an issue in practice for what I&amp;#8217;ve wanted Datalog for, but I&amp;#8217;m sure it&amp;#8217;d depend on what you&amp;#8217;re doing. Datalog/Prolog-in-practice tends to show up in relatively narrow areas where the problem can be described declaratively with relative ease. The restrictions imposed by Datalog have never, in my experience, gotten in the way in those areas. On the other hand, if I were using Prolog as the sole language I wanted, rather than as an auxiliary language, I think that at least the recursion restrictions would drive me somewhat batty.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Thanks for all these informative comments everyone, I learned more about Prolog and have been given a few good reason to keep at it.&lt;/p&gt;

&lt;h2 id='full_solutions'&gt;Full solutions&lt;/h2&gt;

&lt;p&gt;Here is a nicely formatted version of my solutions to the exercises from Day 1 of Prolog. The home of the following code is &lt;a href='https://github.com/nickknw/seven-languages-in-seven-weeks/blob/master/week-3-prolog/day1.pl'&gt;on github&lt;/a&gt; with the other exercises.&lt;/p&gt;
&lt;div id='formatted_solutions'&gt;

&lt;h3&gt;Find:&lt;/h3&gt;

&lt;div class='question'&gt;1. Some free Prolog tutorials&lt;/div&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href='http://www.lix.polytechnique.fr/~liberti/public/computing/prog/prolog/prolog-tutorial.html'&gt;http://www.lix.polytechnique.fr/~liberti/public/computing/prog/prolog/prolog-tutorial.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href='http://www.csupomona.edu/~jrfisher/www/prolog_tutorial/contents.html'&gt;http://www.csupomona.edu/~jrfisher/www/prolog_tutorial/contents.html&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;div class='question'&gt;2. A support forum (there are several)&lt;/div&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href='http://old.nabble.com/SWI-Prolog-f448.html'&gt;http://old.nabble.com/SWI-Prolog-f448.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href='http://mail.gnu.org/pipermail/users-prolog/'&gt;http://mail.gnu.org/pipermail/users-prolog/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href='http://www.reddit.com/r/prolog'&gt;http://www.reddit.com/r/prolog&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;div class='question'&gt;3. One online reference for the Prolog version you're using&lt;/div&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href='http://www.swi-prolog.org/pldoc/index.html'&gt;http://www.swi-prolog.org/pldoc/index.html&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;Do:&lt;/h3&gt;

&lt;div class='question'&gt;1. Make a simple knowledge base. Represent some of your favorite books and authors.&lt;/div&gt;


&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='prolog'&gt;&lt;span class='nf'&gt;book&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='s-Atom'&gt;&amp;#39;The Name Of The Wind&amp;#39;&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='s-Atom'&gt;&amp;#39;Patrick Rothfuss&amp;#39;&lt;/span&gt;&lt;span class='p'&gt;).&lt;/span&gt;
&lt;span class='nf'&gt;book&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='s-Atom'&gt;&amp;#39;Anathem&amp;#39;&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='s-Atom'&gt;&amp;#39;Neal Stephenson&amp;#39;&lt;/span&gt;&lt;span class='p'&gt;).&lt;/span&gt;
&lt;span class='nf'&gt;book&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='s-Atom'&gt;&amp;#39;The Skystone&amp;#39;&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='s-Atom'&gt;&amp;#39;Jack Whyte&amp;#39;&lt;/span&gt;&lt;span class='p'&gt;).&lt;/span&gt;
&lt;span class='nf'&gt;book&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='s-Atom'&gt;&amp;#39;The Singing Sword&amp;#39;&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='s-Atom'&gt;&amp;#39;Jack Whyte&amp;#39;&lt;/span&gt;&lt;span class='p'&gt;).&lt;/span&gt;
&lt;span class='nf'&gt;book&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='s-Atom'&gt;&amp;#39;Rapid Development&amp;#39;&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='s-Atom'&gt;&amp;#39;Steve McConnell&amp;#39;&lt;/span&gt;&lt;span class='p'&gt;).&lt;/span&gt;
&lt;span class='nf'&gt;book&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='s-Atom'&gt;&amp;#39;The Pragmatic Programmer&amp;#39;&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='s-Atom'&gt;&amp;#39;Andy Hunt &amp;amp; Dave Thomas&amp;#39;&lt;/span&gt;&lt;span class='p'&gt;).&lt;/span&gt;
&lt;span class='nf'&gt;book&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='s-Atom'&gt;&amp;#39;Seven Languages In Seven Weeks&amp;#39;&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='s-Atom'&gt;&amp;#39;Bruce Tate&amp;#39;&lt;/span&gt;&lt;span class='p'&gt;).&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;div class='question'&gt;2. Find all books in your knowledge base written by one author.&lt;/div&gt;


&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='prolog'&gt;&lt;span class='s-Atom'&gt;?-&lt;/span&gt; &lt;span class='nf'&gt;book&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nv'&gt;What&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='s-Atom'&gt;&amp;#39;Neal Stephenson&amp;#39;&lt;/span&gt;&lt;span class='p'&gt;).&lt;/span&gt;

&lt;span class='nv'&gt;What&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='s-Atom'&gt;&amp;#39;Anathem&amp;#39;&lt;/span&gt; &lt;span class='s-Atom'&gt;?&lt;/span&gt; &lt;span class='p'&gt;;&lt;/span&gt;

&lt;span class='s-Atom'&gt;?-&lt;/span&gt; &lt;span class='nf'&gt;book&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nv'&gt;What&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='s-Atom'&gt;&amp;#39;Jack White&amp;#39;&lt;/span&gt;&lt;span class='p'&gt;).&lt;/span&gt;

&lt;span class='nv'&gt;What&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='s-Atom'&gt;&amp;#39;The Skystone&amp;#39;&lt;/span&gt; &lt;span class='s-Atom'&gt;?&lt;/span&gt; &lt;span class='p'&gt;;&lt;/span&gt;

&lt;span class='nv'&gt;What&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='s-Atom'&gt;&amp;#39;The Singing Sword&amp;#39;&lt;/span&gt; &lt;span class='s-Atom'&gt;?&lt;/span&gt; &lt;span class='p'&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;div class='question'&gt;3. Make a knowledge base representing musicians and instruments. Also represent musicians and their genre of music.&lt;/div&gt;


&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='prolog'&gt;&lt;span class='nf'&gt;musician_instrument&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='s-Atom'&gt;&amp;#39;Hansi Kursch&amp;#39;&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='s-Atom'&gt;vocals&lt;/span&gt;&lt;span class='p'&gt;).&lt;/span&gt;
&lt;span class='nf'&gt;musician_instrument&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='s-Atom'&gt;&amp;#39;Hansi Kursch&amp;#39;&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='s-Atom'&gt;bass&lt;/span&gt;&lt;span class='p'&gt;).&lt;/span&gt;
&lt;span class='nf'&gt;musician_instrument&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='s-Atom'&gt;&amp;#39;Andre Olbrich&amp;#39;&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='s-Atom'&gt;guitar&lt;/span&gt;&lt;span class='p'&gt;).&lt;/span&gt;
&lt;span class='nf'&gt;musician_instrument&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='s-Atom'&gt;&amp;#39;Duke Ellington&amp;#39;&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='s-Atom'&gt;piano&lt;/span&gt;&lt;span class='p'&gt;).&lt;/span&gt;
&lt;span class='nf'&gt;musician_instrument&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='s-Atom'&gt;&amp;#39;Jimi Hendrix&amp;#39;&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='s-Atom'&gt;guitar&lt;/span&gt;&lt;span class='p'&gt;).&lt;/span&gt;

&lt;span class='nf'&gt;musician_genre&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='s-Atom'&gt;&amp;#39;Hansi Kurch&amp;#39;&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='s-Atom'&gt;metal&lt;/span&gt;&lt;span class='p'&gt;).&lt;/span&gt;
&lt;span class='nf'&gt;musician_genre&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='s-Atom'&gt;&amp;#39;Andre Olbrich&amp;#39;&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='s-Atom'&gt;metal&lt;/span&gt;&lt;span class='p'&gt;).&lt;/span&gt;
&lt;span class='nf'&gt;musician_genre&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='s-Atom'&gt;&amp;#39;Duke Ellington&amp;#39;&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='s-Atom'&gt;jazz&lt;/span&gt;&lt;span class='p'&gt;).&lt;/span&gt;
&lt;span class='nf'&gt;musician_genre&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='s-Atom'&gt;&amp;#39;Jimi Hendrix&amp;#39;&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='s-Atom'&gt;rock&lt;/span&gt;&lt;span class='p'&gt;).&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;div class='question'&gt;4. Find all musicians who play the guitar.&lt;/div&gt;


&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='prolog'&gt;&lt;span class='s-Atom'&gt;?-&lt;/span&gt; &lt;span class='nf'&gt;musician_instrument&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nv'&gt;What&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='s-Atom'&gt;guitar&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt;

&lt;span class='nv'&gt;What&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='s-Atom'&gt;&amp;#39;Andre Olbrich&amp;#39;&lt;/span&gt; &lt;span class='s-Atom'&gt;?&lt;/span&gt; &lt;span class='p'&gt;;&lt;/span&gt;

&lt;span class='nv'&gt;What&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='s-Atom'&gt;&amp;#39;Jimi Hendrix&amp;#39;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;/div&gt;
&lt;p&gt;Next in this series: &lt;a href='/blog/2012/07/17/seven-languages-week-3-day-2'&gt;Day 2 of Prolog&lt;/a&gt;&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>Seven Languages: Week 2 (Io) - Day 3</title>
   <link href="http://nickknowlson.com/blog/2012/01/16/seven-languages-week-2-day-3/"/>
   <updated>2012-01-16T00:00:00-08:00</updated>
   <id>http://nickknowlson.com/blog/2012/01/16/seven-languages-week-2-day-3</id>
   <content type="html">&lt;p&gt;Since this is the last day of Io, I am going to reflect a bit on what I liked about it.&lt;/p&gt;

&lt;p&gt;I learned that a small prototype-based language like Io can still be expressive and powerful. There are no classes or modules, but you don&amp;#8217;t need them to put things together in a way that mimics classes or modules. It was very refreshing.&lt;/p&gt;

&lt;p&gt;It also turned out that I got a practical result directly relevant to my current work from learning Io: it strengthened my understanding of javascript. The underlying way javascript works makes sense to me on a deeper level now. I am actually in the middle of reading &lt;a href='http://shop.oreilly.com/product/9780596517748.do'&gt;Javascript: The Good Parts&lt;/a&gt;, and I can glance at the parts to do with explaining prototypes and think &amp;#8220;Aha! This is obvious and makes total sense to me!&amp;#8221; I am positive I would not have thought the same before this experience.&lt;/p&gt;

&lt;p&gt;Io&amp;#8217;s minimalism also whetted my appetite for learning a lisp. Clojure is coming up in a few chapters, and I am looking forward to it. Scheme is also on my horizon (if a bit farther out), but that&amp;#8217;s a subject for another post.&lt;/p&gt;
&lt;div class='interjection'&gt;&lt;p&gt;
(This article is part of a series of posts I am doing about my journey through the exercises of the book &lt;a href='http://pragprog.com/book/btlang/seven-languages-in-seven-weeks'&gt;Seven Languages In Seven Weeks&lt;/a&gt;. The article previous to this one is &lt;a href='/blog/2012/01/11/seven-languages-week-2-day-2/'&gt;Week 2 (Io) - Day 2&lt;/a&gt;. For an overview see the &lt;a href='/projects/seven-languages-in-seven-weeks/'&gt;Seven Languages project page&lt;/a&gt;.)
&lt;/p&gt;&lt;/div&gt;
&lt;h2 id='topics_covered'&gt;Topics covered&lt;/h2&gt;

&lt;p&gt;The last day of Io covered some more advanced language features, mostly focused on metaprogramming.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Metaprogramming and internal DSLs&lt;/strong&gt; were the main focus of the text, the examples, and the exercises. But for good reason! Again Io&amp;#8217;s firm commitment to letting you do whatever you want to (even up to the point of allowing you to cripple core language features!) shows the power it can give.&lt;/p&gt;

&lt;p&gt;You can create custom behavior for curly brackets just by sticking a method into the &lt;code&gt;curlyBrackets&lt;/code&gt; slot. You can redefine the colon operator by calling &lt;code&gt;addAssignOperator&lt;/code&gt; with &lt;code&gt;:&lt;/code&gt; and the name of the method you want to use. Io also has an equivalent to Ruby&amp;#8217;s &lt;code&gt;method_missing&lt;/code&gt;, except in Io it is called &lt;code&gt;forward&lt;/code&gt; and it is a crucial part of prototypal inheritance.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Example time!&lt;/strong&gt; Say you send a message called &lt;code&gt;fly&lt;/code&gt; to an object we&amp;#8217;ll call &lt;code&gt;Mallard&lt;/code&gt;. In this example, &lt;code&gt;Mallard&lt;/code&gt; is a clone of the &lt;code&gt;Duck&lt;/code&gt; prototype, and has some additional slots we don&amp;#8217;t care about right now. The important thing is that &lt;code&gt;Mallard&lt;/code&gt; &lt;em&gt;doesn&amp;#8217;t&lt;/em&gt; have a &lt;code&gt;fly&lt;/code&gt; slot (it is probably defined in &lt;code&gt;Duck&lt;/code&gt; or somewhere else further up the chain), so when we send the &lt;code&gt;fly&lt;/code&gt; message to &lt;code&gt;Mallard&lt;/code&gt; it will say &amp;#8220;Huh, can&amp;#8217;t do anything with this&amp;#8221; and &lt;em&gt;forward&lt;/em&gt; that message to its prototype to deal with.&lt;/p&gt;

&lt;p&gt;Putting a method in the &lt;code&gt;forward&lt;/code&gt; slot of an object lets us customize what happens when an object receives a message it doesn&amp;#8217;t know what to do with. Instead of forwarding the message on to its prototype (as in the example above), we can start to do some pretty interesting things, which you will see in my highlights from the exercises.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Concurrency&lt;/strong&gt; was also talked about, and Bruce showed how Io can handle that with &lt;strong&gt;coroutines, actors, and futures&lt;/strong&gt;. Futures and coroutines I am already familiar with, and it was nice to see how seamless they were to use in Io. I am pretty sure I didn&amp;#8217;t really grok the section on actors.&lt;/p&gt;

&lt;p&gt;In Io you can make an object into an actor just by sending an asynchronous message to it (which you do with &lt;code&gt;@@&lt;/code&gt;). This may be cool but I&amp;#8217;m not sure, because I don&amp;#8217;t understand the implications of actors yet. Once I get to the Erlang section is likely when I&amp;#8217;ll start learning more about them and this will start to be impressive in retrospect.&lt;/p&gt;

&lt;h2 id='highlights_from_exercises'&gt;Highlights from exercises&lt;/h2&gt;

&lt;p&gt;These exercises focused on expanding on the XML DSL example that was used to demonstrate &lt;code&gt;forward&lt;/code&gt; during this chapter.&lt;/p&gt;

&lt;p&gt;I was not really satisfied with my solution - I couldn&amp;#8217;t manage to make it feel as elegant as my previous ones. It might be because this problem is inherently a little bit messy, or more likely, there are still some bumps in my implementation that could be smoothed out.&lt;/p&gt;

&lt;p&gt;Io&amp;#8217;s &lt;code&gt;forward&lt;/code&gt; method, reflection abilities, and ability to redefine operators all played key roles in making a problem like this possible to solve with an internal (&lt;a href='http://martinfowler.com/bliki/DomainSpecificLanguage.html'&gt;as opposed to external&lt;/a&gt;) DSL. This saved a ton of time and effort on my part.&lt;/p&gt;
&lt;h3&gt;Forward&lt;/h3&gt;
&lt;p&gt;This is a simple stripped down chunk from the XML DSL example from the book. It lets you make a rudimentary XML DSL. The following section of code will turn &lt;code&gt;Builder div&lt;/code&gt; into &lt;code&gt;&amp;lt;div&amp;gt;&amp;lt;/div&amp;gt;&lt;/code&gt;. The downside is, it will also turn &lt;code&gt;Builder
span&lt;/code&gt; into &lt;code&gt;&amp;lt;div&amp;gt;&amp;lt;/div&amp;gt;&lt;/code&gt;!&lt;/p&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='io'&gt;&lt;span class='n'&gt;Builder&lt;/span&gt; &lt;span class='o'&gt;:=&lt;/span&gt; &lt;span class='nb'&gt;Object&lt;/span&gt; &lt;span class='k'&gt;clone&lt;/span&gt;

&lt;span class='n'&gt;Builder&lt;/span&gt; &lt;span class='n'&gt;forward&lt;/span&gt; &lt;span class='o'&gt;:=&lt;/span&gt; &lt;span class='k'&gt;method&lt;/span&gt;&lt;span class='o'&gt;(&lt;/span&gt;
    &lt;span class='n'&gt;write&lt;/span&gt;&lt;span class='o'&gt;(&lt;/span&gt;&lt;span class='s'&gt;&amp;quot;&amp;lt;div&amp;gt;&amp;quot;&lt;/span&gt;&lt;span class='o'&gt;)&lt;/span&gt;
    &lt;span class='n'&gt;write&lt;/span&gt;&lt;span class='o'&gt;(&lt;/span&gt;&lt;span class='s'&gt;&amp;quot;&amp;lt;/div&amp;gt;&amp;quot;&lt;/span&gt;&lt;span class='o'&gt;)&lt;/span&gt;
&lt;span class='o'&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3&gt;Reflection&lt;/h3&gt;
&lt;p&gt;Reflection in Io was covered in Day 2 of the book, but it is an important part of this example. It provides the ability to access the &lt;em&gt;name of the message&lt;/em&gt; that was sent with &lt;code&gt;call message name&lt;/code&gt;. It also lets us start nesting calls by passing another function call as an argument. This example is complete enough that we can do &lt;code&gt;Builder ul(li(&amp;quot;One&amp;quot;), li(&amp;quot;Two&amp;quot;), li(&amp;quot;Three&amp;quot;))&lt;/code&gt; and it will correctly print out &lt;code&gt;&amp;lt;ul&amp;gt;&amp;lt;li&amp;gt;One&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;Two&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;Three&amp;lt;/li&amp;gt;&amp;lt;/ul&amp;gt;&lt;/code&gt;.&lt;/p&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='io'&gt;&lt;span class='n'&gt;Builder&lt;/span&gt; &lt;span class='o'&gt;:=&lt;/span&gt; &lt;span class='nb'&gt;Object&lt;/span&gt; &lt;span class='k'&gt;clone&lt;/span&gt;

&lt;span class='n'&gt;Builder&lt;/span&gt; &lt;span class='n'&gt;forward&lt;/span&gt; &lt;span class='o'&gt;:=&lt;/span&gt; &lt;span class='k'&gt;method&lt;/span&gt;&lt;span class='o'&gt;(&lt;/span&gt;
    &lt;span class='n'&gt;write&lt;/span&gt;&lt;span class='o'&gt;(&lt;/span&gt;&lt;span class='s'&gt;&amp;quot;&amp;lt;&amp;quot;&lt;/span&gt;&lt;span class='o'&gt;,&lt;/span&gt; &lt;span class='n'&gt;call&lt;/span&gt; &lt;span class='n'&gt;message&lt;/span&gt; &lt;span class='n'&gt;name&lt;/span&gt;&lt;span class='o'&gt;,&lt;/span&gt; &lt;span class='s'&gt;&amp;quot;&amp;gt;&amp;quot;&lt;/span&gt;&lt;span class='o'&gt;)&lt;/span&gt;
    &lt;span class='n'&gt;call&lt;/span&gt; &lt;span class='n'&gt;message&lt;/span&gt; &lt;span class='n'&gt;arguments&lt;/span&gt; &lt;span class='n'&gt;foreach&lt;/span&gt;&lt;span class='o'&gt;(&lt;/span&gt;
        &lt;span class='n'&gt;arg&lt;/span&gt;&lt;span class='o'&gt;,&lt;/span&gt;
        &lt;span class='n'&gt;content&lt;/span&gt; &lt;span class='o'&gt;:=&lt;/span&gt; &lt;span class='n'&gt;self&lt;/span&gt; &lt;span class='n'&gt;doMessage&lt;/span&gt;&lt;span class='o'&gt;(&lt;/span&gt;&lt;span class='n'&gt;arg&lt;/span&gt;&lt;span class='o'&gt;);&lt;/span&gt;
        &lt;span class='k'&gt;if&lt;/span&gt;&lt;span class='o'&gt;(&lt;/span&gt;&lt;span class='n'&gt;content&lt;/span&gt; &lt;span class='n'&gt;type&lt;/span&gt; &lt;span class='o'&gt;==&lt;/span&gt; &lt;span class='s'&gt;&amp;quot;Sequence&amp;quot;&lt;/span&gt;&lt;span class='o'&gt;,&lt;/span&gt; &lt;span class='n'&gt;write&lt;/span&gt;&lt;span class='o'&gt;(&lt;/span&gt;&lt;span class='n'&gt;content&lt;/span&gt;&lt;span class='o'&gt;)))&lt;/span&gt;
    &lt;span class='n'&gt;write&lt;/span&gt;&lt;span class='o'&gt;(&lt;/span&gt;&lt;span class='s'&gt;&amp;quot;&amp;lt;/&amp;quot;&lt;/span&gt;&lt;span class='o'&gt;,&lt;/span&gt; &lt;span class='n'&gt;call&lt;/span&gt; &lt;span class='n'&gt;message&lt;/span&gt; &lt;span class='n'&gt;name&lt;/span&gt;&lt;span class='o'&gt;,&lt;/span&gt; &lt;span class='s'&gt;&amp;quot;&amp;gt;&amp;quot;&lt;/span&gt;&lt;span class='o'&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Let&amp;#8217;s go over that middle chunk that begins with &lt;code&gt;call message arguments&lt;/code&gt;. Just as &lt;code&gt;call message name&lt;/code&gt; will return the name, &lt;code&gt;call message arguments&lt;/code&gt; returns a list of the arguments. We iterate over that list with &lt;code&gt;foreach&lt;/code&gt;, and for each &lt;code&gt;arg&lt;/code&gt; we do two things:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Execute it with &lt;code&gt;self doMessage&lt;/code&gt;. If the argument is another method call like &lt;code&gt;li(&amp;quot;One&amp;quot;)&lt;/code&gt; then &lt;code&gt;Builder li&lt;/code&gt; gets executed, &lt;code&gt;Builder&lt;/code&gt; can&amp;#8217;t find a slot with that name, and &lt;code&gt;forward&lt;/code&gt; gets called again. We are recursing now, and this will continue until we hit an argument that is a simple string, like &lt;code&gt;&amp;quot;One&amp;quot;&lt;/code&gt;. When we do, &lt;code&gt;doMessage&lt;/code&gt; will just turn that argument into a string. This leads to the second step:&lt;/li&gt;

&lt;li&gt;If the executing argument is a simple string (&lt;code&gt;if(content type == &amp;quot;Sequence&amp;quot;,&lt;/code&gt;) then print it out!&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;That&amp;#8217;s enough for a simple XML DSL in Io. The exercises are about taking this base and expanding it to handle attributes and generate xml with correct indentation. If you&amp;#8217;re interested in seeing that, just scroll down to my full code listing!&lt;/p&gt;
&lt;h3&gt;Operator Redefinition&lt;/h3&gt;
&lt;p&gt;Now that you&amp;#8217;ve made it through that, let&amp;#8217;s close with something easy. Exercise #2 was simple and served as a hint for the next one. In Io you can override what &lt;code&gt;{1, 2, 3}&lt;/code&gt; means by putting a method into &lt;code&gt;curlyBrackets&lt;/code&gt;. The contents &lt;code&gt;1&lt;/code&gt;, &lt;code&gt;2&lt;/code&gt;, and &lt;code&gt;3&lt;/code&gt; will be available as the arguments of the message. If you were paying attention before, you&amp;#8217;ll realize that we already know how to turn the message arguments into a list:&lt;/p&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='io'&gt;&lt;span class='c1'&gt;# 2. Create a list syntax that uses brackets&lt;/span&gt;
&lt;span class='n'&gt;curlyBrackets&lt;/span&gt; &lt;span class='o'&gt;:=&lt;/span&gt; &lt;span class='k'&gt;method&lt;/span&gt;&lt;span class='o'&gt;(&lt;/span&gt;
    &lt;span class='n'&gt;call&lt;/span&gt; &lt;span class='n'&gt;message&lt;/span&gt; &lt;span class='n'&gt;arguments&lt;/span&gt;
&lt;span class='o'&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;So that&amp;#8217;s all that is required to solve that! But that isn&amp;#8217;t the typical way to redefine operators in Io. I&amp;#8217;ll leave you with a final example that shows you how to tell Io &amp;#8220;when I use the &lt;code&gt;:&lt;/code&gt; operator, I really want you to call the &lt;code&gt;atPutNumber&lt;/code&gt; method instead&amp;#8221;.&lt;/p&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='io'&gt;&lt;span class='n'&gt;OperatorTable&lt;/span&gt; &lt;span class='n'&gt;addAssignOperator&lt;/span&gt;&lt;span class='o'&gt;(&lt;/span&gt;&lt;span class='s'&gt;&amp;quot;:&amp;quot;&lt;/span&gt;&lt;span class='o'&gt;,&lt;/span&gt; &lt;span class='s'&gt;&amp;quot;atPutNumber&amp;quot;&lt;/span&gt;&lt;span class='o'&gt;)&lt;/span&gt;

&lt;span class='nb'&gt;Map&lt;/span&gt; &lt;span class='n'&gt;atPutNumber&lt;/span&gt; &lt;span class='o'&gt;:=&lt;/span&gt; &lt;span class='k'&gt;method&lt;/span&gt;&lt;span class='o'&gt;(&lt;/span&gt;
    &lt;span class='c1'&gt;# your code goes here&lt;/span&gt;
&lt;span class='o'&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id='full_solutions'&gt;Full solutions&lt;/h2&gt;

&lt;p&gt;Here is a nicely formatted version of my solutions to the exercises from Day 3 of Io. The home of the following code is &lt;a href='https://github.com/nickknw/seven-languages-in-seven-weeks/blob/master/week-2-io/day3.io'&gt;on github&lt;/a&gt; with the other exercises.&lt;/p&gt;
&lt;div id='formatted_solutions'&gt;

&lt;h3&gt;Code Given&lt;/h3&gt;


&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='io'&gt;&lt;span class='n'&gt;Builder&lt;/span&gt; &lt;span class='o'&gt;:=&lt;/span&gt; &lt;span class='nb'&gt;Object&lt;/span&gt; &lt;span class='k'&gt;clone&lt;/span&gt;

&lt;span class='n'&gt;Builder&lt;/span&gt; &lt;span class='n'&gt;forward&lt;/span&gt; &lt;span class='o'&gt;:=&lt;/span&gt; &lt;span class='k'&gt;method&lt;/span&gt;&lt;span class='o'&gt;(&lt;/span&gt;
    &lt;span class='n'&gt;writeln&lt;/span&gt;&lt;span class='o'&gt;(&lt;/span&gt;&lt;span class='s'&gt;&amp;quot;&amp;lt;&amp;quot;&lt;/span&gt;&lt;span class='o'&gt;,&lt;/span&gt; &lt;span class='n'&gt;call&lt;/span&gt; &lt;span class='n'&gt;message&lt;/span&gt; &lt;span class='n'&gt;name&lt;/span&gt;&lt;span class='o'&gt;,&lt;/span&gt; &lt;span class='s'&gt;&amp;quot;&amp;gt;&amp;quot;&lt;/span&gt;&lt;span class='o'&gt;)&lt;/span&gt;
    &lt;span class='n'&gt;call&lt;/span&gt; &lt;span class='n'&gt;message&lt;/span&gt; &lt;span class='n'&gt;arguments&lt;/span&gt; &lt;span class='n'&gt;foreach&lt;/span&gt;&lt;span class='o'&gt;(&lt;/span&gt;
        &lt;span class='n'&gt;arg&lt;/span&gt;&lt;span class='o'&gt;,&lt;/span&gt;
        &lt;span class='n'&gt;content&lt;/span&gt; &lt;span class='o'&gt;:=&lt;/span&gt; &lt;span class='n'&gt;self&lt;/span&gt; &lt;span class='n'&gt;doMessage&lt;/span&gt;&lt;span class='o'&gt;(&lt;/span&gt;&lt;span class='n'&gt;arg&lt;/span&gt;&lt;span class='o'&gt;);&lt;/span&gt;
        &lt;span class='k'&gt;if&lt;/span&gt;&lt;span class='o'&gt;(&lt;/span&gt;&lt;span class='n'&gt;content&lt;/span&gt; &lt;span class='n'&gt;type&lt;/span&gt; &lt;span class='o'&gt;==&lt;/span&gt; &lt;span class='s'&gt;&amp;quot;Sequence&amp;quot;&lt;/span&gt;&lt;span class='o'&gt;,&lt;/span&gt; &lt;span class='n'&gt;writeln&lt;/span&gt;&lt;span class='o'&gt;(&lt;/span&gt;&lt;span class='n'&gt;content&lt;/span&gt;&lt;span class='o'&gt;)))&lt;/span&gt;
    &lt;span class='n'&gt;writeln&lt;/span&gt;&lt;span class='o'&gt;(&lt;/span&gt;&lt;span class='s'&gt;&amp;quot;&amp;lt;/&amp;quot;&lt;/span&gt;&lt;span class='o'&gt;,&lt;/span&gt; &lt;span class='n'&gt;call&lt;/span&gt; &lt;span class='n'&gt;message&lt;/span&gt; &lt;span class='n'&gt;name&lt;/span&gt;&lt;span class='o'&gt;,&lt;/span&gt; &lt;span class='s'&gt;&amp;quot;&amp;gt;&amp;quot;&lt;/span&gt;&lt;span class='o'&gt;)&lt;/span&gt;
&lt;span class='o'&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;Do: &lt;/h3&gt;

&lt;div class='question'&gt;&lt;b&gt;1.&lt;/b&gt; Enhance the XML program to add spaces to show the indentation
structure&lt;/div&gt;


&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='io'&gt;&lt;span class='n'&gt;Builder&lt;/span&gt; &lt;span class='n'&gt;indentLevel&lt;/span&gt; &lt;span class='o'&gt;:=&lt;/span&gt; &lt;span class='mf'&gt;0&lt;/span&gt;

&lt;span class='n'&gt;Builder&lt;/span&gt; &lt;span class='n'&gt;forward&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='k'&gt;method&lt;/span&gt;&lt;span class='o'&gt;(&lt;/span&gt;
    &lt;span class='n'&gt;writeln&lt;/span&gt;&lt;span class='o'&gt;(&lt;/span&gt;&lt;span class='n'&gt;makeIndent&lt;/span&gt;&lt;span class='o'&gt;()&lt;/span&gt; &lt;span class='o'&gt;..&lt;/span&gt; &lt;span class='s'&gt;&amp;quot;&amp;lt;&amp;quot;&lt;/span&gt;&lt;span class='o'&gt;,&lt;/span&gt; &lt;span class='n'&gt;call&lt;/span&gt; &lt;span class='n'&gt;message&lt;/span&gt; &lt;span class='n'&gt;name&lt;/span&gt;&lt;span class='o'&gt;,&lt;/span&gt; &lt;span class='s'&gt;&amp;quot;&amp;gt;&amp;quot;&lt;/span&gt;&lt;span class='o'&gt;)&lt;/span&gt;
    &lt;span class='n'&gt;indentLevel&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='n'&gt;indentLevel&lt;/span&gt; &lt;span class='o'&gt;+&lt;/span&gt; &lt;span class='mf'&gt;1&lt;/span&gt;
    &lt;span class='n'&gt;call&lt;/span&gt; &lt;span class='n'&gt;message&lt;/span&gt; &lt;span class='n'&gt;arguments&lt;/span&gt; &lt;span class='n'&gt;foreach&lt;/span&gt;&lt;span class='o'&gt;(&lt;/span&gt;
        &lt;span class='n'&gt;arg&lt;/span&gt;&lt;span class='o'&gt;,&lt;/span&gt;
        &lt;span class='n'&gt;content&lt;/span&gt; &lt;span class='o'&gt;:=&lt;/span&gt; &lt;span class='n'&gt;self&lt;/span&gt; &lt;span class='n'&gt;doMessage&lt;/span&gt;&lt;span class='o'&gt;(&lt;/span&gt;&lt;span class='n'&gt;arg&lt;/span&gt;&lt;span class='o'&gt;);&lt;/span&gt;
        &lt;span class='k'&gt;if&lt;/span&gt;&lt;span class='o'&gt;(&lt;/span&gt;&lt;span class='n'&gt;content&lt;/span&gt; &lt;span class='n'&gt;type&lt;/span&gt; &lt;span class='o'&gt;==&lt;/span&gt; &lt;span class='s'&gt;&amp;quot;Sequence&amp;quot;&lt;/span&gt;&lt;span class='o'&gt;,&lt;/span&gt; &lt;span class='n'&gt;writeln&lt;/span&gt;&lt;span class='o'&gt;(&lt;/span&gt;&lt;span class='n'&gt;makeIndent&lt;/span&gt;&lt;span class='o'&gt;()&lt;/span&gt; &lt;span class='o'&gt;..&lt;/span&gt; &lt;span class='n'&gt;content&lt;/span&gt;&lt;span class='o'&gt;))&lt;/span&gt;
    &lt;span class='o'&gt;)&lt;/span&gt;
    &lt;span class='n'&gt;indentLevel&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='n'&gt;indentLevel&lt;/span&gt; &lt;span class='o'&gt;-&lt;/span&gt; &lt;span class='mf'&gt;1&lt;/span&gt;
    &lt;span class='n'&gt;writeln&lt;/span&gt;&lt;span class='o'&gt;(&lt;/span&gt;&lt;span class='n'&gt;makeIndent&lt;/span&gt;&lt;span class='o'&gt;()&lt;/span&gt; &lt;span class='o'&gt;..&lt;/span&gt; &lt;span class='s'&gt;&amp;quot;&amp;lt;/&amp;quot;&lt;/span&gt;&lt;span class='o'&gt;,&lt;/span&gt; &lt;span class='n'&gt;call&lt;/span&gt; &lt;span class='n'&gt;message&lt;/span&gt; &lt;span class='n'&gt;name&lt;/span&gt;&lt;span class='o'&gt;,&lt;/span&gt; &lt;span class='s'&gt;&amp;quot;&amp;gt;&amp;quot;&lt;/span&gt;&lt;span class='o'&gt;)&lt;/span&gt;
&lt;span class='o'&gt;)&lt;/span&gt;

&lt;span class='n'&gt;Builder&lt;/span&gt; &lt;span class='n'&gt;makeIndent&lt;/span&gt; &lt;span class='o'&gt;:=&lt;/span&gt; &lt;span class='k'&gt;method&lt;/span&gt;&lt;span class='o'&gt;(&lt;/span&gt;
    &lt;span class='n'&gt;spaces&lt;/span&gt; &lt;span class='o'&gt;:=&lt;/span&gt; &lt;span class='s'&gt;&amp;quot;&amp;quot;&lt;/span&gt;
    &lt;span class='n'&gt;indentLevel&lt;/span&gt; &lt;span class='n'&gt;repeat&lt;/span&gt;&lt;span class='o'&gt;(&lt;/span&gt;&lt;span class='n'&gt;spaces&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='n'&gt;spaces&lt;/span&gt; &lt;span class='o'&gt;..&lt;/span&gt; &lt;span class='s'&gt;&amp;quot;  &amp;quot;&lt;/span&gt;&lt;span class='o'&gt;)&lt;/span&gt;
    &lt;span class='n'&gt;return&lt;/span&gt; &lt;span class='n'&gt;spaces&lt;/span&gt;
&lt;span class='o'&gt;)&lt;/span&gt;

&lt;span class='n'&gt;Builder&lt;/span&gt; &lt;span class='n'&gt;ul&lt;/span&gt;&lt;span class='o'&gt;(&lt;/span&gt;
    &lt;span class='n'&gt;li&lt;/span&gt;&lt;span class='o'&gt;(&lt;/span&gt;&lt;span class='s'&gt;&amp;quot;Io&amp;quot;&lt;/span&gt;&lt;span class='o'&gt;),&lt;/span&gt;
    &lt;span class='n'&gt;li&lt;/span&gt;&lt;span class='o'&gt;(&lt;/span&gt;&lt;span class='s'&gt;&amp;quot;Lua&amp;quot;&lt;/span&gt;&lt;span class='o'&gt;),&lt;/span&gt;
    &lt;span class='n'&gt;li&lt;/span&gt;&lt;span class='o'&gt;(&lt;/span&gt;&lt;span class='s'&gt;&amp;quot;JavaScript&amp;quot;&lt;/span&gt;&lt;span class='o'&gt;)&lt;/span&gt;
&lt;span class='o'&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;div class='tiny_title'&gt;Output&lt;/div&gt;


&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='html'&gt;&lt;span class='nt'&gt;&amp;lt;ul&amp;gt;&lt;/span&gt;
  &lt;span class='nt'&gt;&amp;lt;li&amp;gt;&lt;/span&gt;
    Io
  &lt;span class='nt'&gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
  &lt;span class='nt'&gt;&amp;lt;li&amp;gt;&lt;/span&gt;
    Lua
  &lt;span class='nt'&gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
  &lt;span class='nt'&gt;&amp;lt;li&amp;gt;&lt;/span&gt;
    JavaScript
  &lt;span class='nt'&gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
&lt;span class='nt'&gt;&amp;lt;/ul&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;div class='question'&gt;&lt;b&gt;2.&lt;/b&gt; Create a list syntax that uses brackets&lt;/div&gt;


&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='io'&gt;&lt;span class='n'&gt;curlyBrackets&lt;/span&gt; &lt;span class='o'&gt;:=&lt;/span&gt; &lt;span class='k'&gt;method&lt;/span&gt;&lt;span class='o'&gt;(&lt;/span&gt;
    &lt;span class='n'&gt;call&lt;/span&gt; &lt;span class='n'&gt;message&lt;/span&gt; &lt;span class='n'&gt;arguments&lt;/span&gt;
&lt;span class='o'&gt;)&lt;/span&gt;

&lt;span class='o'&gt;{&lt;/span&gt;&lt;span class='mf'&gt;1&lt;/span&gt;&lt;span class='o'&gt;,&lt;/span&gt;&lt;span class='mf'&gt;2&lt;/span&gt;&lt;span class='o'&gt;,&lt;/span&gt;&lt;span class='mf'&gt;3&lt;/span&gt;&lt;span class='o'&gt;,&lt;/span&gt;&lt;span class='mf'&gt;4&lt;/span&gt;&lt;span class='o'&gt;,&lt;/span&gt;&lt;span class='mf'&gt;5&lt;/span&gt;&lt;span class='o'&gt;}&lt;/span&gt; &lt;span class='n'&gt;println&lt;/span&gt;
&lt;span class='o'&gt;{&lt;/span&gt;&lt;span class='s'&gt;&amp;quot;a&amp;quot;&lt;/span&gt;&lt;span class='o'&gt;,&lt;/span&gt; &lt;span class='s'&gt;&amp;quot;b&amp;quot;&lt;/span&gt;&lt;span class='o'&gt;,&lt;/span&gt; &lt;span class='s'&gt;&amp;quot;c&amp;quot;&lt;/span&gt;&lt;span class='o'&gt;,&lt;/span&gt; &lt;span class='s'&gt;&amp;quot;d&amp;quot;&lt;/span&gt;&lt;span class='o'&gt;,&lt;/span&gt; &lt;span class='s'&gt;&amp;quot;e&amp;quot;&lt;/span&gt;&lt;span class='o'&gt;}&lt;/span&gt; &lt;span class='n'&gt;println&lt;/span&gt;

&lt;span class='c1'&gt;# that was unexpectedly easy and elegant. I almost feel like I&amp;#39;ve missed something&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;div class='tiny_title'&gt;Output&lt;/div&gt;


&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='io'&gt;&lt;span class='nb'&gt;list&lt;/span&gt;&lt;span class='o'&gt;(&lt;/span&gt;&lt;span class='mf'&gt;1&lt;/span&gt;&lt;span class='o'&gt;,&lt;/span&gt; &lt;span class='mf'&gt;2&lt;/span&gt;&lt;span class='o'&gt;,&lt;/span&gt; &lt;span class='mf'&gt;3&lt;/span&gt;&lt;span class='o'&gt;,&lt;/span&gt; &lt;span class='mf'&gt;4&lt;/span&gt;&lt;span class='o'&gt;,&lt;/span&gt; &lt;span class='mf'&gt;5&lt;/span&gt;&lt;span class='o'&gt;)&lt;/span&gt;
&lt;span class='nb'&gt;list&lt;/span&gt;&lt;span class='o'&gt;(&lt;/span&gt;&lt;span class='s'&gt;&amp;quot;a&amp;quot;&lt;/span&gt;&lt;span class='o'&gt;,&lt;/span&gt; &lt;span class='s'&gt;&amp;quot;b&amp;quot;&lt;/span&gt;&lt;span class='o'&gt;,&lt;/span&gt; &lt;span class='s'&gt;&amp;quot;c&amp;quot;&lt;/span&gt;&lt;span class='o'&gt;,&lt;/span&gt; &lt;span class='s'&gt;&amp;quot;d&amp;quot;&lt;/span&gt;&lt;span class='o'&gt;,&lt;/span&gt; &lt;span class='s'&gt;&amp;quot;e&amp;quot;&lt;/span&gt;&lt;span class='o'&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;



&lt;div class='question'&gt;&lt;b&gt;3.&lt;/b&gt; Enhance the XML program to handle attributes: if the first argument is a map (use the curly brackets syntax), add attributes to the XML program. For example: book({&quot;author&quot;: &quot;Tate&quot;}...) would print &amp;lt;book author=&quot;Tate&quot;&amp;gt;&lt;/div&gt;


&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='io'&gt;&lt;span class='n'&gt;OperatorTable&lt;/span&gt; &lt;span class='n'&gt;addAssignOperator&lt;/span&gt;&lt;span class='o'&gt;(&lt;/span&gt;&lt;span class='s'&gt;&amp;quot;:&amp;quot;&lt;/span&gt;&lt;span class='o'&gt;,&lt;/span&gt; &lt;span class='s'&gt;&amp;quot;atPutNumber&amp;quot;&lt;/span&gt;&lt;span class='o'&gt;)&lt;/span&gt;

&lt;span class='nb'&gt;Map&lt;/span&gt; &lt;span class='n'&gt;atPutNumber&lt;/span&gt; &lt;span class='o'&gt;:=&lt;/span&gt; &lt;span class='k'&gt;method&lt;/span&gt;&lt;span class='o'&gt;(&lt;/span&gt;
    &lt;span class='n'&gt;self&lt;/span&gt; &lt;span class='n'&gt;atPut&lt;/span&gt;&lt;span class='o'&gt;(&lt;/span&gt;
        &lt;span class='n'&gt;call&lt;/span&gt; &lt;span class='n'&gt;evalArgAt&lt;/span&gt;&lt;span class='o'&gt;(&lt;/span&gt;&lt;span class='mf'&gt;0&lt;/span&gt;&lt;span class='o'&gt;)&lt;/span&gt; &lt;span class='n'&gt;asMutable&lt;/span&gt; &lt;span class='n'&gt;removePrefix&lt;/span&gt;&lt;span class='o'&gt;(&lt;/span&gt;&lt;span class='s'&gt;&amp;quot;\&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class='o'&gt;)&lt;/span&gt; &lt;span class='n'&gt;removeSuffix&lt;/span&gt;&lt;span class='o'&gt;(&lt;/span&gt;&lt;span class='s'&gt;&amp;quot;\&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class='o'&gt;),&lt;/span&gt;
        &lt;span class='n'&gt;call&lt;/span&gt; &lt;span class='n'&gt;evalArgAt&lt;/span&gt;&lt;span class='o'&gt;(&lt;/span&gt;&lt;span class='mf'&gt;1&lt;/span&gt;&lt;span class='o'&gt;)&lt;/span&gt;
    &lt;span class='o'&gt;)&lt;/span&gt;
&lt;span class='o'&gt;)&lt;/span&gt;
        
&lt;span class='n'&gt;curlyBrackets&lt;/span&gt; &lt;span class='o'&gt;:=&lt;/span&gt; &lt;span class='k'&gt;method&lt;/span&gt;&lt;span class='o'&gt;(&lt;/span&gt;
    &lt;span class='n'&gt;r&lt;/span&gt; &lt;span class='o'&gt;:=&lt;/span&gt; &lt;span class='nb'&gt;Map&lt;/span&gt; &lt;span class='k'&gt;clone&lt;/span&gt;
    &lt;span class='n'&gt;call&lt;/span&gt; &lt;span class='n'&gt;message&lt;/span&gt; &lt;span class='n'&gt;arguments&lt;/span&gt; &lt;span class='n'&gt;foreach&lt;/span&gt;&lt;span class='o'&gt;(&lt;/span&gt;&lt;span class='n'&gt;arg&lt;/span&gt;&lt;span class='o'&gt;,&lt;/span&gt;
        &lt;span class='n'&gt;r&lt;/span&gt; &lt;span class='n'&gt;doMessage&lt;/span&gt;&lt;span class='o'&gt;(&lt;/span&gt;&lt;span class='n'&gt;arg&lt;/span&gt;&lt;span class='o'&gt;)&lt;/span&gt;
    &lt;span class='o'&gt;)&lt;/span&gt;
    &lt;span class='n'&gt;r&lt;/span&gt;
&lt;span class='o'&gt;)&lt;/span&gt;

&lt;span class='nb'&gt;Map&lt;/span&gt; &lt;span class='n'&gt;printAsAttributes&lt;/span&gt; &lt;span class='o'&gt;:=&lt;/span&gt; &lt;span class='k'&gt;method&lt;/span&gt;&lt;span class='o'&gt;(&lt;/span&gt;
    &lt;span class='n'&gt;self&lt;/span&gt; &lt;span class='n'&gt;foreach&lt;/span&gt;&lt;span class='o'&gt;(&lt;/span&gt;&lt;span class='n'&gt;k&lt;/span&gt;&lt;span class='o'&gt;,&lt;/span&gt; &lt;span class='n'&gt;v&lt;/span&gt;&lt;span class='o'&gt;,&lt;/span&gt;
        &lt;span class='n'&gt;write&lt;/span&gt;&lt;span class='o'&gt;(&lt;/span&gt;&lt;span class='s'&gt;&amp;quot; &amp;quot;&lt;/span&gt; &lt;span class='o'&gt;..&lt;/span&gt; &lt;span class='n'&gt;k&lt;/span&gt; &lt;span class='o'&gt;..&lt;/span&gt; &lt;span class='s'&gt;&amp;quot;=\&amp;quot;&amp;quot;&lt;/span&gt; &lt;span class='o'&gt;..&lt;/span&gt; &lt;span class='n'&gt;v&lt;/span&gt; &lt;span class='o'&gt;..&lt;/span&gt; &lt;span class='s'&gt;&amp;quot;\&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class='o'&gt;)&lt;/span&gt;
    &lt;span class='o'&gt;)&lt;/span&gt;
&lt;span class='o'&gt;)&lt;/span&gt;

&lt;span class='n'&gt;Builder&lt;/span&gt; &lt;span class='n'&gt;forward&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='k'&gt;method&lt;/span&gt;&lt;span class='o'&gt;(&lt;/span&gt;
    &lt;span class='n'&gt;write&lt;/span&gt;&lt;span class='o'&gt;(&lt;/span&gt;&lt;span class='n'&gt;makeIndent&lt;/span&gt;&lt;span class='o'&gt;()&lt;/span&gt; &lt;span class='o'&gt;..&lt;/span&gt; &lt;span class='s'&gt;&amp;quot;&amp;lt;&amp;quot;&lt;/span&gt;&lt;span class='o'&gt;,&lt;/span&gt; &lt;span class='n'&gt;call&lt;/span&gt; &lt;span class='n'&gt;message&lt;/span&gt; &lt;span class='n'&gt;name&lt;/span&gt;&lt;span class='o'&gt;)&lt;/span&gt;
    &lt;span class='n'&gt;indentLevel&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='n'&gt;indentLevel&lt;/span&gt; &lt;span class='o'&gt;+&lt;/span&gt; &lt;span class='mf'&gt;1&lt;/span&gt;
    &lt;span class='n'&gt;isFirst&lt;/span&gt; &lt;span class='o'&gt;:=&lt;/span&gt; &lt;span class='no'&gt;true&lt;/span&gt;
    &lt;span class='n'&gt;call&lt;/span&gt; &lt;span class='n'&gt;message&lt;/span&gt; &lt;span class='n'&gt;arguments&lt;/span&gt; &lt;span class='n'&gt;foreach&lt;/span&gt;&lt;span class='o'&gt;(&lt;/span&gt;
        &lt;span class='n'&gt;arg&lt;/span&gt;&lt;span class='o'&gt;,&lt;/span&gt;
        &lt;span class='k'&gt;if&lt;/span&gt;&lt;span class='o'&gt;(&lt;/span&gt;&lt;span class='n'&gt;isFirst&lt;/span&gt;&lt;span class='o'&gt;,&lt;/span&gt;
            &lt;span class='k'&gt;if&lt;/span&gt;&lt;span class='o'&gt;(&lt;/span&gt;&lt;span class='n'&gt;arg&lt;/span&gt; &lt;span class='n'&gt;name&lt;/span&gt; &lt;span class='o'&gt;==&lt;/span&gt; &lt;span class='s'&gt;&amp;quot;curlyBrackets&amp;quot;&lt;/span&gt;&lt;span class='o'&gt;,&lt;/span&gt; 
                &lt;span class='o'&gt;(&lt;/span&gt;&lt;span class='n'&gt;self&lt;/span&gt; &lt;span class='n'&gt;doMessage&lt;/span&gt;&lt;span class='o'&gt;(&lt;/span&gt;&lt;span class='n'&gt;arg&lt;/span&gt;&lt;span class='o'&gt;))&lt;/span&gt; &lt;span class='n'&gt;printAsAttributes&lt;/span&gt;
            &lt;span class='o'&gt;)&lt;/span&gt;

            &lt;span class='n'&gt;write&lt;/span&gt;&lt;span class='o'&gt;(&lt;/span&gt;&lt;span class='s'&gt;&amp;quot;&amp;gt;\n&amp;quot;&lt;/span&gt;&lt;span class='o'&gt;)&lt;/span&gt;
            &lt;span class='n'&gt;isFirst&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='no'&gt;false&lt;/span&gt;
        &lt;span class='o'&gt;)&lt;/span&gt;

        &lt;span class='n'&gt;content&lt;/span&gt; &lt;span class='o'&gt;:=&lt;/span&gt; &lt;span class='n'&gt;self&lt;/span&gt; &lt;span class='n'&gt;doMessage&lt;/span&gt;&lt;span class='o'&gt;(&lt;/span&gt;&lt;span class='n'&gt;arg&lt;/span&gt;&lt;span class='o'&gt;)&lt;/span&gt;
        &lt;span class='k'&gt;if&lt;/span&gt;&lt;span class='o'&gt;(&lt;/span&gt;&lt;span class='n'&gt;content&lt;/span&gt; &lt;span class='n'&gt;type&lt;/span&gt; &lt;span class='o'&gt;==&lt;/span&gt; &lt;span class='s'&gt;&amp;quot;Sequence&amp;quot;&lt;/span&gt;&lt;span class='o'&gt;,&lt;/span&gt; &lt;span class='n'&gt;writeln&lt;/span&gt;&lt;span class='o'&gt;(&lt;/span&gt;&lt;span class='n'&gt;makeIndent&lt;/span&gt;&lt;span class='o'&gt;()&lt;/span&gt; &lt;span class='o'&gt;..&lt;/span&gt; &lt;span class='n'&gt;content&lt;/span&gt;&lt;span class='o'&gt;))&lt;/span&gt;
    &lt;span class='o'&gt;)&lt;/span&gt;
    &lt;span class='n'&gt;indentLevel&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='n'&gt;indentLevel&lt;/span&gt; &lt;span class='o'&gt;-&lt;/span&gt; &lt;span class='mf'&gt;1&lt;/span&gt;
    &lt;span class='n'&gt;writeln&lt;/span&gt;&lt;span class='o'&gt;(&lt;/span&gt;&lt;span class='n'&gt;makeIndent&lt;/span&gt;&lt;span class='o'&gt;()&lt;/span&gt; &lt;span class='o'&gt;..&lt;/span&gt; &lt;span class='s'&gt;&amp;quot;&amp;lt;/&amp;quot;&lt;/span&gt;&lt;span class='o'&gt;,&lt;/span&gt; &lt;span class='n'&gt;call&lt;/span&gt; &lt;span class='n'&gt;message&lt;/span&gt; &lt;span class='n'&gt;name&lt;/span&gt;&lt;span class='o'&gt;,&lt;/span&gt; &lt;span class='s'&gt;&amp;quot;&amp;gt;&amp;quot;&lt;/span&gt;&lt;span class='o'&gt;)&lt;/span&gt;
&lt;span class='o'&gt;)&lt;/span&gt;

&lt;span class='n'&gt;s&lt;/span&gt; &lt;span class='o'&gt;:=&lt;/span&gt; &lt;span class='nb'&gt;File&lt;/span&gt; &lt;span class='n'&gt;with&lt;/span&gt;&lt;span class='o'&gt;(&lt;/span&gt;&lt;span class='s'&gt;&amp;quot;builderSyntax.txt&amp;quot;&lt;/span&gt;&lt;span class='o'&gt;)&lt;/span&gt; &lt;span class='n'&gt;openForReading&lt;/span&gt; &lt;span class='n'&gt;contents&lt;/span&gt;
&lt;span class='k'&gt;doString&lt;/span&gt;&lt;span class='o'&gt;(&lt;/span&gt;&lt;span class='n'&gt;s&lt;/span&gt;&lt;span class='o'&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;div class='tiny_title'&gt;Output&lt;/div&gt;


&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='html'&gt;&lt;span class='nt'&gt;&amp;lt;ul&amp;gt;&lt;/span&gt;
  &lt;span class='nt'&gt;&amp;lt;li&amp;gt;&lt;/span&gt;
    Io
  &lt;span class='nt'&gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
  &lt;span class='nt'&gt;&amp;lt;li&lt;/span&gt; &lt;span class='na'&gt;display=&lt;/span&gt;&lt;span class='s'&gt;&amp;quot;none&amp;quot;&lt;/span&gt;&lt;span class='nt'&gt;&amp;gt;&lt;/span&gt;
    Lua
  &lt;span class='nt'&gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
  &lt;span class='nt'&gt;&amp;lt;li&amp;gt;&lt;/span&gt;
    JavaScript
  &lt;span class='nt'&gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
  &lt;span class='nt'&gt;&amp;lt;book&lt;/span&gt; &lt;span class='na'&gt;author=&lt;/span&gt;&lt;span class='s'&gt;&amp;quot;Tate&amp;quot;&lt;/span&gt;&lt;span class='nt'&gt;&amp;gt;&lt;/span&gt;
  &lt;span class='nt'&gt;&amp;lt;/book&amp;gt;&lt;/span&gt;
&lt;span class='nt'&gt;&amp;lt;/ul&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;/div&gt;
&lt;p&gt;Next in this series: &lt;a href='/blog/2012/02/05/seven-languages-week-3-day-1/'&gt;Day 1 of Prolog&lt;/a&gt;&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>Seven Languages: Week 2 (Io) - Day 2</title>
   <link href="http://nickknowlson.com/blog/2012/01/11/seven-languages-week-2-day-2/"/>
   <updated>2012-01-11T00:00:00-08:00</updated>
   <id>http://nickknowlson.com/blog/2012/01/11/seven-languages-week-2-day-2</id>
   <content type="html">&lt;p&gt;Day 2 of Io was the most difficult (as well as the most fun) day yet. It took me quite a while to finish all the exercises to my satisfaction, and it also had the most interesting exercises so far. One in particular (transposing a matrix) was &lt;a href='/blog/2011/12/30/transposing-a-matrix-in-io/'&gt;my favorite.&lt;/a&gt;.&lt;/p&gt;
&lt;div class='interjection'&gt;&lt;p&gt;
(This article is part of a series of posts I am doing about my journey through the exercises of the book &lt;a href='http://pragprog.com/book/btlang/seven-languages-in-seven-weeks'&gt;Seven Languages In Seven Weeks&lt;/a&gt;. The article previous to this one is &lt;a href='/blog/2011/12/18/seven-languages-week-2-day-1/'&gt;Week 2 (Io) - Day 1&lt;/a&gt;. For an overview see the &lt;a href='/projects/seven-languages-in-seven-weeks/'&gt;Seven Languages project page&lt;/a&gt;.)
&lt;/p&gt;&lt;/div&gt;
&lt;h2 id='topics_covered'&gt;Topics covered&lt;/h2&gt;

&lt;p&gt;Day 2 of Io went over some basic topics (conditionals, loops and operators) as well as some more complex subjects (messages and reflection).&lt;/p&gt;

&lt;p&gt;Messages are a fundamental part of Io - except for comments and commas, everything is a message. Once I began thinking like this, something clicked for me. I started to really grok the code examples, and thinking and coding in Io felt easier, more natural.&lt;/p&gt;

&lt;p&gt;Io has simple, straightforward reflection: it actually isn&amp;#8217;t a burden to use or read. Combined with Io&amp;#8217;s other design decisions this gives you quite a lot of power. You get ultimate control over your code, and the power to do whatever you can think of with it - no restriction can stand in your way.&lt;/p&gt;

&lt;p&gt;I wonder if this is how Lisp programmers have been feeling for decades.&lt;/p&gt;

&lt;h2 id='a_note_about_the_io_community'&gt;A note about the Io community&lt;/h2&gt;

&lt;p&gt;While trying to find a way to write a short solution to #5, I ran across what turned out to be a bug in Io&amp;#8217;s Range library. Thanks to the well-thought out questions in Day 1, I already had a list of places to go for help. In the #io channel on freenode I had the good luck to run into &lt;a href='http://jeremy.tregunna.ca/'&gt;Jeremy Tregunna&lt;/a&gt; and told him my problem. In a remarkably short period of time (minutes) he had confirmed that it was actually a bug, made the fix, and had a pull request created on the main Io repository on github. Shortly thereafter the patch was merged into the master branch where I downloaded it, compiled it, and could run my previously-broken code!&lt;/p&gt;

&lt;p&gt;It was a surprising and pleasant experience for me, and I&amp;#8217;d like to thank Jeremy in particular and the Io community in general for being so friendly, supportive, and quick. Thank you!&lt;/p&gt;

&lt;h2 id='highlights_from_exercises'&gt;Highlights from exercises&lt;/h2&gt;

&lt;p&gt;It was harder to pick out only a few to highlight - most of these questions were fun to solve and had interesting solutions.&lt;/p&gt;

&lt;p&gt;The one that I liked best was &lt;a href='/blog/2011/12/30/transposing-a-matrix-in-io/'&gt;transposing a matrix&lt;/a&gt;, and I felt there was enough good material in there to warrant an article of its own.&lt;/p&gt;

&lt;p&gt;The solution for Question #2 was unexpectedly straightforward. Once again, Io&amp;#8217;s absolute flexibility and willingness to let you shoot yourself in the foot pays off! The question was:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;2. How would you change / to return 0 if the denominator is zero?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The answer was only two short lines of code:&lt;/p&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='io'&gt;&lt;span class='n'&gt;Number&lt;/span&gt; &lt;span class='n'&gt;origDiv&lt;/span&gt; &lt;span class='o'&gt;:=&lt;/span&gt; &lt;span class='n'&gt;Number&lt;/span&gt; &lt;span class='n'&gt;getSlot&lt;/span&gt;&lt;span class='o'&gt;(&lt;/span&gt;&lt;span class='s'&gt;&amp;quot;/&amp;quot;&lt;/span&gt;&lt;span class='o'&gt;)&lt;/span&gt;
&lt;span class='n'&gt;Number&lt;/span&gt; &lt;span class='o'&gt;/&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='k'&gt;method&lt;/span&gt;&lt;span class='o'&gt;(&lt;/span&gt;&lt;span class='n'&gt;denom&lt;/span&gt;&lt;span class='o'&gt;,&lt;/span&gt; &lt;span class='k'&gt;if&lt;/span&gt;&lt;span class='o'&gt;(&lt;/span&gt;&lt;span class='n'&gt;denom&lt;/span&gt; &lt;span class='o'&gt;==&lt;/span&gt; &lt;span class='mf'&gt;0&lt;/span&gt;&lt;span class='o'&gt;,&lt;/span&gt; &lt;span class='mf'&gt;0&lt;/span&gt;&lt;span class='o'&gt;,&lt;/span&gt; &lt;span class='n'&gt;self&lt;/span&gt; &lt;span class='n'&gt;origDiv&lt;/span&gt;&lt;span class='o'&gt;(&lt;/span&gt;&lt;span class='n'&gt;denom&lt;/span&gt;&lt;span class='o'&gt;)))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The tricky part at first was figuring out how to save a reference to the original division method, but in retrospect it was blindingly obvious. It&amp;#8217;s the same things I&amp;#8217;ve been doing all along with Io: taking things out of slots and putting things in slots!&lt;/p&gt;

&lt;p&gt;I would also like to highlight Question #3 to show off how clean writing in a functional style is in Io. The question was:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;3. Write a program to add up all of the numbers in a two-dimensional array.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;No loops needed here - Io has &lt;code&gt;map&lt;/code&gt;, &lt;code&gt;filter&lt;/code&gt;, &lt;code&gt;reduce&lt;/code&gt;, and they mix &lt;strong&gt;well&lt;/strong&gt; with Io&amp;#8217;s syntax:&lt;/p&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='io'&gt;&lt;span class='n'&gt;addUp2DArray&lt;/span&gt; &lt;span class='o'&gt;:=&lt;/span&gt; &lt;span class='k'&gt;method&lt;/span&gt;&lt;span class='o'&gt;(&lt;/span&gt;&lt;span class='n'&gt;array&lt;/span&gt;&lt;span class='o'&gt;,&lt;/span&gt; &lt;span class='n'&gt;array&lt;/span&gt; &lt;span class='n'&gt;flatten&lt;/span&gt; &lt;span class='n'&gt;reduce&lt;/span&gt;&lt;span class='o'&gt;(+))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id='full_solutions'&gt;Full solutions&lt;/h2&gt;

&lt;p&gt;That&amp;#8217;s it for the highlights, but as I mentioned earlier, all of the exercises today were pretty interesting. Here is a nicely formatted version of my solutions to the exercises from Day 2 of Io. The home of the following code is &lt;a href='https://github.com/nickknw/seven-languages-in-seven-weeks/blob/master/week-2-io/day2.io'&gt;on github&lt;/a&gt; with the other exercises. The exercises this week are really worth taking a look at, I encourage you to follow along closely through the rest with me.&lt;/p&gt;
&lt;div id='formatted_solutions'&gt;

&lt;h3&gt;Do:&lt;/h3&gt;

&lt;div class='question'&gt;&lt;b&gt;1.&lt;/b&gt; Write a program to find the nth Fibonacci number. Fib(1) is 1, and fib(4) is 3. As a bonus, solve the problem with recursion and with loops.&lt;/div&gt;


&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='io'&gt;&lt;span class='n'&gt;fib_recur&lt;/span&gt; &lt;span class='o'&gt;:=&lt;/span&gt; &lt;span class='k'&gt;method&lt;/span&gt;&lt;span class='o'&gt;(&lt;/span&gt;&lt;span class='n'&gt;num&lt;/span&gt;&lt;span class='o'&gt;,&lt;/span&gt;
    &lt;span class='k'&gt;if&lt;/span&gt;&lt;span class='o'&gt;(&lt;/span&gt;&lt;span class='n'&gt;num&lt;/span&gt; &lt;span class='o'&gt;&amp;lt;=&lt;/span&gt; &lt;span class='mf'&gt;1&lt;/span&gt;&lt;span class='o'&gt;,&lt;/span&gt; &lt;span class='n'&gt;num&lt;/span&gt;&lt;span class='o'&gt;,&lt;/span&gt; &lt;span class='n'&gt;fib_recur&lt;/span&gt;&lt;span class='o'&gt;(&lt;/span&gt;&lt;span class='n'&gt;num&lt;/span&gt; &lt;span class='o'&gt;-&lt;/span&gt; &lt;span class='mf'&gt;1&lt;/span&gt;&lt;span class='o'&gt;)&lt;/span&gt; &lt;span class='o'&gt;+&lt;/span&gt; &lt;span class='n'&gt;fib_recur&lt;/span&gt;&lt;span class='o'&gt;(&lt;/span&gt;&lt;span class='n'&gt;num&lt;/span&gt; &lt;span class='o'&gt;-&lt;/span&gt; &lt;span class='mf'&gt;2&lt;/span&gt;&lt;span class='o'&gt;)&lt;/span&gt; &lt;span class='o'&gt;)&lt;/span&gt;
&lt;span class='o'&gt;)&lt;/span&gt;

&lt;span class='n'&gt;fib_loop&lt;/span&gt; &lt;span class='o'&gt;:=&lt;/span&gt; &lt;span class='k'&gt;method&lt;/span&gt;&lt;span class='o'&gt;(&lt;/span&gt;&lt;span class='n'&gt;num&lt;/span&gt;&lt;span class='o'&gt;,&lt;/span&gt;
    &lt;span class='n'&gt;old&lt;/span&gt; &lt;span class='o'&gt;:=&lt;/span&gt; &lt;span class='mf'&gt;0&lt;/span&gt;
    &lt;span class='n'&gt;new&lt;/span&gt; &lt;span class='o'&gt;:=&lt;/span&gt; &lt;span class='mf'&gt;1&lt;/span&gt;
    &lt;span class='n'&gt;next&lt;/span&gt; &lt;span class='o'&gt;:=&lt;/span&gt; &lt;span class='mf'&gt;0&lt;/span&gt;
    &lt;span class='k'&gt;for&lt;/span&gt;&lt;span class='o'&gt;(&lt;/span&gt;&lt;span class='n'&gt;i&lt;/span&gt;&lt;span class='o'&gt;,&lt;/span&gt; &lt;span class='n'&gt;num&lt;/span&gt;&lt;span class='o'&gt;,&lt;/span&gt; &lt;span class='mf'&gt;1&lt;/span&gt;&lt;span class='o'&gt;,&lt;/span&gt; &lt;span class='o'&gt;-&lt;/span&gt;&lt;span class='mf'&gt;1&lt;/span&gt;&lt;span class='o'&gt;,&lt;/span&gt;
        &lt;span class='n'&gt;next&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='n'&gt;old&lt;/span&gt; &lt;span class='o'&gt;+&lt;/span&gt; &lt;span class='n'&gt;new&lt;/span&gt;
        &lt;span class='n'&gt;old&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='n'&gt;new&lt;/span&gt;
        &lt;span class='n'&gt;new&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='n'&gt;next&lt;/span&gt;
    &lt;span class='o'&gt;)&lt;/span&gt;
    &lt;span class='n'&gt;old&lt;/span&gt;
&lt;span class='o'&gt;)&lt;/span&gt;

&lt;span class='s'&gt;&amp;quot;Fib 0&amp;quot;&lt;/span&gt; &lt;span class='n'&gt;println&lt;/span&gt;
&lt;span class='n'&gt;fib_recur&lt;/span&gt;&lt;span class='o'&gt;(&lt;/span&gt;&lt;span class='mf'&gt;0&lt;/span&gt;&lt;span class='o'&gt;)&lt;/span&gt; &lt;span class='n'&gt;println&lt;/span&gt;
&lt;span class='n'&gt;fib_loop&lt;/span&gt;&lt;span class='o'&gt;(&lt;/span&gt;&lt;span class='mf'&gt;0&lt;/span&gt;&lt;span class='o'&gt;)&lt;/span&gt; &lt;span class='n'&gt;println&lt;/span&gt;

&lt;span class='s'&gt;&amp;quot;Fib 4&amp;quot;&lt;/span&gt; &lt;span class='n'&gt;println&lt;/span&gt;
&lt;span class='n'&gt;fib_recur&lt;/span&gt;&lt;span class='o'&gt;(&lt;/span&gt;&lt;span class='mf'&gt;4&lt;/span&gt;&lt;span class='o'&gt;)&lt;/span&gt; &lt;span class='n'&gt;println&lt;/span&gt;
&lt;span class='n'&gt;fib_loop&lt;/span&gt;&lt;span class='o'&gt;(&lt;/span&gt;&lt;span class='mf'&gt;4&lt;/span&gt;&lt;span class='o'&gt;)&lt;/span&gt; &lt;span class='n'&gt;println&lt;/span&gt;

&lt;span class='s'&gt;&amp;quot;Fib 8&amp;quot;&lt;/span&gt; &lt;span class='n'&gt;println&lt;/span&gt;
&lt;span class='n'&gt;fib_recur&lt;/span&gt;&lt;span class='o'&gt;(&lt;/span&gt;&lt;span class='mf'&gt;8&lt;/span&gt;&lt;span class='o'&gt;)&lt;/span&gt; &lt;span class='n'&gt;println&lt;/span&gt;
&lt;span class='n'&gt;fib_loop&lt;/span&gt;&lt;span class='o'&gt;(&lt;/span&gt;&lt;span class='mf'&gt;8&lt;/span&gt;&lt;span class='o'&gt;)&lt;/span&gt; &lt;span class='n'&gt;println&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;div class='tiny_title'&gt;Output&lt;/div&gt;


&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='bash'&gt;Fib 0
0
0
Fib 4
3
3
Fib 8
21
21
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;div class='question'&gt;&lt;b&gt;2.&lt;/b&gt; How would you change / to return 0 if the denominator is zero?&lt;/div&gt;


&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='io'&gt;&lt;span class='c1'&gt;# The tricky bit is saving a reference to the old method:&lt;/span&gt;
&lt;span class='n'&gt;Number&lt;/span&gt; &lt;span class='n'&gt;origDiv&lt;/span&gt; &lt;span class='o'&gt;:=&lt;/span&gt; &lt;span class='n'&gt;Number&lt;/span&gt; &lt;span class='n'&gt;getSlot&lt;/span&gt;&lt;span class='o'&gt;(&lt;/span&gt;&lt;span class='s'&gt;&amp;quot;/&amp;quot;&lt;/span&gt;&lt;span class='o'&gt;)&lt;/span&gt;

&lt;span class='c1'&gt;# Overriding the / method is surprisingly straightforward&lt;/span&gt;
&lt;span class='n'&gt;Number&lt;/span&gt; &lt;span class='o'&gt;/&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='k'&gt;method&lt;/span&gt;&lt;span class='o'&gt;(&lt;/span&gt;&lt;span class='n'&gt;denom&lt;/span&gt;&lt;span class='o'&gt;,&lt;/span&gt; &lt;span class='k'&gt;if&lt;/span&gt;&lt;span class='o'&gt;(&lt;/span&gt;&lt;span class='n'&gt;denom&lt;/span&gt; &lt;span class='o'&gt;==&lt;/span&gt; &lt;span class='mf'&gt;0&lt;/span&gt;&lt;span class='o'&gt;,&lt;/span&gt; &lt;span class='mf'&gt;0&lt;/span&gt;&lt;span class='o'&gt;,&lt;/span&gt; &lt;span class='n'&gt;self&lt;/span&gt; &lt;span class='n'&gt;origDiv&lt;/span&gt;&lt;span class='o'&gt;(&lt;/span&gt;&lt;span class='n'&gt;denom&lt;/span&gt;&lt;span class='o'&gt;)))&lt;/span&gt;

&lt;span class='mf'&gt;4&lt;/span&gt; &lt;span class='o'&gt;/&lt;/span&gt; &lt;span class='mf'&gt;2&lt;/span&gt; &lt;span class='n'&gt;println&lt;/span&gt;
&lt;span class='mf'&gt;4&lt;/span&gt; &lt;span class='o'&gt;/&lt;/span&gt; &lt;span class='mf'&gt;0&lt;/span&gt; &lt;span class='n'&gt;println&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;div class='tiny_title'&gt;Output&lt;/div&gt;


&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='bash'&gt;2
0
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;div class='question'&gt;&lt;b&gt;3.&lt;/b&gt; Write a program to add up all of the numbers in a two-dimensional
array.&lt;/div&gt;


&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='io'&gt;&lt;span class='n'&gt;addUp2DArray&lt;/span&gt; &lt;span class='o'&gt;:=&lt;/span&gt; &lt;span class='k'&gt;method&lt;/span&gt;&lt;span class='o'&gt;(&lt;/span&gt;&lt;span class='n'&gt;array&lt;/span&gt;&lt;span class='o'&gt;,&lt;/span&gt; &lt;span class='n'&gt;array&lt;/span&gt; &lt;span class='n'&gt;flatten&lt;/span&gt; &lt;span class='n'&gt;reduce&lt;/span&gt;&lt;span class='o'&gt;(+))&lt;/span&gt;

&lt;span class='n'&gt;addUp2DArray&lt;/span&gt;&lt;span class='o'&gt;(&lt;/span&gt;&lt;span class='nb'&gt;list&lt;/span&gt;&lt;span class='o'&gt;(&lt;/span&gt;&lt;span class='mf'&gt;2&lt;/span&gt;&lt;span class='o'&gt;,&lt;/span&gt;&lt;span class='mf'&gt;3&lt;/span&gt;&lt;span class='o'&gt;,&lt;/span&gt;&lt;span class='mf'&gt;4&lt;/span&gt;&lt;span class='o'&gt;,&lt;/span&gt;&lt;span class='mf'&gt;5&lt;/span&gt;&lt;span class='o'&gt;))&lt;/span&gt; &lt;span class='n'&gt;println&lt;/span&gt;
&lt;span class='n'&gt;addUp2DArray&lt;/span&gt;&lt;span class='o'&gt;(&lt;/span&gt;&lt;span class='nb'&gt;list&lt;/span&gt;&lt;span class='o'&gt;(&lt;/span&gt;&lt;span class='mf'&gt;2&lt;/span&gt;&lt;span class='o'&gt;,&lt;/span&gt;&lt;span class='mf'&gt;3&lt;/span&gt;&lt;span class='o'&gt;,&lt;/span&gt; &lt;span class='nb'&gt;list&lt;/span&gt;&lt;span class='o'&gt;(&lt;/span&gt;&lt;span class='mf'&gt;1&lt;/span&gt;&lt;span class='o'&gt;,&lt;/span&gt;&lt;span class='mf'&gt;1&lt;/span&gt;&lt;span class='o'&gt;,&lt;/span&gt;&lt;span class='mf'&gt;1&lt;/span&gt;&lt;span class='o'&gt;),&lt;/span&gt; &lt;span class='mf'&gt;4&lt;/span&gt;&lt;span class='o'&gt;,&lt;/span&gt;&lt;span class='mf'&gt;5&lt;/span&gt;&lt;span class='o'&gt;))&lt;/span&gt; &lt;span class='n'&gt;println&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;div class='tiny_title'&gt;Output&lt;/div&gt;


&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='bash'&gt;14
17
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;div class='question'&gt;&lt;b&gt;4.&lt;/b&gt; Add a slot called myAverage to a list that computes the average of all the numbers in a list. What happens if there are no numbers in a list? (&lt;b&gt;Bonus:&lt;/b&gt; Raise an Io exception if any item in the list is not a number.)&lt;/div&gt;


&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='io'&gt;&lt;span class='c1'&gt;# Easy way:&lt;/span&gt;
&lt;span class='nb'&gt;List&lt;/span&gt; &lt;span class='n'&gt;myAverage&lt;/span&gt; &lt;span class='o'&gt;:=&lt;/span&gt; &lt;span class='k'&gt;method&lt;/span&gt;&lt;span class='o'&gt;(&lt;/span&gt;&lt;span class='n'&gt;self&lt;/span&gt; &lt;span class='n'&gt;average&lt;/span&gt;&lt;span class='o'&gt;)&lt;/span&gt;

&lt;span class='c1'&gt;# Probably the way he meant (plus bonus):&lt;/span&gt;
&lt;span class='nb'&gt;List&lt;/span&gt; &lt;span class='n'&gt;myAverage2&lt;/span&gt; &lt;span class='o'&gt;:=&lt;/span&gt; &lt;span class='k'&gt;method&lt;/span&gt;&lt;span class='o'&gt;(&lt;/span&gt;
    &lt;span class='n'&gt;containsNonDigit&lt;/span&gt; &lt;span class='o'&gt;:=&lt;/span&gt; &lt;span class='n'&gt;select&lt;/span&gt;&lt;span class='o'&gt;(&lt;/span&gt;&lt;span class='n'&gt;x&lt;/span&gt;&lt;span class='o'&gt;,&lt;/span&gt; &lt;span class='n'&gt;x&lt;/span&gt; &lt;span class='n'&gt;asNumber&lt;/span&gt;&lt;span class='o'&gt;()&lt;/span&gt; &lt;span class='n'&gt;isNan&lt;/span&gt;&lt;span class='o'&gt;())&lt;/span&gt; &lt;span class='n'&gt;size&lt;/span&gt; &lt;span class='o'&gt;&amp;gt;&lt;/span&gt; &lt;span class='mf'&gt;0&lt;/span&gt;
    &lt;span class='k'&gt;if&lt;/span&gt;&lt;span class='o'&gt;(&lt;/span&gt;&lt;span class='n'&gt;containsNonDigit&lt;/span&gt;&lt;span class='o'&gt;,&lt;/span&gt; &lt;span class='n'&gt;Exception&lt;/span&gt; &lt;span class='n'&gt;raise&lt;/span&gt;&lt;span class='o'&gt;(&lt;/span&gt;&lt;span class='s'&gt;&amp;quot;An item in the list is not a number&amp;quot;&lt;/span&gt;&lt;span class='o'&gt;))&lt;/span&gt;

    &lt;span class='n'&gt;flatList&lt;/span&gt; &lt;span class='o'&gt;:=&lt;/span&gt; &lt;span class='n'&gt;self&lt;/span&gt; &lt;span class='n'&gt;flatten&lt;/span&gt;
    &lt;span class='n'&gt;flatList&lt;/span&gt; &lt;span class='n'&gt;reduce&lt;/span&gt;&lt;span class='o'&gt;(+)&lt;/span&gt; &lt;span class='o'&gt;/&lt;/span&gt; &lt;span class='n'&gt;flatList&lt;/span&gt; &lt;span class='n'&gt;size&lt;/span&gt;
&lt;span class='o'&gt;)&lt;/span&gt;

&lt;span class='s'&gt;&amp;quot;Averaging the numbers in a list&amp;quot;&lt;/span&gt; &lt;span class='n'&gt;println&lt;/span&gt;
&lt;span class='nb'&gt;list&lt;/span&gt;&lt;span class='o'&gt;(&lt;/span&gt;&lt;span class='mf'&gt;1&lt;/span&gt;&lt;span class='o'&gt;,&lt;/span&gt;&lt;span class='mf'&gt;2&lt;/span&gt;&lt;span class='o'&gt;,&lt;/span&gt;&lt;span class='mf'&gt;3&lt;/span&gt;&lt;span class='o'&gt;,&lt;/span&gt;&lt;span class='mf'&gt;4&lt;/span&gt;&lt;span class='o'&gt;)&lt;/span&gt; &lt;span class='n'&gt;myAverage2&lt;/span&gt; &lt;span class='n'&gt;println&lt;/span&gt;
&lt;span class='c1'&gt;#list(1,2,3,4,&amp;quot;a&amp;quot;) myAverage2 println&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;div class='tiny_title'&gt;Output&lt;/div&gt;


&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='bash'&gt;2.5
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;div class='question'&gt;&lt;b&gt;5.&lt;/b&gt; Write a prototype for a two-dimensional list. The dim(x,y) method should allocate a list of y lists that are x elements long, set(x, y, value) should set a value, and get(x, y) should return that value.&lt;/div&gt;


&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='io'&gt;&lt;span class='n'&gt;List2D&lt;/span&gt; &lt;span class='o'&gt;:=&lt;/span&gt; &lt;span class='nb'&gt;List&lt;/span&gt; &lt;span class='k'&gt;clone&lt;/span&gt;
&lt;span class='n'&gt;List2D&lt;/span&gt; &lt;span class='n'&gt;transposed&lt;/span&gt; &lt;span class='o'&gt;:=&lt;/span&gt; &lt;span class='no'&gt;false&lt;/span&gt;

&lt;span class='n'&gt;List2D&lt;/span&gt; &lt;span class='n'&gt;dim&lt;/span&gt; &lt;span class='o'&gt;:=&lt;/span&gt; &lt;span class='k'&gt;method&lt;/span&gt;&lt;span class='o'&gt;(&lt;/span&gt;&lt;span class='n'&gt;x&lt;/span&gt;&lt;span class='o'&gt;,&lt;/span&gt; &lt;span class='n'&gt;y&lt;/span&gt;&lt;span class='o'&gt;,&lt;/span&gt;
    &lt;span class='n'&gt;y&lt;/span&gt; &lt;span class='n'&gt;repeat&lt;/span&gt;&lt;span class='o'&gt;(&lt;/span&gt;
        &lt;span class='n'&gt;inner&lt;/span&gt; &lt;span class='o'&gt;:=&lt;/span&gt; &lt;span class='nb'&gt;list&lt;/span&gt;&lt;span class='o'&gt;()&lt;/span&gt;
        &lt;span class='n'&gt;x&lt;/span&gt; &lt;span class='n'&gt;repeat&lt;/span&gt;&lt;span class='o'&gt;(&lt;/span&gt;&lt;span class='n'&gt;inner&lt;/span&gt; &lt;span class='n'&gt;push&lt;/span&gt;&lt;span class='o'&gt;(&lt;/span&gt;&lt;span class='no'&gt;nil&lt;/span&gt;&lt;span class='o'&gt;))&lt;/span&gt;
        &lt;span class='n'&gt;self&lt;/span&gt; &lt;span class='n'&gt;append&lt;/span&gt;&lt;span class='o'&gt;(&lt;/span&gt;&lt;span class='n'&gt;inner&lt;/span&gt;&lt;span class='o'&gt;)&lt;/span&gt;
    &lt;span class='o'&gt;)&lt;/span&gt;
&lt;span class='o'&gt;)&lt;/span&gt;

&lt;span class='c1'&gt;# Hmmm, let&amp;#39;s try this again&lt;/span&gt;

&lt;span class='c1'&gt;# Make sure you have this commit before using this solution&lt;/span&gt;
&lt;span class='c1'&gt;# https://github.com/stevedekorte/io/commit/4907d9d618499daa8973c0db380317678c0abd51&lt;/span&gt;
&lt;span class='n'&gt;List2D&lt;/span&gt; &lt;span class='n'&gt;dim2&lt;/span&gt; &lt;span class='o'&gt;:=&lt;/span&gt; &lt;span class='k'&gt;method&lt;/span&gt;&lt;span class='o'&gt;(&lt;/span&gt;&lt;span class='n'&gt;x&lt;/span&gt;&lt;span class='o'&gt;,&lt;/span&gt; &lt;span class='n'&gt;y&lt;/span&gt;&lt;span class='o'&gt;,&lt;/span&gt;
    &lt;span class='n'&gt;y&lt;/span&gt; &lt;span class='n'&gt;repeat&lt;/span&gt;&lt;span class='o'&gt;(&lt;/span&gt;&lt;span class='n'&gt;self&lt;/span&gt; &lt;span class='n'&gt;append&lt;/span&gt;&lt;span class='o'&gt;(&lt;/span&gt;&lt;span class='n'&gt;Range&lt;/span&gt; &lt;span class='mf'&gt;0&lt;/span&gt; &lt;span class='n'&gt;to&lt;/span&gt;&lt;span class='o'&gt;(&lt;/span&gt;&lt;span class='n'&gt;x&lt;/span&gt;&lt;span class='o'&gt;)&lt;/span&gt; &lt;span class='n'&gt;asList&lt;/span&gt;&lt;span class='o'&gt;()&lt;/span&gt; &lt;span class='n'&gt;map&lt;/span&gt;&lt;span class='o'&gt;(&lt;/span&gt;&lt;span class='no'&gt;nil&lt;/span&gt;&lt;span class='o'&gt;)))&lt;/span&gt;
&lt;span class='o'&gt;)&lt;/span&gt;

&lt;span class='n'&gt;firstMatrix&lt;/span&gt; &lt;span class='o'&gt;:=&lt;/span&gt; &lt;span class='n'&gt;List2D&lt;/span&gt; &lt;span class='k'&gt;clone&lt;/span&gt;
&lt;span class='n'&gt;firstMatrix&lt;/span&gt; &lt;span class='n'&gt;dim&lt;/span&gt;&lt;span class='o'&gt;(&lt;/span&gt;&lt;span class='mf'&gt;6&lt;/span&gt;&lt;span class='o'&gt;,&lt;/span&gt;&lt;span class='mf'&gt;7&lt;/span&gt;&lt;span class='o'&gt;)&lt;/span&gt; &lt;span class='n'&gt;println&lt;/span&gt;
&lt;span class='s'&gt;&amp;quot;&amp;quot;&lt;/span&gt; &lt;span class='n'&gt;println&lt;/span&gt;

&lt;span class='n'&gt;secondMatrix&lt;/span&gt; &lt;span class='o'&gt;:=&lt;/span&gt; &lt;span class='n'&gt;List2D&lt;/span&gt; &lt;span class='k'&gt;clone&lt;/span&gt;
&lt;span class='n'&gt;secondMatrix&lt;/span&gt; &lt;span class='n'&gt;dim2&lt;/span&gt;&lt;span class='o'&gt;(&lt;/span&gt;&lt;span class='mf'&gt;6&lt;/span&gt;&lt;span class='o'&gt;,&lt;/span&gt;&lt;span class='mf'&gt;7&lt;/span&gt;&lt;span class='o'&gt;)&lt;/span&gt; &lt;span class='n'&gt;println&lt;/span&gt;
&lt;span class='s'&gt;&amp;quot;&amp;quot;&lt;/span&gt; &lt;span class='n'&gt;println&lt;/span&gt;

&lt;span class='c1'&gt;# The below will cause infinite loop until you apply the change in the&lt;/span&gt;
&lt;span class='c1'&gt;# commit above&lt;/span&gt;
&lt;span class='n'&gt;testBounds&lt;/span&gt; &lt;span class='o'&gt;:=&lt;/span&gt; &lt;span class='n'&gt;List2D&lt;/span&gt; &lt;span class='k'&gt;clone&lt;/span&gt;
&lt;span class='n'&gt;testBounds&lt;/span&gt; &lt;span class='n'&gt;dim2&lt;/span&gt;&lt;span class='o'&gt;(&lt;/span&gt;&lt;span class='mf'&gt;0&lt;/span&gt;&lt;span class='o'&gt;,&lt;/span&gt; &lt;span class='mf'&gt;2&lt;/span&gt;&lt;span class='o'&gt;)&lt;/span&gt;
&lt;span class='n'&gt;testBounds&lt;/span&gt; &lt;span class='n'&gt;dim2&lt;/span&gt;&lt;span class='o'&gt;(&lt;/span&gt;&lt;span class='mf'&gt;0&lt;/span&gt;&lt;span class='o'&gt;,&lt;/span&gt; &lt;span class='mf'&gt;2&lt;/span&gt;&lt;span class='o'&gt;)&lt;/span&gt;

&lt;span class='n'&gt;List2D&lt;/span&gt; &lt;span class='n'&gt;set&lt;/span&gt; &lt;span class='o'&gt;:=&lt;/span&gt; &lt;span class='k'&gt;method&lt;/span&gt;&lt;span class='o'&gt;(&lt;/span&gt;&lt;span class='n'&gt;x&lt;/span&gt;&lt;span class='o'&gt;,&lt;/span&gt; &lt;span class='n'&gt;y&lt;/span&gt;&lt;span class='o'&gt;,&lt;/span&gt; &lt;span class='n'&gt;value&lt;/span&gt;&lt;span class='o'&gt;,&lt;/span&gt;
    &lt;span class='n'&gt;self&lt;/span&gt; &lt;span class='n'&gt;at&lt;/span&gt;&lt;span class='o'&gt;(&lt;/span&gt;&lt;span class='n'&gt;x&lt;/span&gt;&lt;span class='o'&gt;)&lt;/span&gt; &lt;span class='n'&gt;atPut&lt;/span&gt;&lt;span class='o'&gt;(&lt;/span&gt;&lt;span class='n'&gt;y&lt;/span&gt;&lt;span class='o'&gt;,&lt;/span&gt; &lt;span class='n'&gt;value&lt;/span&gt;&lt;span class='o'&gt;)&lt;/span&gt;
&lt;span class='o'&gt;)&lt;/span&gt;

&lt;span class='n'&gt;List2D&lt;/span&gt; &lt;span class='n'&gt;get&lt;/span&gt; &lt;span class='o'&gt;:=&lt;/span&gt; &lt;span class='k'&gt;method&lt;/span&gt;&lt;span class='o'&gt;(&lt;/span&gt;&lt;span class='n'&gt;x&lt;/span&gt;&lt;span class='o'&gt;,&lt;/span&gt; &lt;span class='n'&gt;y&lt;/span&gt;&lt;span class='o'&gt;,&lt;/span&gt;
    &lt;span class='n'&gt;self&lt;/span&gt; &lt;span class='n'&gt;at&lt;/span&gt;&lt;span class='o'&gt;(&lt;/span&gt;&lt;span class='n'&gt;x&lt;/span&gt;&lt;span class='o'&gt;)&lt;/span&gt; &lt;span class='n'&gt;at&lt;/span&gt;&lt;span class='o'&gt;(&lt;/span&gt;&lt;span class='n'&gt;y&lt;/span&gt;&lt;span class='o'&gt;)&lt;/span&gt;
&lt;span class='o'&gt;)&lt;/span&gt;

&lt;span class='s'&gt;&amp;quot;Setting and getting a matrix&amp;quot;&lt;/span&gt; &lt;span class='n'&gt;println&lt;/span&gt;
&lt;span class='n'&gt;firstMatrix&lt;/span&gt; &lt;span class='n'&gt;set&lt;/span&gt;&lt;span class='o'&gt;(&lt;/span&gt;&lt;span class='mf'&gt;2&lt;/span&gt;&lt;span class='o'&gt;,&lt;/span&gt;&lt;span class='mf'&gt;4&lt;/span&gt;&lt;span class='o'&gt;,&lt;/span&gt;&lt;span class='s'&gt;&amp;quot;asdfad&amp;quot;&lt;/span&gt;&lt;span class='o'&gt;)&lt;/span&gt;
&lt;span class='n'&gt;firstMatrix&lt;/span&gt; &lt;span class='n'&gt;println&lt;/span&gt;
&lt;span class='s'&gt;&amp;quot;&amp;quot;&lt;/span&gt; &lt;span class='n'&gt;println&lt;/span&gt;

&lt;span class='n'&gt;firstMatrix&lt;/span&gt; &lt;span class='n'&gt;get&lt;/span&gt;&lt;span class='o'&gt;(&lt;/span&gt;&lt;span class='mf'&gt;2&lt;/span&gt;&lt;span class='o'&gt;,&lt;/span&gt;&lt;span class='mf'&gt;4&lt;/span&gt;&lt;span class='o'&gt;)&lt;/span&gt; &lt;span class='n'&gt;println&lt;/span&gt;
&lt;span class='n'&gt;firstMatrix&lt;/span&gt; &lt;span class='n'&gt;get&lt;/span&gt;&lt;span class='o'&gt;(&lt;/span&gt;&lt;span class='mf'&gt;1&lt;/span&gt;&lt;span class='o'&gt;,&lt;/span&gt;&lt;span class='mf'&gt;2&lt;/span&gt;&lt;span class='o'&gt;)&lt;/span&gt; &lt;span class='n'&gt;println&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;div class='tiny_title'&gt;Output&lt;/div&gt;


&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='bash'&gt;list&lt;span class='o'&gt;(&lt;/span&gt;list&lt;span class='o'&gt;(&lt;/span&gt;nil, nil, nil, nil, nil, nil&lt;span class='o'&gt;)&lt;/span&gt;, list&lt;span class='o'&gt;(&lt;/span&gt;nil, nil, nil, nil, nil, nil&lt;span class='o'&gt;)&lt;/span&gt;, list&lt;span class='o'&gt;(&lt;/span&gt;nil, nil, nil, nil, nil, nil&lt;span class='o'&gt;)&lt;/span&gt;, list&lt;span class='o'&gt;(&lt;/span&gt;nil, nil, nil, nil, nil, nil&lt;span class='o'&gt;)&lt;/span&gt;, list&lt;span class='o'&gt;(&lt;/span&gt;nil, nil, nil, nil, nil, nil&lt;span class='o'&gt;)&lt;/span&gt;, list&lt;span class='o'&gt;(&lt;/span&gt;nil, nil, nil, nil, nil, nil&lt;span class='o'&gt;)&lt;/span&gt;, list&lt;span class='o'&gt;(&lt;/span&gt;nil, nil, nil, nil, nil, nil&lt;span class='o'&gt;))&lt;/span&gt;

list&lt;span class='o'&gt;(&lt;/span&gt;list&lt;span class='o'&gt;(&lt;/span&gt;nil, nil, nil, nil, nil, nil, nil&lt;span class='o'&gt;)&lt;/span&gt;, list&lt;span class='o'&gt;(&lt;/span&gt;nil, nil, nil, nil, nil, nil, nil&lt;span class='o'&gt;)&lt;/span&gt;, list&lt;span class='o'&gt;(&lt;/span&gt;nil, nil, nil, nil, nil, nil, nil&lt;span class='o'&gt;)&lt;/span&gt;, list&lt;span class='o'&gt;(&lt;/span&gt;nil, nil, nil, nil, nil, nil, nil&lt;span class='o'&gt;)&lt;/span&gt;, list&lt;span class='o'&gt;(&lt;/span&gt;nil, nil, nil, nil, nil, nil, nil&lt;span class='o'&gt;)&lt;/span&gt;, list&lt;span class='o'&gt;(&lt;/span&gt;nil, nil, nil, nil, nil, nil, nil&lt;span class='o'&gt;)&lt;/span&gt;, list&lt;span class='o'&gt;(&lt;/span&gt;nil, nil, nil, nil, nil, nil, nil&lt;span class='o'&gt;))&lt;/span&gt;

Setting and getting a matrix
list&lt;span class='o'&gt;(&lt;/span&gt;list&lt;span class='o'&gt;(&lt;/span&gt;nil, nil, nil, nil, nil, nil&lt;span class='o'&gt;)&lt;/span&gt;, list&lt;span class='o'&gt;(&lt;/span&gt;nil, nil, nil, nil, nil, nil&lt;span class='o'&gt;)&lt;/span&gt;, list&lt;span class='o'&gt;(&lt;/span&gt;nil, nil, nil, nil, asdfad, nil&lt;span class='o'&gt;)&lt;/span&gt;, list&lt;span class='o'&gt;(&lt;/span&gt;nil, nil, nil, nil, nil, nil&lt;span class='o'&gt;)&lt;/span&gt;, list&lt;span class='o'&gt;(&lt;/span&gt;nil, nil, nil, nil, nil, nil&lt;span class='o'&gt;)&lt;/span&gt;, list&lt;span class='o'&gt;(&lt;/span&gt;nil, nil, nil, nil, nil, nil&lt;span class='o'&gt;)&lt;/span&gt;, list&lt;span class='o'&gt;(&lt;/span&gt;nil, nil, nil, nil, nil, nil&lt;span class='o'&gt;))&lt;/span&gt;

asdfad
nil
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;div class='question'&gt;&lt;b&gt;6. Bonus:&lt;/b&gt; Write a transpose method so that (new_matrix get(y, x)) == matrix get(x,y) on the original list&lt;/div&gt;


&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='io'&gt;&lt;span class='n'&gt;flipFirstTwoArgs&lt;/span&gt; &lt;span class='o'&gt;:=&lt;/span&gt; &lt;span class='k'&gt;method&lt;/span&gt;&lt;span class='o'&gt;(&lt;/span&gt;&lt;span class='n'&gt;slotName&lt;/span&gt;&lt;span class='o'&gt;,&lt;/span&gt;
    &lt;span class='n'&gt;self&lt;/span&gt; &lt;span class='n'&gt;getSlot&lt;/span&gt;&lt;span class='o'&gt;(&lt;/span&gt;&lt;span class='n'&gt;slotName&lt;/span&gt;&lt;span class='o'&gt;)&lt;/span&gt; &lt;span class='n'&gt;setArgumentNames&lt;/span&gt;&lt;span class='o'&gt;(&lt;/span&gt; &lt;span class='nb'&gt;list&lt;/span&gt;&lt;span class='o'&gt;(&lt;/span&gt;
        &lt;span class='n'&gt;self&lt;/span&gt; &lt;span class='n'&gt;getSlot&lt;/span&gt;&lt;span class='o'&gt;(&lt;/span&gt;&lt;span class='n'&gt;slotName&lt;/span&gt;&lt;span class='o'&gt;)&lt;/span&gt; &lt;span class='n'&gt;argumentNames&lt;/span&gt; &lt;span class='n'&gt;at&lt;/span&gt;&lt;span class='o'&gt;(&lt;/span&gt;&lt;span class='mf'&gt;1&lt;/span&gt;&lt;span class='o'&gt;),&lt;/span&gt;
        &lt;span class='n'&gt;self&lt;/span&gt; &lt;span class='n'&gt;getSlot&lt;/span&gt;&lt;span class='o'&gt;(&lt;/span&gt;&lt;span class='n'&gt;slotName&lt;/span&gt;&lt;span class='o'&gt;)&lt;/span&gt; &lt;span class='n'&gt;argumentNames&lt;/span&gt; &lt;span class='n'&gt;at&lt;/span&gt;&lt;span class='o'&gt;(&lt;/span&gt;&lt;span class='mf'&gt;0&lt;/span&gt;&lt;span class='o'&gt;),&lt;/span&gt;
        &lt;span class='n'&gt;self&lt;/span&gt; &lt;span class='n'&gt;getSlot&lt;/span&gt;&lt;span class='o'&gt;(&lt;/span&gt;&lt;span class='n'&gt;slotName&lt;/span&gt;&lt;span class='o'&gt;)&lt;/span&gt; &lt;span class='n'&gt;argumentNames&lt;/span&gt; &lt;span class='n'&gt;rest&lt;/span&gt; &lt;span class='n'&gt;rest&lt;/span&gt;
    &lt;span class='o'&gt;)&lt;/span&gt; &lt;span class='n'&gt;flatten&lt;/span&gt;&lt;span class='o'&gt;)&lt;/span&gt;
&lt;span class='o'&gt;)&lt;/span&gt;

&lt;span class='n'&gt;List2D&lt;/span&gt; &lt;span class='n'&gt;transpose&lt;/span&gt; &lt;span class='o'&gt;:=&lt;/span&gt; &lt;span class='k'&gt;method&lt;/span&gt;&lt;span class='o'&gt;(&lt;/span&gt;
    &lt;span class='n'&gt;self&lt;/span&gt; &lt;span class='n'&gt;get&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='n'&gt;flipFirstTwoArgs&lt;/span&gt;&lt;span class='o'&gt;(&lt;/span&gt;&lt;span class='s'&gt;&amp;quot;get&amp;quot;&lt;/span&gt;&lt;span class='o'&gt;)&lt;/span&gt;
    &lt;span class='n'&gt;self&lt;/span&gt; &lt;span class='n'&gt;set&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='n'&gt;flipFirstTwoArgs&lt;/span&gt;&lt;span class='o'&gt;(&lt;/span&gt;&lt;span class='s'&gt;&amp;quot;set&amp;quot;&lt;/span&gt;&lt;span class='o'&gt;)&lt;/span&gt;
&lt;span class='o'&gt;)&lt;/span&gt;

&lt;span class='s'&gt;&amp;quot;2, 4: &amp;quot;&lt;/span&gt; &lt;span class='n'&gt;print&lt;/span&gt;&lt;span class='o'&gt;;&lt;/span&gt; &lt;span class='n'&gt;firstMatrix&lt;/span&gt; &lt;span class='n'&gt;get&lt;/span&gt;&lt;span class='o'&gt;(&lt;/span&gt;&lt;span class='mf'&gt;2&lt;/span&gt;&lt;span class='o'&gt;,&lt;/span&gt;&lt;span class='mf'&gt;4&lt;/span&gt;&lt;span class='o'&gt;)&lt;/span&gt; &lt;span class='n'&gt;println&lt;/span&gt;
&lt;span class='s'&gt;&amp;quot;4, 2: &amp;quot;&lt;/span&gt; &lt;span class='n'&gt;print&lt;/span&gt;&lt;span class='o'&gt;;&lt;/span&gt; &lt;span class='n'&gt;firstMatrix&lt;/span&gt; &lt;span class='n'&gt;get&lt;/span&gt;&lt;span class='o'&gt;(&lt;/span&gt;&lt;span class='mf'&gt;4&lt;/span&gt;&lt;span class='o'&gt;,&lt;/span&gt;&lt;span class='mf'&gt;2&lt;/span&gt;&lt;span class='o'&gt;)&lt;/span&gt; &lt;span class='n'&gt;println&lt;/span&gt;

&lt;span class='s'&gt;&amp;quot;transpose!&amp;quot;&lt;/span&gt; &lt;span class='n'&gt;println&lt;/span&gt;
&lt;span class='n'&gt;firstMatrix&lt;/span&gt; &lt;span class='n'&gt;transpose&lt;/span&gt;

&lt;span class='s'&gt;&amp;quot;2, 4: &amp;quot;&lt;/span&gt; &lt;span class='n'&gt;print&lt;/span&gt;&lt;span class='o'&gt;;&lt;/span&gt; &lt;span class='n'&gt;firstMatrix&lt;/span&gt; &lt;span class='n'&gt;get&lt;/span&gt;&lt;span class='o'&gt;(&lt;/span&gt;&lt;span class='mf'&gt;2&lt;/span&gt;&lt;span class='o'&gt;,&lt;/span&gt;&lt;span class='mf'&gt;4&lt;/span&gt;&lt;span class='o'&gt;)&lt;/span&gt; &lt;span class='n'&gt;println&lt;/span&gt;
&lt;span class='s'&gt;&amp;quot;4, 2: &amp;quot;&lt;/span&gt; &lt;span class='n'&gt;print&lt;/span&gt;&lt;span class='o'&gt;;&lt;/span&gt; &lt;span class='n'&gt;firstMatrix&lt;/span&gt; &lt;span class='n'&gt;get&lt;/span&gt;&lt;span class='o'&gt;(&lt;/span&gt;&lt;span class='mf'&gt;4&lt;/span&gt;&lt;span class='o'&gt;,&lt;/span&gt;&lt;span class='mf'&gt;2&lt;/span&gt;&lt;span class='o'&gt;)&lt;/span&gt; &lt;span class='n'&gt;println&lt;/span&gt;
&lt;span class='s'&gt;&amp;quot;Set 5, 3 to NEW&amp;quot;&lt;/span&gt; &lt;span class='n'&gt;println&lt;/span&gt;&lt;span class='o'&gt;;&lt;/span&gt; &lt;span class='n'&gt;firstMatrix&lt;/span&gt; &lt;span class='n'&gt;set&lt;/span&gt;&lt;span class='o'&gt;(&lt;/span&gt;&lt;span class='mf'&gt;5&lt;/span&gt;&lt;span class='o'&gt;,&lt;/span&gt;&lt;span class='mf'&gt;3&lt;/span&gt;&lt;span class='o'&gt;,&lt;/span&gt; &lt;span class='s'&gt;&amp;quot;NEW&amp;quot;&lt;/span&gt;&lt;span class='o'&gt;)&lt;/span&gt;
&lt;span class='s'&gt;&amp;quot;5, 3: &amp;quot;&lt;/span&gt; &lt;span class='n'&gt;print&lt;/span&gt;&lt;span class='o'&gt;;&lt;/span&gt; &lt;span class='n'&gt;firstMatrix&lt;/span&gt; &lt;span class='n'&gt;get&lt;/span&gt;&lt;span class='o'&gt;(&lt;/span&gt;&lt;span class='mf'&gt;5&lt;/span&gt;&lt;span class='o'&gt;,&lt;/span&gt;&lt;span class='mf'&gt;3&lt;/span&gt;&lt;span class='o'&gt;)&lt;/span&gt; &lt;span class='n'&gt;println&lt;/span&gt;
&lt;span class='s'&gt;&amp;quot;3, 5: &amp;quot;&lt;/span&gt; &lt;span class='n'&gt;print&lt;/span&gt;&lt;span class='o'&gt;;&lt;/span&gt; &lt;span class='n'&gt;firstMatrix&lt;/span&gt; &lt;span class='n'&gt;get&lt;/span&gt;&lt;span class='o'&gt;(&lt;/span&gt;&lt;span class='mf'&gt;3&lt;/span&gt;&lt;span class='o'&gt;,&lt;/span&gt;&lt;span class='mf'&gt;5&lt;/span&gt;&lt;span class='o'&gt;)&lt;/span&gt; &lt;span class='n'&gt;println&lt;/span&gt;

&lt;span class='s'&gt;&amp;quot;transpose again!&amp;quot;&lt;/span&gt; &lt;span class='n'&gt;println&lt;/span&gt;
&lt;span class='n'&gt;firstMatrix&lt;/span&gt; &lt;span class='n'&gt;transpose&lt;/span&gt;

&lt;span class='s'&gt;&amp;quot;2, 4: &amp;quot;&lt;/span&gt; &lt;span class='n'&gt;print&lt;/span&gt;&lt;span class='o'&gt;;&lt;/span&gt; &lt;span class='n'&gt;firstMatrix&lt;/span&gt; &lt;span class='n'&gt;get&lt;/span&gt;&lt;span class='o'&gt;(&lt;/span&gt;&lt;span class='mf'&gt;2&lt;/span&gt;&lt;span class='o'&gt;,&lt;/span&gt;&lt;span class='mf'&gt;4&lt;/span&gt;&lt;span class='o'&gt;)&lt;/span&gt; &lt;span class='n'&gt;println&lt;/span&gt;
&lt;span class='s'&gt;&amp;quot;4, 2: &amp;quot;&lt;/span&gt; &lt;span class='n'&gt;print&lt;/span&gt;&lt;span class='o'&gt;;&lt;/span&gt; &lt;span class='n'&gt;firstMatrix&lt;/span&gt; &lt;span class='n'&gt;get&lt;/span&gt;&lt;span class='o'&gt;(&lt;/span&gt;&lt;span class='mf'&gt;4&lt;/span&gt;&lt;span class='o'&gt;,&lt;/span&gt;&lt;span class='mf'&gt;2&lt;/span&gt;&lt;span class='o'&gt;)&lt;/span&gt; &lt;span class='n'&gt;println&lt;/span&gt;
&lt;span class='s'&gt;&amp;quot;5, 3: &amp;quot;&lt;/span&gt; &lt;span class='n'&gt;print&lt;/span&gt;&lt;span class='o'&gt;;&lt;/span&gt; &lt;span class='n'&gt;firstMatrix&lt;/span&gt; &lt;span class='n'&gt;get&lt;/span&gt;&lt;span class='o'&gt;(&lt;/span&gt;&lt;span class='mf'&gt;5&lt;/span&gt;&lt;span class='o'&gt;,&lt;/span&gt;&lt;span class='mf'&gt;3&lt;/span&gt;&lt;span class='o'&gt;)&lt;/span&gt; &lt;span class='n'&gt;println&lt;/span&gt;
&lt;span class='s'&gt;&amp;quot;3, 5: &amp;quot;&lt;/span&gt; &lt;span class='n'&gt;print&lt;/span&gt;&lt;span class='o'&gt;;&lt;/span&gt; &lt;span class='n'&gt;firstMatrix&lt;/span&gt; &lt;span class='n'&gt;get&lt;/span&gt;&lt;span class='o'&gt;(&lt;/span&gt;&lt;span class='mf'&gt;3&lt;/span&gt;&lt;span class='o'&gt;,&lt;/span&gt;&lt;span class='mf'&gt;5&lt;/span&gt;&lt;span class='o'&gt;)&lt;/span&gt; &lt;span class='n'&gt;println&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;div class='tiny_title'&gt;Output&lt;/div&gt;


&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='bash'&gt;2, 4: asdfad
4, 2: nil
transpose!
2, 4: nil
4, 2: asdfad
Set 5, 3 to NEW
5, 3: NEW
3, 5: nil
transpose again!
2, 4: asdfad
4, 2: nil
5, 3: nil
3, 5: NEW
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;div class='question'&gt;&lt;b&gt;7.&lt;/b&gt; Write the matrix to a file, and read a matrix from a file.&lt;/div&gt;


&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='io'&gt;&lt;span class='n'&gt;file&lt;/span&gt; &lt;span class='o'&gt;:=&lt;/span&gt; &lt;span class='nb'&gt;File&lt;/span&gt; &lt;span class='n'&gt;with&lt;/span&gt;&lt;span class='o'&gt;(&lt;/span&gt;&lt;span class='s'&gt;&amp;quot;matrix.txt&amp;quot;&lt;/span&gt;&lt;span class='o'&gt;)&lt;/span&gt;
&lt;span class='n'&gt;file&lt;/span&gt; &lt;span class='n'&gt;remove&lt;/span&gt;
&lt;span class='n'&gt;file&lt;/span&gt; &lt;span class='n'&gt;openForUpdating&lt;/span&gt;
&lt;span class='n'&gt;file&lt;/span&gt; &lt;span class='n'&gt;write&lt;/span&gt;&lt;span class='o'&gt;(&lt;/span&gt;&lt;span class='n'&gt;firstMatrix&lt;/span&gt; &lt;span class='n'&gt;join&lt;/span&gt;&lt;span class='o'&gt;(&lt;/span&gt;&lt;span class='s'&gt;&amp;quot;, &amp;quot;&lt;/span&gt;&lt;span class='o'&gt;))&lt;/span&gt;
&lt;span class='n'&gt;file&lt;/span&gt; &lt;span class='n'&gt;close&lt;/span&gt;

&lt;span class='n'&gt;file&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='nb'&gt;File&lt;/span&gt; &lt;span class='n'&gt;with&lt;/span&gt;&lt;span class='o'&gt;(&lt;/span&gt;&lt;span class='s'&gt;&amp;quot;matrix.txt&amp;quot;&lt;/span&gt;&lt;span class='o'&gt;)&lt;/span&gt;
&lt;span class='n'&gt;file&lt;/span&gt; &lt;span class='n'&gt;openForReading&lt;/span&gt;
&lt;span class='n'&gt;lines&lt;/span&gt; &lt;span class='o'&gt;:=&lt;/span&gt; &lt;span class='n'&gt;file&lt;/span&gt; &lt;span class='n'&gt;readLines&lt;/span&gt;
&lt;span class='n'&gt;file&lt;/span&gt; &lt;span class='n'&gt;close&lt;/span&gt;
&lt;span class='n'&gt;lines&lt;/span&gt; &lt;span class='n'&gt;at&lt;/span&gt;&lt;span class='o'&gt;(&lt;/span&gt;&lt;span class='mf'&gt;0&lt;/span&gt;&lt;span class='o'&gt;)&lt;/span&gt; &lt;span class='n'&gt;type&lt;/span&gt; &lt;span class='n'&gt;println&lt;/span&gt;
&lt;span class='n'&gt;matrixFromFile&lt;/span&gt; &lt;span class='o'&gt;:=&lt;/span&gt; &lt;span class='n'&gt;lines&lt;/span&gt; &lt;span class='n'&gt;at&lt;/span&gt;&lt;span class='o'&gt;(&lt;/span&gt;&lt;span class='mf'&gt;0&lt;/span&gt;&lt;span class='o'&gt;)&lt;/span&gt; &lt;span class='n'&gt;split&lt;/span&gt;&lt;span class='o'&gt;(&lt;/span&gt;&lt;span class='s'&gt;&amp;quot;, &amp;quot;&lt;/span&gt;&lt;span class='o'&gt;)&lt;/span&gt;
&lt;span class='n'&gt;matrixFromFile&lt;/span&gt; &lt;span class='n'&gt;type&lt;/span&gt; &lt;span class='n'&gt;println&lt;/span&gt;
&lt;span class='n'&gt;matrixFromFile&lt;/span&gt; &lt;span class='n'&gt;println&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;div class='tiny_title'&gt;Output&lt;/div&gt;


&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='bash'&gt;Sequence
List
list&lt;span class='o'&gt;(&lt;/span&gt;list&lt;span class='o'&gt;(&lt;/span&gt;nil, nil, nil, nil, nil, nil&lt;span class='o'&gt;)&lt;/span&gt;, list&lt;span class='o'&gt;(&lt;/span&gt;nil, nil, nil, nil, nil, nil&lt;span class='o'&gt;)&lt;/span&gt;, list&lt;span class='o'&gt;(&lt;/span&gt;nil, nil, nil, nil, asdfad, nil&lt;span class='o'&gt;)&lt;/span&gt;, list&lt;span class='o'&gt;(&lt;/span&gt;nil, nil, nil, nil, nil, NEW&lt;span class='o'&gt;)&lt;/span&gt;, list&lt;span class='o'&gt;(&lt;/span&gt;nil, nil, nil, nil, nil, nil&lt;span class='o'&gt;)&lt;/span&gt;, list&lt;span class='o'&gt;(&lt;/span&gt;nil, nil, nil, nil, nil, nil&lt;span class='o'&gt;)&lt;/span&gt;, list&lt;span class='o'&gt;(&lt;/span&gt;nil, nil, nil, nil, nil, nil&lt;span class='o'&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;div class='question'&gt;&lt;b&gt;8.&lt;/b&gt; Write a program that gives you ten tries to guess a random number from 1-100. If you would like, give a hint of &quot;hotter&quot; or &quot;colder&quot; after the first guess.&lt;/div&gt;


&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='io'&gt;&lt;span class='n'&gt;randomNumber&lt;/span&gt; &lt;span class='o'&gt;:=&lt;/span&gt; &lt;span class='o'&gt;((&lt;/span&gt;&lt;span class='n'&gt;Random&lt;/span&gt; &lt;span class='n'&gt;value&lt;/span&gt;&lt;span class='o'&gt;)&lt;/span&gt; &lt;span class='o'&gt;*&lt;/span&gt; &lt;span class='mf'&gt;100&lt;/span&gt; &lt;span class='o'&gt;+&lt;/span&gt; &lt;span class='mf'&gt;1&lt;/span&gt;&lt;span class='o'&gt;)&lt;/span&gt; &lt;span class='n'&gt;floor&lt;/span&gt;

&lt;span class='n'&gt;i&lt;/span&gt; &lt;span class='o'&gt;:=&lt;/span&gt; &lt;span class='mf'&gt;0&lt;/span&gt;
&lt;span class='n'&gt;guess&lt;/span&gt; &lt;span class='o'&gt;:=&lt;/span&gt; &lt;span class='mf'&gt;0&lt;/span&gt;
&lt;span class='n'&gt;while&lt;/span&gt;&lt;span class='o'&gt;(&lt;/span&gt;&lt;span class='n'&gt;i&lt;/span&gt; &lt;span class='o'&gt;&amp;lt;&lt;/span&gt; &lt;span class='mf'&gt;10&lt;/span&gt; &lt;span class='n'&gt;and&lt;/span&gt; &lt;span class='n'&gt;guess&lt;/span&gt; &lt;span class='o'&gt;!=&lt;/span&gt; &lt;span class='n'&gt;randomNumber&lt;/span&gt;&lt;span class='o'&gt;,&lt;/span&gt;
    &lt;span class='o'&gt;(&lt;/span&gt;&lt;span class='s'&gt;&amp;quot;Guess a number between 1 and 100: (guess &amp;quot;&lt;/span&gt; &lt;span class='o'&gt;..&lt;/span&gt; &lt;span class='n'&gt;i&lt;/span&gt;&lt;span class='o'&gt;+&lt;/span&gt;&lt;span class='mf'&gt;1&lt;/span&gt; &lt;span class='o'&gt;..&lt;/span&gt; &lt;span class='s'&gt;&amp;quot; of 10): &amp;quot;&lt;/span&gt;&lt;span class='o'&gt;)&lt;/span&gt; &lt;span class='n'&gt;print&lt;/span&gt;
    &lt;span class='n'&gt;guess&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='n'&gt;ReadLine&lt;/span&gt; &lt;span class='n'&gt;readLine&lt;/span&gt;
    &lt;span class='n'&gt;guess&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='k'&gt;if&lt;/span&gt;&lt;span class='o'&gt;(&lt;/span&gt;&lt;span class='n'&gt;guess&lt;/span&gt; &lt;span class='n'&gt;asNumber&lt;/span&gt; &lt;span class='n'&gt;isNan&lt;/span&gt;&lt;span class='o'&gt;,&lt;/span&gt; &lt;span class='mf'&gt;0&lt;/span&gt;&lt;span class='o'&gt;,&lt;/span&gt; &lt;span class='n'&gt;guess&lt;/span&gt; &lt;span class='n'&gt;asNumber&lt;/span&gt;&lt;span class='o'&gt;)&lt;/span&gt;
    &lt;span class='k'&gt;if&lt;/span&gt;&lt;span class='o'&gt;(&lt;/span&gt;&lt;span class='n'&gt;guess&lt;/span&gt; &lt;span class='o'&gt;&amp;gt;&lt;/span&gt; &lt;span class='n'&gt;randomNumber&lt;/span&gt;&lt;span class='o'&gt;,&lt;/span&gt; &lt;span class='s'&gt;&amp;quot;Too high&amp;quot;&lt;/span&gt; &lt;span class='n'&gt;println&lt;/span&gt;&lt;span class='o'&gt;)&lt;/span&gt;
    &lt;span class='k'&gt;if&lt;/span&gt;&lt;span class='o'&gt;(&lt;/span&gt;&lt;span class='n'&gt;guess&lt;/span&gt; &lt;span class='o'&gt;&amp;lt;&lt;/span&gt; &lt;span class='n'&gt;randomNumber&lt;/span&gt;&lt;span class='o'&gt;,&lt;/span&gt; &lt;span class='s'&gt;&amp;quot;Too low&amp;quot;&lt;/span&gt; &lt;span class='n'&gt;println&lt;/span&gt;&lt;span class='o'&gt;)&lt;/span&gt;
    &lt;span class='n'&gt;i&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='n'&gt;i&lt;/span&gt; &lt;span class='o'&gt;+&lt;/span&gt; &lt;span class='mf'&gt;1&lt;/span&gt;
&lt;span class='o'&gt;)&lt;/span&gt;

&lt;span class='k'&gt;if&lt;/span&gt;&lt;span class='o'&gt;(&lt;/span&gt;&lt;span class='n'&gt;guess&lt;/span&gt; &lt;span class='o'&gt;==&lt;/span&gt; &lt;span class='n'&gt;randomNumber&lt;/span&gt;&lt;span class='o'&gt;,&lt;/span&gt;
    &lt;span class='s'&gt;&amp;quot;Congrats, you did it!&amp;quot;&lt;/span&gt; &lt;span class='n'&gt;println&lt;/span&gt;&lt;span class='o'&gt;,&lt;/span&gt;
    &lt;span class='s'&gt;&amp;quot;Too bad, maybe next time&amp;quot;&lt;/span&gt; &lt;span class='n'&gt;println&lt;/span&gt;&lt;span class='o'&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;div class='tiny_title'&gt;Output&lt;/div&gt;


&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='bash'&gt;Guess a number between 1 and 100: &lt;span class='o'&gt;(&lt;/span&gt;guess 1 of 10&lt;span class='o'&gt;)&lt;/span&gt;: 50
Too high
Guess a number between 1 and 100: &lt;span class='o'&gt;(&lt;/span&gt;guess 2 of 10&lt;span class='o'&gt;)&lt;/span&gt;: 25
Too low
Guess a number between 1 and 100: &lt;span class='o'&gt;(&lt;/span&gt;guess 3 of 10&lt;span class='o'&gt;)&lt;/span&gt;: 38
Too low
Guess a number between 1 and 100: &lt;span class='o'&gt;(&lt;/span&gt;guess 4 of 10&lt;span class='o'&gt;)&lt;/span&gt;: 44
Too high
Guess a number between 1 and 100: &lt;span class='o'&gt;(&lt;/span&gt;guess 5 of 10&lt;span class='o'&gt;)&lt;/span&gt;: 41
Too low
Guess a number between 1 and 100: &lt;span class='o'&gt;(&lt;/span&gt;guess 6 of 10&lt;span class='o'&gt;)&lt;/span&gt;: 43
Congrats, you did it!
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;/div&gt;
&lt;p&gt;Next in this series: &lt;a href='/blog/2012/01/16/seven-languages-week-2-day-3/'&gt;Day 3 of Io&lt;/a&gt;&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>Transposing a matrix in Io</title>
   <link href="http://nickknowlson.com/blog/2011/12/30/transposing-a-matrix-in-io/"/>
   <updated>2011-12-30T00:00:00-08:00</updated>
   <id>http://nickknowlson.com/blog/2011/12/30/transposing-a-matrix-in-io</id>
   <content type="html">&lt;p&gt;While doing the exercises from Seven Languages In Seven Weeks, I came up with a neat solution to transposing a matrix that was encouraged by Io&amp;#8217;s flexibility and free-wheeling nature. Instead of creating a new transposed matrix or attempting a complicated in-place transpose, I did something that executes in O(1), uses a negligible amount of memory, and is very short and simple.&lt;/p&gt;

&lt;p&gt;What? How is it possible to transpose a matrix of 1,000,000 elements in the same time it takes to transpose a matrix of 4?&lt;/p&gt;

&lt;p&gt;By cheating! I &lt;strong&gt;don&amp;#8217;t&lt;/strong&gt; transpose the matrix, I modify the element accessor methods so that they interpret the &lt;code&gt;x&lt;/code&gt; parameter as &lt;code&gt;y&lt;/code&gt;, and vice versa. To my dismay, I later found that &lt;a href='http://en.wikipedia.org/wiki/Transpose#Implementation_of_matrix_transposition_on_computers'&gt;this isn&amp;#8217;t a new approach&lt;/a&gt; to solving this problem.&lt;/p&gt;

&lt;p&gt;However, my implementation in Io still has something going for it. Because of Io&amp;#8217;s extreme malleability, I can write my &lt;code&gt;transpose&lt;/code&gt; method such that calling it permanently swaps the argument order in the &lt;code&gt;get&lt;/code&gt; and &lt;code&gt;set&lt;/code&gt; methods of that individual matrix object. In most other languages &lt;a class='super' href='#footnote-1' id='footnote-1-link'&gt;[1]&lt;/a&gt; , writing this kind of fake transpose would require keeping track of state with if statements to check if a given matrix is currently &amp;#8216;transposed&amp;#8217; or not. This is, conceptually, nonsense: transposing is something you &lt;em&gt;do to&lt;/em&gt; matrices, not a &lt;em&gt;property&lt;/em&gt; of them.&lt;/p&gt;

&lt;p&gt;Io lets you write this fake transpose in a way that is fun, short, and elegant.&lt;/p&gt;

&lt;h2 id='the_solution'&gt;The Solution&lt;/h2&gt;

&lt;p&gt;Here is the problem statement from the book:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Write a transpose method so that (new_matrix get(y, x)) == matrix get(x,y) on the original list&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Before we get started, this is what the final solution looks like. Try and become a little familiar with this before we move on (it will all be explained in detail below, don&amp;#8217;t worry).&lt;/p&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='io'&gt;&lt;span class='n'&gt;flipFirstTwoArgs&lt;/span&gt; &lt;span class='o'&gt;:=&lt;/span&gt; &lt;span class='k'&gt;method&lt;/span&gt;&lt;span class='o'&gt;(&lt;/span&gt;&lt;span class='n'&gt;slotName&lt;/span&gt;&lt;span class='o'&gt;,&lt;/span&gt;
    &lt;span class='n'&gt;self&lt;/span&gt; &lt;span class='n'&gt;getSlot&lt;/span&gt;&lt;span class='o'&gt;(&lt;/span&gt;&lt;span class='n'&gt;slotName&lt;/span&gt;&lt;span class='o'&gt;)&lt;/span&gt; &lt;span class='n'&gt;setArgumentNames&lt;/span&gt;&lt;span class='o'&gt;(&lt;/span&gt; &lt;span class='nb'&gt;list&lt;/span&gt;&lt;span class='o'&gt;(&lt;/span&gt;
        &lt;span class='n'&gt;self&lt;/span&gt; &lt;span class='n'&gt;getSlot&lt;/span&gt;&lt;span class='o'&gt;(&lt;/span&gt;&lt;span class='n'&gt;slotName&lt;/span&gt;&lt;span class='o'&gt;)&lt;/span&gt; &lt;span class='n'&gt;argumentNames&lt;/span&gt; &lt;span class='n'&gt;at&lt;/span&gt;&lt;span class='o'&gt;(&lt;/span&gt;&lt;span class='mf'&gt;1&lt;/span&gt;&lt;span class='o'&gt;),&lt;/span&gt;
        &lt;span class='n'&gt;self&lt;/span&gt; &lt;span class='n'&gt;getSlot&lt;/span&gt;&lt;span class='o'&gt;(&lt;/span&gt;&lt;span class='n'&gt;slotName&lt;/span&gt;&lt;span class='o'&gt;)&lt;/span&gt; &lt;span class='n'&gt;argumentNames&lt;/span&gt; &lt;span class='n'&gt;at&lt;/span&gt;&lt;span class='o'&gt;(&lt;/span&gt;&lt;span class='mf'&gt;0&lt;/span&gt;&lt;span class='o'&gt;),&lt;/span&gt;
        &lt;span class='n'&gt;self&lt;/span&gt; &lt;span class='n'&gt;getSlot&lt;/span&gt;&lt;span class='o'&gt;(&lt;/span&gt;&lt;span class='n'&gt;slotName&lt;/span&gt;&lt;span class='o'&gt;)&lt;/span&gt; &lt;span class='n'&gt;argumentNames&lt;/span&gt; &lt;span class='n'&gt;rest&lt;/span&gt; &lt;span class='n'&gt;rest&lt;/span&gt;
    &lt;span class='o'&gt;)&lt;/span&gt; &lt;span class='n'&gt;flatten&lt;/span&gt;&lt;span class='o'&gt;)&lt;/span&gt;
&lt;span class='o'&gt;)&lt;/span&gt;

&lt;span class='n'&gt;List2D&lt;/span&gt; &lt;span class='n'&gt;transpose&lt;/span&gt; &lt;span class='o'&gt;:=&lt;/span&gt; &lt;span class='k'&gt;method&lt;/span&gt;&lt;span class='o'&gt;(&lt;/span&gt;
    &lt;span class='n'&gt;self&lt;/span&gt; &lt;span class='n'&gt;get&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='n'&gt;flipFirstTwoArgs&lt;/span&gt;&lt;span class='o'&gt;(&lt;/span&gt;&lt;span class='s'&gt;&amp;quot;get&amp;quot;&lt;/span&gt;&lt;span class='o'&gt;)&lt;/span&gt;
    &lt;span class='n'&gt;self&lt;/span&gt; &lt;span class='n'&gt;set&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='n'&gt;flipFirstTwoArgs&lt;/span&gt;&lt;span class='o'&gt;(&lt;/span&gt;&lt;span class='s'&gt;&amp;quot;set&amp;quot;&lt;/span&gt;&lt;span class='o'&gt;)&lt;/span&gt;
&lt;span class='o'&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;List2D is a simple matrix prototype from the previous exercise. It is the thing that is being transposed.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;transpose&lt;/code&gt; method itself is simple enough: most of the heavy lifting is done in a helper method I created, &lt;code&gt;flipFirstTwoArgs&lt;/code&gt;. From its name and the name of its argument, we can tell this method is saying: &amp;#8220;give me the name of a slot that holds a method and I will flip the first two arguments of that method&amp;#8221;.&lt;/p&gt;

&lt;p&gt;Okay. So, how?&lt;/p&gt;

&lt;h2 id='the_explanation'&gt;The Explanation&lt;/h2&gt;

&lt;p&gt;The following line of code gets the method we are going to modify and sets the names of its arguments.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Line 2:&lt;/strong&gt;&lt;/p&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='io'&gt;    &lt;span class='n'&gt;self&lt;/span&gt; &lt;span class='n'&gt;getSlot&lt;/span&gt;&lt;span class='o'&gt;(&lt;/span&gt;&lt;span class='n'&gt;slotName&lt;/span&gt;&lt;span class='o'&gt;)&lt;/span&gt; &lt;span class='n'&gt;setArgumentNames&lt;/span&gt;&lt;span class='o'&gt;(&lt;/span&gt; 
        &lt;span class='c1'&gt;#list of argument names goes here &lt;/span&gt;
    &lt;span class='o'&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;For a concrete example, if I just wanted to change the argument names for my &amp;#8220;get&amp;#8221; method from get(x, y) to get(y, x) I could hardcode in some values and call it like this:&lt;/p&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='io'&gt;    &lt;span class='n'&gt;self&lt;/span&gt; &lt;span class='n'&gt;getSlot&lt;/span&gt;&lt;span class='o'&gt;(&lt;/span&gt;&lt;span class='s'&gt;&amp;quot;get&amp;quot;&lt;/span&gt;&lt;span class='o'&gt;)&lt;/span&gt; &lt;span class='n'&gt;setArgumentNames&lt;/span&gt;&lt;span class='o'&gt;(&lt;/span&gt;
        &lt;span class='nb'&gt;list&lt;/span&gt;&lt;span class='o'&gt;(&lt;/span&gt;&lt;span class='s'&gt;&amp;quot;y&amp;quot;&lt;/span&gt;&lt;span class='o'&gt;,&lt;/span&gt; &lt;span class='s'&gt;&amp;quot;x&amp;quot;&lt;/span&gt;&lt;span class='o'&gt;)&lt;/span&gt;
    &lt;span class='o'&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;But that wouldn&amp;#8217;t quite be fancy enough. I&amp;#8217;d rather write a method that would let me swap the first two arguments of &lt;strong&gt;any&lt;/strong&gt; method. So, going back to the snippet above, that&amp;#8217;s what the next two lines do:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Lines 3-4:&lt;/strong&gt;&lt;/p&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='io'&gt;    &lt;span class='n'&gt;self&lt;/span&gt; &lt;span class='n'&gt;getSlot&lt;/span&gt;&lt;span class='o'&gt;(&lt;/span&gt;&lt;span class='n'&gt;slotName&lt;/span&gt;&lt;span class='o'&gt;)&lt;/span&gt; &lt;span class='n'&gt;argumentNames&lt;/span&gt; &lt;span class='n'&gt;at&lt;/span&gt;&lt;span class='o'&gt;(&lt;/span&gt;&lt;span class='mf'&gt;1&lt;/span&gt;&lt;span class='o'&gt;),&lt;/span&gt;
    &lt;span class='n'&gt;self&lt;/span&gt; &lt;span class='n'&gt;getSlot&lt;/span&gt;&lt;span class='o'&gt;(&lt;/span&gt;&lt;span class='n'&gt;slotName&lt;/span&gt;&lt;span class='o'&gt;)&lt;/span&gt; &lt;span class='n'&gt;argumentNames&lt;/span&gt; &lt;span class='n'&gt;at&lt;/span&gt;&lt;span class='o'&gt;(&lt;/span&gt;&lt;span class='mf'&gt;0&lt;/span&gt;&lt;span class='o'&gt;),&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;If I wanted to keep the arguments in the same order I would have put the &lt;code&gt;0&lt;/code&gt; in the first line, then the &lt;code&gt;1&lt;/code&gt; in the second line. Make sense so far?&lt;/p&gt;

&lt;p&gt;I could have left it here, but then what would happen if I told it to change a method that looked like &lt;code&gt;doSomething(x, y, z)&lt;/code&gt;? It would take the argument at position &lt;code&gt;1&lt;/code&gt;, then the argument at position &lt;code&gt;0&lt;/code&gt;. The &lt;code&gt;z&lt;/code&gt; would get discarded and that method wouldn&amp;#8217;t be very useful anymore. Hence the next line:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Line 5:&lt;/strong&gt;&lt;/p&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='io'&gt;    &lt;span class='n'&gt;self&lt;/span&gt; &lt;span class='n'&gt;getSlot&lt;/span&gt;&lt;span class='o'&gt;(&lt;/span&gt;&lt;span class='n'&gt;slotName&lt;/span&gt;&lt;span class='o'&gt;)&lt;/span&gt; &lt;span class='n'&gt;argumentNames&lt;/span&gt; &lt;span class='n'&gt;rest&lt;/span&gt; &lt;span class='n'&gt;rest&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;rest&lt;/code&gt; is Io&amp;#8217;s version of &lt;code&gt;cdr&lt;/code&gt; or &lt;code&gt;tail&lt;/code&gt;. It is a method that returns everything except for the first element of a list. So if you call &lt;code&gt;rest&lt;/code&gt; on the result of &lt;code&gt;rest&lt;/code&gt; you get a list that has all its elements except for the first two.&lt;/p&gt;

&lt;p&gt;Let&amp;#8217;s recap. If I call this method we&amp;#8217;re defining with my fictitious &lt;code&gt;doSomething(x, y, z)&lt;/code&gt; method as the argument, these previous lines would resolve into:&lt;/p&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='io'&gt;    &lt;span class='n'&gt;self&lt;/span&gt; &lt;span class='n'&gt;getSlot&lt;/span&gt;&lt;span class='o'&gt;(&lt;/span&gt;&lt;span class='s'&gt;&amp;quot;doSomething&amp;quot;&lt;/span&gt;&lt;span class='o'&gt;)&lt;/span&gt; &lt;span class='n'&gt;setArgumentNames&lt;/span&gt;&lt;span class='o'&gt;(&lt;/span&gt; &lt;span class='nb'&gt;list&lt;/span&gt;&lt;span class='o'&gt;(&lt;/span&gt;
        &lt;span class='s'&gt;&amp;quot;y&amp;quot;&lt;/span&gt;&lt;span class='o'&gt;,&lt;/span&gt; 
        &lt;span class='s'&gt;&amp;quot;x&amp;quot;&lt;/span&gt;&lt;span class='o'&gt;,&lt;/span&gt; 
        &lt;span class='nb'&gt;list&lt;/span&gt;&lt;span class='o'&gt;(&lt;/span&gt;&lt;span class='s'&gt;&amp;quot;z&amp;quot;&lt;/span&gt;&lt;span class='o'&gt;)&lt;/span&gt;
    &lt;span class='o'&gt;)&lt;/span&gt; &lt;span class='o'&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;That&amp;#8217;s not quite right, &lt;code&gt;setArgumentNames&lt;/code&gt; is expecting a simple flat list, none of this nested list stuff. So let&amp;#8217;s flatten the list of argument names before giving it to &lt;code&gt;setArgumentNames&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Line 6:&lt;/strong&gt;&lt;/p&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='io'&gt;    &lt;span class='o'&gt;)&lt;/span&gt; &lt;span class='n'&gt;flatten&lt;/span&gt; &lt;span class='o'&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;If we apply it to the &lt;code&gt;doSomething&lt;/code&gt; example, the code now looks like this:&lt;/p&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='io'&gt;    &lt;span class='n'&gt;self&lt;/span&gt; &lt;span class='n'&gt;getSlot&lt;/span&gt;&lt;span class='o'&gt;(&lt;/span&gt;&lt;span class='s'&gt;&amp;quot;doSomething&amp;quot;&lt;/span&gt;&lt;span class='o'&gt;)&lt;/span&gt; &lt;span class='n'&gt;setArgumentNames&lt;/span&gt;&lt;span class='o'&gt;(&lt;/span&gt; &lt;span class='nb'&gt;list&lt;/span&gt;&lt;span class='o'&gt;(&lt;/span&gt;
        &lt;span class='s'&gt;&amp;quot;y&amp;quot;&lt;/span&gt;&lt;span class='o'&gt;,&lt;/span&gt; 
        &lt;span class='s'&gt;&amp;quot;x&amp;quot;&lt;/span&gt;&lt;span class='o'&gt;,&lt;/span&gt; 
        &lt;span class='nb'&gt;list&lt;/span&gt;&lt;span class='o'&gt;(&lt;/span&gt;&lt;span class='s'&gt;&amp;quot;z&amp;quot;&lt;/span&gt;&lt;span class='o'&gt;)&lt;/span&gt;
    &lt;span class='o'&gt;)&lt;/span&gt; &lt;span class='n'&gt;flatten&lt;/span&gt; &lt;span class='o'&gt;)&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Which would end up resolving into:&lt;/p&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='io'&gt;    &lt;span class='n'&gt;self&lt;/span&gt; &lt;span class='n'&gt;getSlot&lt;/span&gt;&lt;span class='o'&gt;(&lt;/span&gt;&lt;span class='s'&gt;&amp;quot;doSomething&amp;quot;&lt;/span&gt;&lt;span class='o'&gt;)&lt;/span&gt; &lt;span class='n'&gt;setArgumentNames&lt;/span&gt;&lt;span class='o'&gt;(&lt;/span&gt;
        &lt;span class='nb'&gt;list&lt;/span&gt;&lt;span class='o'&gt;(&lt;/span&gt;&lt;span class='s'&gt;&amp;quot;y&amp;quot;&lt;/span&gt;&lt;span class='o'&gt;,&lt;/span&gt; &lt;span class='s'&gt;&amp;quot;x&amp;quot;&lt;/span&gt;&lt;span class='o'&gt;,&lt;/span&gt; &lt;span class='s'&gt;&amp;quot;z&amp;quot;&lt;/span&gt;&lt;span class='o'&gt;)&lt;/span&gt; 
    &lt;span class='o'&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;There, much better. And that explains the last line!&lt;/p&gt;

&lt;h2 id='wrapup'&gt;Wrap-up&lt;/h2&gt;

&lt;p&gt;Now, putting back together all the lines I&amp;#8217;ve explained, here is the full solution again:&lt;/p&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='io'&gt;&lt;span class='n'&gt;flipFirstTwoArgs&lt;/span&gt; &lt;span class='o'&gt;:=&lt;/span&gt; &lt;span class='k'&gt;method&lt;/span&gt;&lt;span class='o'&gt;(&lt;/span&gt;&lt;span class='n'&gt;slotName&lt;/span&gt;&lt;span class='o'&gt;,&lt;/span&gt;
    &lt;span class='n'&gt;self&lt;/span&gt; &lt;span class='n'&gt;getSlot&lt;/span&gt;&lt;span class='o'&gt;(&lt;/span&gt;&lt;span class='n'&gt;slotName&lt;/span&gt;&lt;span class='o'&gt;)&lt;/span&gt; &lt;span class='n'&gt;setArgumentNames&lt;/span&gt;&lt;span class='o'&gt;(&lt;/span&gt; &lt;span class='nb'&gt;list&lt;/span&gt;&lt;span class='o'&gt;(&lt;/span&gt;
        &lt;span class='n'&gt;self&lt;/span&gt; &lt;span class='n'&gt;getSlot&lt;/span&gt;&lt;span class='o'&gt;(&lt;/span&gt;&lt;span class='n'&gt;slotName&lt;/span&gt;&lt;span class='o'&gt;)&lt;/span&gt; &lt;span class='n'&gt;argumentNames&lt;/span&gt; &lt;span class='n'&gt;at&lt;/span&gt;&lt;span class='o'&gt;(&lt;/span&gt;&lt;span class='mf'&gt;1&lt;/span&gt;&lt;span class='o'&gt;),&lt;/span&gt;
        &lt;span class='n'&gt;self&lt;/span&gt; &lt;span class='n'&gt;getSlot&lt;/span&gt;&lt;span class='o'&gt;(&lt;/span&gt;&lt;span class='n'&gt;slotName&lt;/span&gt;&lt;span class='o'&gt;)&lt;/span&gt; &lt;span class='n'&gt;argumentNames&lt;/span&gt; &lt;span class='n'&gt;at&lt;/span&gt;&lt;span class='o'&gt;(&lt;/span&gt;&lt;span class='mf'&gt;0&lt;/span&gt;&lt;span class='o'&gt;),&lt;/span&gt;
        &lt;span class='n'&gt;self&lt;/span&gt; &lt;span class='n'&gt;getSlot&lt;/span&gt;&lt;span class='o'&gt;(&lt;/span&gt;&lt;span class='n'&gt;slotName&lt;/span&gt;&lt;span class='o'&gt;)&lt;/span&gt; &lt;span class='n'&gt;argumentNames&lt;/span&gt; &lt;span class='n'&gt;rest&lt;/span&gt; &lt;span class='n'&gt;rest&lt;/span&gt;
    &lt;span class='o'&gt;)&lt;/span&gt; &lt;span class='n'&gt;flatten&lt;/span&gt;&lt;span class='o'&gt;)&lt;/span&gt;
&lt;span class='o'&gt;)&lt;/span&gt;

&lt;span class='n'&gt;List2D&lt;/span&gt; &lt;span class='n'&gt;transpose&lt;/span&gt; &lt;span class='o'&gt;:=&lt;/span&gt; &lt;span class='k'&gt;method&lt;/span&gt;&lt;span class='o'&gt;(&lt;/span&gt;
    &lt;span class='n'&gt;self&lt;/span&gt; &lt;span class='n'&gt;get&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='n'&gt;flipFirstTwoArgs&lt;/span&gt;&lt;span class='o'&gt;(&lt;/span&gt;&lt;span class='s'&gt;&amp;quot;get&amp;quot;&lt;/span&gt;&lt;span class='o'&gt;)&lt;/span&gt;
    &lt;span class='n'&gt;self&lt;/span&gt; &lt;span class='n'&gt;set&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='n'&gt;flipFirstTwoArgs&lt;/span&gt;&lt;span class='o'&gt;(&lt;/span&gt;&lt;span class='s'&gt;&amp;quot;set&amp;quot;&lt;/span&gt;&lt;span class='o'&gt;)&lt;/span&gt;
&lt;span class='o'&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;If I&amp;#8217;ve done my job right, it should make a lot more sense this time.&lt;/p&gt;

&lt;p&gt;You can find the rest of the code (including the List2D prototype) on github - a good place to start is &lt;a href='https://github.com/nickknw/seven-languages-in-seven-weeks/blob/master/week-2-io/day2.io#L72'&gt;line 72 of day2.io&lt;/a&gt;. To read more I&amp;#8217;ve written about solving these exercises, check my &lt;a href='/projects/seven-languages-in-seven-weeks/'&gt;project page for Seven Languages in Seven Weeks&lt;/a&gt;.&lt;/p&gt;
&lt;h3&gt;Footnotes&lt;/h3&gt;&lt;ol&gt;&lt;li&gt;There are exceptions of course. I'm sure any lisp would be great at this, as well as Ruby, Groovy, and other languages with powerful metaprogramming capabilities. &lt;a href='#footnote-1-link' id='footnote-1'&gt;↩&lt;/a&gt;&lt;/li&gt;&lt;/ol&gt;</content>
 </entry>
 
 <entry>
   <title>Seven Languages: Week 2 (Io) - Day 1</title>
   <link href="http://nickknowlson.com/blog/2011/12/18/seven-languages-week-2-day-1/"/>
   <updated>2011-12-18T00:00:00-08:00</updated>
   <id>http://nickknowlson.com/blog/2011/12/18/seven-languages-week-2-day-1</id>
   <content type="html">&lt;p&gt;Day 1 of Io is the first of many chapters that will give me that &amp;#8216;new at programming&amp;#8217; feeling again, where I fumble just trying to build a valid expression that does what I want it to. I actually like that feeling; it means I am learning something new and a web of structures is forming in my mind. I like it &lt;em&gt;almost&lt;/em&gt; as much as finally making that first deep connection from a group of new concepts to some of your existing ones, and starting to grasp the parallels. Fortunately for me, that is what this book is all about!&lt;/p&gt;
&lt;div class='interjection'&gt;&lt;p&gt;
(This article is part of a series of posts I am doing about my journey through the exercises of the book &lt;a href='http://pragprog.com/book/btlang/seven-languages-in-seven-weeks'&gt;Seven Languages In Seven Weeks&lt;/a&gt;. The article previous to this one is &lt;a href='/blog/2011/12/15/seven-languages-week-1-day-3/'&gt;Week 1 (Ruby) - Day 3&lt;/a&gt;. For an overview see the &lt;a href='/projects/seven-languages-in-seven-weeks/'&gt;Seven Languages project page&lt;/a&gt;.)
&lt;/p&gt;&lt;/div&gt;
&lt;h2 id='how_io_feels'&gt;How Io feels&lt;/h2&gt;

&lt;p&gt;Syntactically, Io is a very very lightweight language, evocative of lisps in its regularity and minimalism. It provides a nice contrast with the previous chapter on Ruby. Ruby&amp;#8217;s definition of simple code is something like &amp;#8220;The more an expression reads like a (succinct) explanation of its intent, the better&amp;#8221; whereas Io&amp;#8217;s definition of simple code is something like &amp;#8220;The less extraneous syntax that is needed to represent an expression, the better&amp;#8221;.&lt;/p&gt;

&lt;p&gt;Because of this approach, Io lends itself very well to metaprogramming &amp;#8211; at least as well as Ruby does, possibly better. It does not have as the wide and varied set of built-in metaprogramming tools that Ruby does, but it also needs far fewer due to the way the language is constructed. Io is a &lt;a href='http://en.wikipedia.org/wiki/Prototype-based_programming'&gt;prototype-based&lt;/a&gt; language, the first of the less familiar programming paradigms in this book. I won&amp;#8217;t go into depth about this here except to note that Javascript is prototype-based as well, so learning Io could be very beneficial to anyone that does a fair amount of programming Javascript.&lt;/p&gt;

&lt;h2 id='highlights_from_exercises'&gt;Highlights from exercises&lt;/h2&gt;

&lt;p&gt;The homework this week is short but well-constructed. It points out a couple of things that are important to remember for a newbie to Io. In particular, you will need &lt;code&gt;slotNames&lt;/code&gt; a lot, so remember that one!&lt;/p&gt;

&lt;p&gt;Other than that, there isn&amp;#8217;t much to say about the homework this week. Remember &lt;code&gt;slotNames&lt;/code&gt; and read the code listing.&lt;/p&gt;

&lt;h2 id='full_code_listing'&gt;Full Code Listing&lt;/h2&gt;

&lt;p&gt;Here is a nicely formatted version of my solutions to the exercises from Day 1 of Io. The home of the following code is &lt;a href='https://github.com/nickknw/seven-languages-in-seven-weeks/blob/master/week-2-io/day1.io'&gt;on github&lt;/a&gt; with the other exercises.&lt;/p&gt;
&lt;div id='formatted_solutions'&gt;

&lt;h3&gt;Find:&lt;/h3&gt;

&lt;div class='question'&gt;Some Io example problems&lt;/div&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href='http://www.iolanguage.com/about/samplecode/'&gt;http://www.iolanguage.com/about/samplecode/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;div class='question'&gt;An Io community that will answer questions&lt;/div&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href='http://tech.groups.yahoo.com/group/iolanguage/messages'&gt;http://tech.groups.yahoo.com/group/iolanguage/messages&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href='http://stackoverflow.com/questions/tagged/iolanguage'&gt;http://stackoverflow.com/questions/tagged/iolanguage&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;#io on freenode&lt;/li&gt;
&lt;li&gt;&lt;a href='http://www.reddit.com/r/iolanguage'&gt;http://www.reddit.com/r/iolanguage&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;div class='question'&gt;A style guide with Io idioms&lt;/div&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href='http://en.wikibooks.org/wiki/Io_Programming/Io_Style_Guide'&gt;http://en.wikibooks.org/wiki/Io_Programming/Io_Style_Guide&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;Answer:&lt;/h3&gt;

&lt;div class='question'&gt;&lt;b&gt;1.&lt;/b&gt; Evaluate 1 + 1 and then 1 + &quot;one&quot;. Is Io strongly typed or weakly
typed?&lt;/div&gt;

&lt;p&gt;
Strongly typed. Trying to run &lt;code&gt;1 + &quot;one&quot;&lt;/code&gt; throws an exception that says:
&lt;code&gt;&quot;Exception: argument 0 to method '+' must be a Number, not a 'Sequence'&quot;&lt;/code&gt;
&lt;/p&gt;
  
&lt;div class='question'&gt;&lt;b&gt;2.&lt;/b&gt; Is 0 true or false? What about the empty string? Is nil true or
false?&lt;/div&gt;


&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='io'&gt;&lt;span class='k'&gt;if&lt;/span&gt;&lt;span class='o'&gt;(&lt;/span&gt;&lt;span class='mf'&gt;0&lt;/span&gt;&lt;span class='o'&gt;)&lt;/span&gt; &lt;span class='n'&gt;println&lt;/span&gt;   
&lt;span class='k'&gt;if&lt;/span&gt;&lt;span class='o'&gt;(&lt;/span&gt;&lt;span class='s'&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class='o'&gt;)&lt;/span&gt; &lt;span class='n'&gt;println&lt;/span&gt;  
&lt;span class='k'&gt;if&lt;/span&gt;&lt;span class='o'&gt;(&lt;/span&gt;&lt;span class='no'&gt;nil&lt;/span&gt;&lt;span class='o'&gt;)&lt;/span&gt; &lt;span class='n'&gt;println&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;div class='tiny_title'&gt;Output&lt;/div&gt;


&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='bash'&gt;&lt;span class='nb'&gt;true&lt;/span&gt;
&lt;span class='nb'&gt;true&lt;/span&gt;
&lt;span class='nb'&gt;false&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;div class='question'&gt;&lt;b&gt;3.&lt;/b&gt; How can you tell what slots a prototype supports?&lt;/div&gt;


&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='io'&gt;&lt;span class='c1'&gt;# &amp;lt;prototype&amp;gt; slotNames&lt;/span&gt;

&lt;span class='n'&gt;Zerg&lt;/span&gt; &lt;span class='o'&gt;:=&lt;/span&gt; &lt;span class='nb'&gt;Object&lt;/span&gt; &lt;span class='k'&gt;clone&lt;/span&gt;
&lt;span class='n'&gt;Zerg&lt;/span&gt; &lt;span class='n'&gt;sixPool&lt;/span&gt; &lt;span class='o'&gt;:=&lt;/span&gt; &lt;span class='s'&gt;&amp;quot;Zergling rush!&amp;quot;&lt;/span&gt;
&lt;span class='n'&gt;Zerg&lt;/span&gt; &lt;span class='n'&gt;slotNames&lt;/span&gt; &lt;span class='n'&gt;println&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;div class='tiny_title'&gt;Output&lt;/div&gt;


&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='bash'&gt;list&lt;span class='o'&gt;(&lt;/span&gt;&lt;span class='nb'&gt;type&lt;/span&gt;, sixPool&lt;span class='o'&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;div class='question'&gt;&lt;b&gt;4.&lt;/b&gt; What is the difference between = (equals), := (colon equals), and ::= (colon colon equals)? When would you use each one?&lt;/div&gt;

&lt;ul&gt;
&lt;li&gt;=     is used to assign something to an existing slot&lt;/li&gt;
&lt;li&gt;:=    is used to assign something to a previously non-existent slot&lt;/li&gt;
&lt;li&gt;::=   is used to assign something to a previously non-existent slot as well as create a setter for that slot&lt;/li&gt;
&lt;/ul&gt;
  
  &lt;p&gt;iolanguage.com's guide puts this much much better than I did:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;::= 	Creates slot, creates setter, assigns value&lt;/li&gt;
&lt;li&gt;:= 	Creates slot, assigns value&lt;/li&gt;
&lt;li&gt;= 	Assigns value to slot if it exists, otherwise raises exception &lt;/li&gt;
&lt;/ul&gt;


&lt;h3&gt;Do:&lt;/h3&gt;

&lt;div class='question'&gt;&lt;b&gt;1.&lt;/b&gt; Run an Io program from a file.&lt;/div&gt;

&lt;p&gt; From the command line run: io day1.io&lt;/p&gt;

&lt;div class='question'&gt;&lt;b&gt;2.&lt;/b&gt; Execute the code in a slot given its name.&lt;/div&gt;


&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='io'&gt;&lt;span class='c1'&gt;# I&amp;#39;m not quite sure I understood this question. I&amp;#39;ll answer the two&lt;/span&gt;
&lt;span class='c1'&gt;# interpretations I could come up with.&lt;/span&gt;

&lt;span class='c1'&gt;# If the code in a slot is stored as a method then just invoking the slot is&lt;/span&gt;
&lt;span class='c1'&gt;# enough:&lt;/span&gt;

&lt;span class='n'&gt;Zerg&lt;/span&gt; &lt;span class='n'&gt;macroItUp&lt;/span&gt; &lt;span class='o'&gt;:=&lt;/span&gt; &lt;span class='k'&gt;method&lt;/span&gt;&lt;span class='o'&gt;(&lt;/span&gt;&lt;span class='s'&gt;&amp;quot;Injecting larvae now!&amp;quot;&lt;/span&gt; &lt;span class='n'&gt;println&lt;/span&gt;&lt;span class='o'&gt;)&lt;/span&gt;
&lt;span class='n'&gt;Zerg&lt;/span&gt; &lt;span class='n'&gt;macroItUp&lt;/span&gt; &lt;span class='c1'&gt;# Will print &amp;quot;Injecting larvae now!&amp;quot;&lt;/span&gt;

&lt;span class='c1'&gt;# If the code in a slot is stored as a string then you should use something like&lt;/span&gt;
&lt;span class='c1'&gt;# doString:&lt;/span&gt;

&lt;span class='n'&gt;Zerg&lt;/span&gt; &lt;span class='n'&gt;macroHarderSteps&lt;/span&gt; &lt;span class='o'&gt;:=&lt;/span&gt; &lt;span class='o'&gt;(&lt;/span&gt;&lt;span class='s'&gt;&amp;quot;\&amp;quot;Spreading creep now!\&amp;quot; println&amp;quot;&lt;/span&gt;&lt;span class='o'&gt;)&lt;/span&gt;
&lt;span class='n'&gt;Zerg&lt;/span&gt; &lt;span class='n'&gt;macroHarder&lt;/span&gt; &lt;span class='o'&gt;:=&lt;/span&gt; &lt;span class='k'&gt;method&lt;/span&gt;&lt;span class='o'&gt;(&lt;/span&gt;&lt;span class='k'&gt;doString&lt;/span&gt;&lt;span class='o'&gt;(&lt;/span&gt;&lt;span class='n'&gt;Zerg&lt;/span&gt; &lt;span class='n'&gt;macroHarderSteps&lt;/span&gt;&lt;span class='o'&gt;))&lt;/span&gt;
&lt;span class='n'&gt;Zerg&lt;/span&gt; &lt;span class='n'&gt;macroHarder&lt;/span&gt;

&lt;span class='c1'&gt;# Update: Re-reading this now the intent of the question seems obvious! Write a&lt;/span&gt;
&lt;span class='c1'&gt;# method that, given a method name, will try to execute that method.&lt;/span&gt;
&lt;span class='s'&gt;&amp;quot;\nLet&amp;#39;s try that again&amp;quot;&lt;/span&gt; &lt;span class='n'&gt;println&lt;/span&gt;
&lt;span class='n'&gt;Zerg&lt;/span&gt; &lt;span class='n'&gt;specifyMacro&lt;/span&gt; &lt;span class='o'&gt;:=&lt;/span&gt; &lt;span class='k'&gt;method&lt;/span&gt;&lt;span class='o'&gt;(&lt;/span&gt;&lt;span class='n'&gt;name&lt;/span&gt;&lt;span class='o'&gt;,&lt;/span&gt; &lt;span class='n'&gt;perform&lt;/span&gt;&lt;span class='o'&gt;(&lt;/span&gt;&lt;span class='n'&gt;name&lt;/span&gt;&lt;span class='o'&gt;))&lt;/span&gt;
&lt;span class='n'&gt;Zerg&lt;/span&gt; &lt;span class='n'&gt;specifyMacro&lt;/span&gt;&lt;span class='o'&gt;(&lt;/span&gt;&lt;span class='s'&gt;&amp;quot;macroItUp&amp;quot;&lt;/span&gt;&lt;span class='o'&gt;)&lt;/span&gt;
&lt;span class='n'&gt;Zerg&lt;/span&gt; &lt;span class='n'&gt;specifyMacro&lt;/span&gt;&lt;span class='o'&gt;(&lt;/span&gt;&lt;span class='s'&gt;&amp;quot;macroHarder&amp;quot;&lt;/span&gt;&lt;span class='o'&gt;)&lt;/span&gt;
&lt;span class='s'&gt;&amp;quot;Done!&amp;quot;&lt;/span&gt; &lt;span class='n'&gt;println&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;div class='tiny_title'&gt;Output&lt;/div&gt;


&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='bash'&gt;Injecting larvae now!
Spreading creep now!

Let&lt;span class='err'&gt;&amp;#39;&lt;/span&gt;s try that again
Injecting larvae now!
Spreading creep now!
Done!
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;/div&gt;
&lt;p&gt;Next in this series: &lt;a href='/blog/2012/01/11/seven-languages-week-2-day-2/'&gt;Day 2 of Io&lt;/a&gt;&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>Seven Languages: Week 1 (Ruby) - Day 3</title>
   <link href="http://nickknowlson.com/blog/2011/12/15/seven-languages-week-1-day-3/"/>
   <updated>2011-12-15T00:00:00-08:00</updated>
   <id>http://nickknowlson.com/blog/2011/12/15/seven-languages-week-1-day-3</id>
   <content type="html">&lt;p&gt;Day 3 is about metaprogramming: writing code that writes code. Now we are really getting into the meat of Ruby, exploring some of the things that things that set it apart from other languages. Ruby has a powerful and varied toolset to make metaprogramming easy and natural. It gives you full control to tweak and patch built in classes, and even makes it convenient. These tools(SYN) can combine with its flexible syntax to let you create readable internal DSLs especially easily.&lt;/p&gt;
&lt;div class='interjection'&gt;&lt;p&gt;
(This article is part of a series of posts I am doing about my journey through the exercises of the book &lt;a href='http://pragprog.com/book/btlang/seven-languages-in-seven-weeks'&gt;Seven Languages In Seven Weeks&lt;/a&gt;. The article previous to this one is &lt;a href='/blog/2011/12/04/seven-languages-week-1-day-2/'&gt;Week 1 (Ruby) - Day 2&lt;/a&gt;. For an overview see the &lt;a href='/projects/seven-languages-in-seven-weeks/'&gt;Seven Languages project page&lt;/a&gt;.)
&lt;/p&gt;&lt;/div&gt;
&lt;h2 id='topics_covered'&gt;Topics covered&lt;/h2&gt;

&lt;p&gt;This was a fairly quick week, with only a few topics and one homework question. Not that this is a bad thing necessarily &amp;#8211; in the end it turned out to be a nice break before the tough stuff really started. The main three topics in Day 3 were: open classes, method_missing, and mixins.&lt;/p&gt;
&lt;h3&gt;Open classes&lt;/h3&gt;
&lt;p&gt;In Ruby you have the power to modify or add to any class, even the built-in ones. You can open up the String class and add a new method called &lt;code&gt;quack()&lt;/code&gt;, or redefine &lt;code&gt;size()&lt;/code&gt; to return a random integer. Using this power without restraint can lead to pretty impressive messes of spaghetti code.&lt;/p&gt;

&lt;p&gt;Modifying existing classes at runtime in this way has become known as &lt;a href='http://en.wikipedia.org/wiki/Monkey_patch'&gt;monkey patching&lt;/a&gt;, and also (my favorite) &lt;a href='http://www.ericdelabar.com/2008/05/metaprogramming-javascript.html'&gt;duck punching&lt;/a&gt;:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Well, I was just totally sold by Adam, the idea being that if it walks like a duck and talks like a duck, it’s a duck, right? So if this duck is not giving you the noise that you want, you’ve got to just punch that duck until it returns what you expect. &amp;#8211; Patrick Ewing&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;You&amp;#8217;ve got to just &lt;em&gt;punch&lt;/em&gt; that duck.&lt;/p&gt;
&lt;h3&gt;Method_missing&lt;/h3&gt;
&lt;p&gt;This special method gets called any time a method that doesn&amp;#8217;t exist is called. If you implement it you have access to the name and arguments of the method that was called. In the book, Bruce Tate gives an example of using this to create a nice way to specify roman numerals. The result is that you can say &lt;code&gt;roman.X&lt;/code&gt;, &lt;code&gt;roman.III&lt;/code&gt;, &lt;code&gt;roman.CXII&lt;/code&gt;, etc.&lt;/p&gt;

&lt;p&gt;I saw another example of &lt;code&gt;method_missing&lt;/code&gt;&amp;#8217;s power in Chapter 8 of &lt;a href='http://shop.oreilly.com/product/9780596516178.do'&gt;The Ruby Programming Language&lt;/a&gt;, where a simple DSL for generating html is created. This is what it looks like in use:&lt;/p&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='ruby'&gt;&lt;span class='n'&gt;pagetitle&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='s2'&gt;&amp;quot;Test Page for XML.generate&amp;quot;&lt;/span&gt;
&lt;span class='no'&gt;XML&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='n'&gt;generate&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='no'&gt;STDOUT&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt; &lt;span class='k'&gt;do&lt;/span&gt;
  &lt;span class='n'&gt;html&lt;/span&gt; &lt;span class='k'&gt;do&lt;/span&gt;
    &lt;span class='n'&gt;head&lt;/span&gt; &lt;span class='k'&gt;do&lt;/span&gt;
      &lt;span class='n'&gt;title&lt;/span&gt; &lt;span class='p'&gt;{&lt;/span&gt; &lt;span class='n'&gt;pagetitle&lt;/span&gt; &lt;span class='p'&gt;}&lt;/span&gt;
      &lt;span class='n'&gt;comment&lt;/span&gt; &lt;span class='s2'&gt;&amp;quot;This is a test&amp;quot;&lt;/span&gt;
    &lt;span class='k'&gt;end&lt;/span&gt;
    &lt;span class='n'&gt;body&lt;/span&gt; &lt;span class='k'&gt;do&lt;/span&gt;
      &lt;span class='n'&gt;h1&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='ss'&gt;:style&lt;/span&gt; &lt;span class='o'&gt;=&amp;gt;&lt;/span&gt; &lt;span class='s2'&gt;&amp;quot;font-family:sans-serif&amp;quot;&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt; &lt;span class='p'&gt;{&lt;/span&gt; &lt;span class='n'&gt;pagetitle&lt;/span&gt; &lt;span class='p'&gt;}&lt;/span&gt;
      &lt;span class='n'&gt;ul&lt;/span&gt; &lt;span class='ss'&gt;:type&lt;/span&gt;&lt;span class='o'&gt;=&amp;gt;&lt;/span&gt;&lt;span class='s2'&gt;&amp;quot;square&amp;quot;&lt;/span&gt; &lt;span class='k'&gt;do&lt;/span&gt;
        &lt;span class='n'&gt;li&lt;/span&gt; &lt;span class='p'&gt;{&lt;/span&gt; &lt;span class='no'&gt;Time&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='n'&gt;now&lt;/span&gt; &lt;span class='p'&gt;}&lt;/span&gt;
        &lt;span class='n'&gt;li&lt;/span&gt; &lt;span class='p'&gt;{&lt;/span&gt; &lt;span class='no'&gt;RUBY_VERSION&lt;/span&gt; &lt;span class='p'&gt;}&lt;/span&gt;
      &lt;span class='k'&gt;end&lt;/span&gt;
    &lt;span class='k'&gt;end&lt;/span&gt;
  &lt;span class='k'&gt;end&lt;/span&gt;
&lt;span class='k'&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The implementation is fairly short: they create a basic XML class in only 53 well-commented lines. If you&amp;#8217;re interested, the code examples are available for inspection from &lt;a href='http://www.davidflanagan.com/rpl/'&gt;David Flanagan&amp;#8217;s website&lt;/a&gt;. For convenience, here is a link &lt;a href='/RPL_XML.txt'&gt;directly to this snippet of code&lt;/a&gt;.&lt;/p&gt;
&lt;h3&gt;Mixins&lt;/h3&gt;
&lt;p&gt;Mixins are a way for a class to include code from a module inside itself. Imagine a class including a module with a &lt;code&gt;Meow()&lt;/code&gt; method. This would let you call &lt;code&gt;Meow()&lt;/code&gt; on any instance of that class. Combined with open classes and the ability to add or change methods at runtime, this makes it easy to package and use code that changes code.&lt;/p&gt;

&lt;p&gt;As I understand it, ActiveRecord in Rails is sort of the poster child for how metaprogramming using mixins. It will customize your domain models at runtime with many things, including accessors using the column names from the database. I admit I don&amp;#8217;t know a lot about the details of this area, but there is a whole book dedicated to &lt;a href='http://pragprog.com/book/ppmetr/metaprogramming-ruby'&gt;metaprogramming in Ruby&lt;/a&gt; that I plan on reading someday.&lt;/p&gt;

&lt;h2 id='what_was_missing'&gt;What was missing&lt;/h2&gt;

&lt;p&gt;Surprisingly, an entire category of useful metaprogramming tools are are almost skipped right over in Day 3. There are a lot of great methods to interact with and create methods and classes on the fly, and these are only given a passing mention in one of the examples. Methods like &lt;code&gt;define_method&lt;/code&gt;, &lt;code&gt;alias_method&lt;/code&gt;, the different versions of &lt;code&gt;eval&lt;/code&gt;, or &lt;code&gt;methods.grep&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;With these tools Ruby gives you, without much effort you can do things like: find all methods that have a name like &lt;code&gt;/check.*/&lt;/code&gt;, systematically rename those methods, and replace them with a method that does something (like logging) and THEN execute the method.&lt;/p&gt;

&lt;p&gt;Ola Bini has a great &lt;a href='http://ola-bini.blogspot.com/2006/09/ruby-metaprogramming-techniques.html'&gt;post about metaprogramming in Ruby&lt;/a&gt; that talks about these techniques and more. I recommend it if you have been at all interested this post so far, it is well worth reading.&lt;/p&gt;

&lt;h2 id='highlights_from_exercises'&gt;Highlights from exercises&lt;/h2&gt;

&lt;p&gt;There was not very much to do for the homework questions this week, unfortunately, just one fairly short exercise. This day in particular was one that I think could have used some really cool examples. Metaprogramming has a lot of depth and exciting possibilities, and this chapter could have shown that off more with better exercises.&lt;/p&gt;

&lt;p&gt;Anyway, the exercise for this day shows some basic usage of &lt;code&gt;method_missing&lt;/code&gt;. The existing ActsAsCsv module is given to you to extend, so the most interesting bit of code in the exercise is the definition of &lt;code&gt;method_missing&lt;/code&gt; in CsvRow. It takes the name of the method and attempts to return the rows from the column that has that name.&lt;/p&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='ruby'&gt;&lt;span class='k'&gt;def&lt;/span&gt; &lt;span class='nf'&gt;method_missing&lt;/span&gt; &lt;span class='nb'&gt;name&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='o'&gt;*&lt;/span&gt;&lt;span class='n'&gt;args&lt;/span&gt;
    &lt;span class='n'&gt;content_index&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='vi'&gt;@header_row&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='n'&gt;index&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nb'&gt;name&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='n'&gt;to_s&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt;
    &lt;span class='k'&gt;return&lt;/span&gt; &lt;span class='vi'&gt;@content_row&lt;/span&gt;&lt;span class='o'&gt;[&lt;/span&gt;&lt;span class='n'&gt;content_index&lt;/span&gt;&lt;span class='o'&gt;]&lt;/span&gt;
&lt;span class='k'&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id='full_solution'&gt;Full solution&lt;/h2&gt;

&lt;p&gt;Here is a nicely formatted version of my solution to the exercise from Day 3 of Ruby. The home of the following code is &lt;a href='https://github.com/nickknw/seven-languages-in-seven-weeks/blob/master/week-1-ruby/day3.rb'&gt;on github&lt;/a&gt; with the other exercises.&lt;/p&gt;
&lt;div id='formatted_solutions'&gt;

&lt;h3&gt;Do:&lt;/h3&gt;

&lt;div class='question'&gt;&lt;b&gt;1.&lt;/b&gt; Modify the CSV application to support an each method to return a CsvRow object. Use method_missing on that CsvRow to return the value for the column for a given heading.&lt;/div&gt;


&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='ruby'&gt;&lt;span class='k'&gt;module&lt;/span&gt; &lt;span class='nn'&gt;ActsAsCsv&lt;/span&gt;

    &lt;span class='k'&gt;def&lt;/span&gt; &lt;span class='nc'&gt;self&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='nf'&gt;included&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='n'&gt;base&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt;
        &lt;span class='n'&gt;base&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='n'&gt;extend&lt;/span&gt; &lt;span class='no'&gt;ClassMethods&lt;/span&gt;
    &lt;span class='k'&gt;end&lt;/span&gt;

    &lt;span class='k'&gt;module&lt;/span&gt; &lt;span class='nn'&gt;ClassMethods&lt;/span&gt;
        &lt;span class='k'&gt;def&lt;/span&gt; &lt;span class='nf'&gt;acts_as_csv&lt;/span&gt;
            &lt;span class='kp'&gt;include&lt;/span&gt; &lt;span class='no'&gt;InstanceMethods&lt;/span&gt;
        &lt;span class='k'&gt;end&lt;/span&gt;
    &lt;span class='k'&gt;end&lt;/span&gt;

    &lt;span class='k'&gt;module&lt;/span&gt; &lt;span class='nn'&gt;InstanceMethods&lt;/span&gt;

        &lt;span class='kp'&gt;attr_accessor&lt;/span&gt; &lt;span class='ss'&gt;:headers&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='ss'&gt;:csv_rows&lt;/span&gt;

        &lt;span class='k'&gt;def&lt;/span&gt; &lt;span class='nf'&gt;read&lt;/span&gt;
            &lt;span class='vi'&gt;@csv_rows&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='o'&gt;[]&lt;/span&gt;
            &lt;span class='n'&gt;file&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='no'&gt;File&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='n'&gt;new&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nb'&gt;self&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='n'&gt;class&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='n'&gt;to_s&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='n'&gt;downcase&lt;/span&gt; &lt;span class='o'&gt;+&lt;/span&gt; &lt;span class='s1'&gt;&amp;#39;.txt&amp;#39;&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt;
            &lt;span class='vi'&gt;@headers&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='n'&gt;file&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='n'&gt;gets&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='n'&gt;chomp&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='n'&gt;split&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='s1'&gt;&amp;#39;, &amp;#39;&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt;

            &lt;span class='n'&gt;file&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='n'&gt;each&lt;/span&gt; &lt;span class='k'&gt;do&lt;/span&gt; &lt;span class='o'&gt;|&lt;/span&gt;&lt;span class='n'&gt;row&lt;/span&gt;&lt;span class='o'&gt;|&lt;/span&gt;
                &lt;span class='n'&gt;csv_contents&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='n'&gt;row&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='n'&gt;chomp&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='n'&gt;split&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='s1'&gt;&amp;#39;, &amp;#39;&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt;
                &lt;span class='vi'&gt;@csv_rows&lt;/span&gt; &lt;span class='o'&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class='no'&gt;CsvRow&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='n'&gt;new&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='vi'&gt;@headers&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='n'&gt;csv_contents&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt;
            &lt;span class='k'&gt;end&lt;/span&gt;
        &lt;span class='k'&gt;end&lt;/span&gt;

        &lt;span class='k'&gt;def&lt;/span&gt; &lt;span class='nf'&gt;initialize&lt;/span&gt;
            &lt;span class='n'&gt;read&lt;/span&gt;
        &lt;span class='k'&gt;end&lt;/span&gt;

        &lt;span class='k'&gt;def&lt;/span&gt; &lt;span class='nf'&gt;each&lt;/span&gt; &lt;span class='o'&gt;&amp;amp;&lt;/span&gt;&lt;span class='n'&gt;block&lt;/span&gt;
            &lt;span class='vi'&gt;@csv_rows&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='n'&gt;each&lt;/span&gt; &lt;span class='o'&gt;&amp;amp;&lt;/span&gt;&lt;span class='n'&gt;block&lt;/span&gt;
        &lt;span class='k'&gt;end&lt;/span&gt;

    &lt;span class='k'&gt;end&lt;/span&gt;

    &lt;span class='k'&gt;class&lt;/span&gt; &lt;span class='nc'&gt;CsvRow&lt;/span&gt;
        &lt;span class='kp'&gt;attr_accessor&lt;/span&gt; &lt;span class='ss'&gt;:header_row&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='ss'&gt;:content_row&lt;/span&gt;

        &lt;span class='k'&gt;def&lt;/span&gt; &lt;span class='nf'&gt;initialize&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='n'&gt;header_row&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='n'&gt;content_row&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt;
            &lt;span class='vi'&gt;@header_row&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='n'&gt;header_row&lt;/span&gt;
            &lt;span class='vi'&gt;@content_row&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='n'&gt;content_row&lt;/span&gt;
        &lt;span class='k'&gt;end&lt;/span&gt;

        &lt;span class='k'&gt;def&lt;/span&gt; &lt;span class='nf'&gt;method_missing&lt;/span&gt; &lt;span class='nb'&gt;name&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='o'&gt;*&lt;/span&gt;&lt;span class='n'&gt;args&lt;/span&gt;
            &lt;span class='n'&gt;content_index&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='vi'&gt;@header_row&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='n'&gt;index&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nb'&gt;name&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='n'&gt;to_s&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt;
            &lt;span class='k'&gt;return&lt;/span&gt; &lt;span class='vi'&gt;@content_row&lt;/span&gt;&lt;span class='o'&gt;[&lt;/span&gt;&lt;span class='n'&gt;content_index&lt;/span&gt;&lt;span class='o'&gt;]&lt;/span&gt;
        &lt;span class='k'&gt;end&lt;/span&gt;
    &lt;span class='k'&gt;end&lt;/span&gt;
&lt;span class='k'&gt;end&lt;/span&gt;

&lt;span class='k'&gt;class&lt;/span&gt; &lt;span class='nc'&gt;RubyCsv&lt;/span&gt; 
    &lt;span class='kp'&gt;include&lt;/span&gt; &lt;span class='no'&gt;ActsAsCsv&lt;/span&gt;
    &lt;span class='n'&gt;acts_as_csv&lt;/span&gt;
&lt;span class='k'&gt;end&lt;/span&gt;

&lt;span class='n'&gt;csv&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='no'&gt;RubyCsv&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='n'&gt;new&lt;/span&gt;
&lt;span class='n'&gt;csv&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='n'&gt;each&lt;/span&gt; &lt;span class='p'&gt;{&lt;/span&gt;&lt;span class='o'&gt;|&lt;/span&gt;&lt;span class='n'&gt;row&lt;/span&gt;&lt;span class='o'&gt;|&lt;/span&gt; &lt;span class='nb'&gt;puts&lt;/span&gt; &lt;span class='n'&gt;row&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='n'&gt;one&lt;/span&gt;&lt;span class='p'&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;div class='tiny_title'&gt;Output (given the sample file in my github repo)&lt;/div&gt; 


&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='bash'&gt;lions
han
chewbacca
r2 d2
anakin skywalker
leia organa
threepio
jawa
emperor palpatine
darth sidious
bail organa
vader
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;/div&gt;
&lt;p&gt;Next in this series: &lt;a href='/blog/2011/12/18/seven-languages-week-2-day-1/'&gt;Day 1 of Io&lt;/a&gt;&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>Seven Languages: Week 1 (Ruby) - Day 2</title>
   <link href="http://nickknowlson.com/blog/2011/12/04/seven-languages-week-1-day-2/"/>
   <updated>2011-12-04T00:00:00-08:00</updated>
   <id>http://nickknowlson.com/blog/2011/12/04/seven-languages-week-1-day-2</id>
   <content type="html">&lt;p&gt;Day 2 of Ruby covers collections, code blocks, classes and modules. I&amp;#8217;m familiar enough with these already in Ruby so in this case it will be hard to provide a &amp;#8216;learning the language&amp;#8217; perspective. Instead I will try to highlight a few of the parts of Ruby in this chapter that I particularly like.&lt;/p&gt;
&lt;div class='interjection'&gt;&lt;p&gt;
(This article is part of a series of posts I am doing about my journey through the exercises of the book &lt;a href='http://pragprog.com/book/btlang/seven-languages-in-seven-weeks'&gt;Seven Languages In Seven Weeks&lt;/a&gt;. The article previous to this one is &lt;a href='/blog/2011/11/27/seven-languages-week-1-day-1/'&gt;Week 1 (Ruby) - Day 1&lt;/a&gt;. For an overview see the &lt;a href='/projects/seven-languages-in-seven-weeks/'&gt;Seven Languages project page&lt;/a&gt;.)
&lt;/p&gt;&lt;/div&gt;
&lt;h2 id='topics_covered'&gt;Topics covered&lt;/h2&gt;

&lt;p&gt;Ruby has closures and first-class functions - code blocks are one way of creating a Proc - an anonymous function. A Proc is almost but not quite a lambda - there are &lt;a href='http://www.robertsosinski.com/2008/12/21/understanding-ruby-blocks-procs-and-lambdas/'&gt;a few differences between them&lt;/a&gt;, and Ruby has a separate &lt;code&gt;lambda&lt;/code&gt; method for creating those.&lt;/p&gt;

&lt;p&gt;Ruby&amp;#8217;s arrays and hashes are very multipurpose: hashes are frequently used to give a method named parameters; and arrays have built in methods so that they can be used as queues, stacks, sets, and matrices.&lt;/p&gt;

&lt;p&gt;Its syntax is consistent and pretty. Arrays are very rich, you can do ranges (&lt;code&gt;[1..10]&lt;/code&gt;), negative indexes (&lt;code&gt;&amp;quot;string&amp;quot;[1..-2]&lt;/code&gt;), and there are convenience methods for operations like push, pop, transpose, and set intersection. You have the three basic list manipulating higher order function equivalents: map, filter, reduce (fold).&lt;/p&gt;

&lt;p&gt;There are many useful methods you can call right off of number literals. One common example is &lt;code&gt;times&lt;/code&gt;, which takes a code block as a parameter and executes it. This can sometimes be a nice way to express a loop: &lt;code&gt;4.times { puts &amp;quot;testing&amp;quot; }&lt;/code&gt; or &lt;code&gt;4.times { |i| puts i }&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;For anyone coming from C#, ruby&amp;#8217;s blocks can substitute for &lt;code&gt;using&lt;/code&gt; in many places, like when opening a file:&lt;/p&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='ruby'&gt;&lt;span class='no'&gt;File&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='n'&gt;open&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='s2'&gt;&amp;quot;tmp.txt&amp;quot;&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='s2'&gt;&amp;quot;r&amp;quot;&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='n'&gt;each&lt;/span&gt; &lt;span class='p'&gt;{&lt;/span&gt; &lt;span class='o'&gt;|&lt;/span&gt;&lt;span class='n'&gt;line&lt;/span&gt;&lt;span class='o'&gt;|&lt;/span&gt;
    &lt;span class='nb'&gt;puts&lt;/span&gt; &lt;span class='n'&gt;line&lt;/span&gt;
&lt;span class='p'&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;No need to worry about forgetting to &lt;code&gt;.close()&lt;/code&gt; the file later on.&lt;/p&gt;

&lt;h2 id='full_solutions'&gt;Full solutions&lt;/h2&gt;

&lt;p&gt;Here is a nicely formatted version of my solutions to the exercises from Day 2 of Ruby. The home of the following code is &lt;a href='https://github.com/nickknw/seven-languages-in-seven-weeks/blob/master/week-1-ruby/day2.rb'&gt;on github&lt;/a&gt; with the other exercises.&lt;/p&gt;
&lt;div id='formatted_solutions'&gt;

&lt;h3&gt;Find:&lt;/h3&gt;

&lt;div class='question'&gt;&lt;b&gt;1.&lt;/b&gt; Find out how to access files with and without code blocks. What is the benefit of the code block?&lt;/div&gt;


&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='ruby'&gt;&lt;span class='n'&gt;file&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='no'&gt;File&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='n'&gt;open&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='s2'&gt;&amp;quot;tmp.txt&amp;quot;&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='s2'&gt;&amp;quot;w+&amp;quot;&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt;
&lt;span class='n'&gt;file&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='n'&gt;puts&lt;/span&gt; &lt;span class='s2'&gt;&amp;quot;a spoonful is great but I&amp;#39;d rather have a bowl&amp;quot;&lt;/span&gt;
&lt;span class='n'&gt;file&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='n'&gt;close&lt;/span&gt;

&lt;span class='c1'&gt;# safer, less erroro-prone, shorter, more readable&lt;/span&gt;
&lt;span class='no'&gt;File&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='n'&gt;open&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='s2'&gt;&amp;quot;tmp.txt&amp;quot;&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='s2'&gt;&amp;quot;r&amp;quot;&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='n'&gt;each&lt;/span&gt; &lt;span class='p'&gt;{&lt;/span&gt; &lt;span class='o'&gt;|&lt;/span&gt;&lt;span class='n'&gt;line&lt;/span&gt;&lt;span class='o'&gt;|&lt;/span&gt;
    &lt;span class='nb'&gt;puts&lt;/span&gt; &lt;span class='n'&gt;line&lt;/span&gt;
&lt;span class='p'&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;div class='tiny_title'&gt;Output&lt;/div&gt;


&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='bash'&gt;a spoonful is great but I&lt;span class='err'&gt;&amp;#39;&lt;/span&gt;d rather have a bowl
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;div class='question'&gt;&lt;b&gt;2.&lt;/b&gt; How would you translate a hash to an array? Can you translate arrays to hashes?&lt;/div&gt;


&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='ruby'&gt;&lt;span class='n'&gt;scores&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='p'&gt;{&lt;/span&gt; &lt;span class='ss'&gt;gary&lt;/span&gt;&lt;span class='p'&gt;:&lt;/span&gt; &lt;span class='mi'&gt;5&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='ss'&gt;nick&lt;/span&gt;&lt;span class='p'&gt;:&lt;/span&gt; &lt;span class='mi'&gt;11&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='ss'&gt;ted&lt;/span&gt;&lt;span class='p'&gt;:&lt;/span&gt; &lt;span class='mi'&gt;8&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='n'&gt;the_dude&lt;/span&gt;&lt;span class='p'&gt;:&lt;/span&gt;&lt;span class='mi'&gt;9&lt;/span&gt; &lt;span class='p'&gt;}&lt;/span&gt;
&lt;span class='nb'&gt;print&lt;/span&gt; &lt;span class='s2'&gt;&amp;quot;hash: &amp;quot;&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt; &lt;span class='nb'&gt;p&lt;/span&gt; &lt;span class='n'&gt;scores&lt;/span&gt;
&lt;span class='nb'&gt;print&lt;/span&gt; &lt;span class='s2'&gt;&amp;quot;array1: &amp;quot;&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt; &lt;span class='nb'&gt;p&lt;/span&gt; &lt;span class='n'&gt;scores&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='n'&gt;to_a&lt;/span&gt;
&lt;span class='nb'&gt;print&lt;/span&gt; &lt;span class='s2'&gt;&amp;quot;array2: &amp;quot;&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt; &lt;span class='nb'&gt;p&lt;/span&gt; &lt;span class='n'&gt;scores&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='n'&gt;to_a&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='n'&gt;flatten&lt;/span&gt;

&lt;span class='n'&gt;scores_array1&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='n'&gt;scores&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='n'&gt;to_a&lt;/span&gt;
&lt;span class='nb'&gt;print&lt;/span&gt; &lt;span class='s2'&gt;&amp;quot;array1 to hash again 1: &amp;quot;&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt; &lt;span class='nb'&gt;p&lt;/span&gt; &lt;span class='n'&gt;scores_array1&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='n'&gt;inject&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='no'&gt;Hash&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='n'&gt;new&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt; &lt;span class='p'&gt;{&lt;/span&gt; &lt;span class='o'&gt;|&lt;/span&gt;&lt;span class='n'&gt;memo&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='n'&gt;pair&lt;/span&gt;&lt;span class='o'&gt;|&lt;/span&gt; &lt;span class='n'&gt;memo&lt;/span&gt;&lt;span class='o'&gt;[&lt;/span&gt;&lt;span class='n'&gt;pair&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='n'&gt;first&lt;/span&gt;&lt;span class='o'&gt;]&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='n'&gt;pair&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='n'&gt;last&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt; &lt;span class='n'&gt;memo&lt;/span&gt; &lt;span class='p'&gt;}&lt;/span&gt;
&lt;span class='nb'&gt;print&lt;/span&gt; &lt;span class='s2'&gt;&amp;quot;array1 to hash again 2: &amp;quot;&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt; &lt;span class='nb'&gt;p&lt;/span&gt; &lt;span class='no'&gt;Hash&lt;/span&gt;&lt;span class='o'&gt;[&lt;/span&gt;&lt;span class='n'&gt;scores_array1&lt;/span&gt;&lt;span class='o'&gt;]&lt;/span&gt;
&lt;span class='n'&gt;scores_array2&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='n'&gt;scores&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='n'&gt;to_a&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='n'&gt;flatten&lt;/span&gt;
&lt;span class='nb'&gt;print&lt;/span&gt; &lt;span class='s2'&gt;&amp;quot;array2 to hash again 1: &amp;quot;&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt; &lt;span class='nb'&gt;p&lt;/span&gt; &lt;span class='no'&gt;Hash&lt;/span&gt;&lt;span class='o'&gt;[&lt;/span&gt;&lt;span class='n'&gt;scores_array2&lt;/span&gt;&lt;span class='o'&gt;]&lt;/span&gt;
&lt;span class='nb'&gt;print&lt;/span&gt; &lt;span class='s2'&gt;&amp;quot;array2 to hash again 2: &amp;quot;&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt; &lt;span class='nb'&gt;p&lt;/span&gt; &lt;span class='no'&gt;Hash&lt;/span&gt;&lt;span class='o'&gt;[*&lt;/span&gt;&lt;span class='n'&gt;scores_array2&lt;/span&gt;&lt;span class='o'&gt;]&lt;/span&gt;
&lt;span class='nb'&gt;puts&lt;/span&gt; &lt;span class='s2'&gt;&amp;quot;Yup.&amp;quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;div class='tiny_title'&gt;Output&lt;/div&gt;


&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='bash'&gt;&lt;span class='nb'&gt;hash&lt;/span&gt;: &lt;span class='o'&gt;{&lt;/span&gt;:gary&lt;span class='o'&gt;=&lt;/span&gt;&amp;gt;5, :nick&lt;span class='o'&gt;=&lt;/span&gt;&amp;gt;11, :ted&lt;span class='o'&gt;=&lt;/span&gt;&amp;gt;8, :the_dude&lt;span class='o'&gt;=&lt;/span&gt;&amp;gt;9&lt;span class='o'&gt;}&lt;/span&gt;
array1: &lt;span class='o'&gt;[[&lt;/span&gt;:gary, 5&lt;span class='o'&gt;]&lt;/span&gt;, &lt;span class='o'&gt;[&lt;/span&gt;:nick, 11&lt;span class='o'&gt;]&lt;/span&gt;, &lt;span class='o'&gt;[&lt;/span&gt;:ted, 8&lt;span class='o'&gt;]&lt;/span&gt;, &lt;span class='o'&gt;[&lt;/span&gt;:the_dude, 9&lt;span class='o'&gt;]]&lt;/span&gt;
array2: &lt;span class='o'&gt;[&lt;/span&gt;:gary, 5, :nick, 11, :ted, 8, :the_dude, 9&lt;span class='o'&gt;]&lt;/span&gt;
array1 to &lt;span class='nb'&gt;hash &lt;/span&gt;again 1: &lt;span class='o'&gt;{&lt;/span&gt;:gary&lt;span class='o'&gt;=&lt;/span&gt;&amp;gt;5, :nick&lt;span class='o'&gt;=&lt;/span&gt;&amp;gt;11, :ted&lt;span class='o'&gt;=&lt;/span&gt;&amp;gt;8, :the_dude&lt;span class='o'&gt;=&lt;/span&gt;&amp;gt;9&lt;span class='o'&gt;}&lt;/span&gt;
array1 to &lt;span class='nb'&gt;hash &lt;/span&gt;again 2: &lt;span class='o'&gt;{&lt;/span&gt;:gary&lt;span class='o'&gt;=&lt;/span&gt;&amp;gt;5, :nick&lt;span class='o'&gt;=&lt;/span&gt;&amp;gt;11, :ted&lt;span class='o'&gt;=&lt;/span&gt;&amp;gt;8, :the_dude&lt;span class='o'&gt;=&lt;/span&gt;&amp;gt;9&lt;span class='o'&gt;}&lt;/span&gt;
array2 to &lt;span class='nb'&gt;hash &lt;/span&gt;again 1: &lt;span class='o'&gt;{}&lt;/span&gt;
array2 to &lt;span class='nb'&gt;hash &lt;/span&gt;again 2: &lt;span class='o'&gt;{&lt;/span&gt;:gary&lt;span class='o'&gt;=&lt;/span&gt;&amp;gt;5, :nick&lt;span class='o'&gt;=&lt;/span&gt;&amp;gt;11, :ted&lt;span class='o'&gt;=&lt;/span&gt;&amp;gt;8, :the_dude&lt;span class='o'&gt;=&lt;/span&gt;&amp;gt;9&lt;span class='o'&gt;}&lt;/span&gt;
Yup.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;div class='question'&gt;&lt;b&gt;3.&lt;/b&gt; Can you iterate through a hash?&lt;/div&gt;


&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='ruby'&gt;&lt;span class='n'&gt;scores&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='n'&gt;each&lt;/span&gt; &lt;span class='p'&gt;{&lt;/span&gt; &lt;span class='o'&gt;|&lt;/span&gt;&lt;span class='n'&gt;key&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='n'&gt;value&lt;/span&gt;&lt;span class='o'&gt;|&lt;/span&gt; &lt;span class='nb'&gt;puts&lt;/span&gt; &lt;span class='s2'&gt;&amp;quot;key:&amp;#39;&lt;/span&gt;&lt;span class='si'&gt;#{&lt;/span&gt;&lt;span class='n'&gt;key&lt;/span&gt;&lt;span class='si'&gt;}&lt;/span&gt;&lt;span class='s2'&gt;&amp;#39;, value:&amp;#39;&lt;/span&gt;&lt;span class='si'&gt;#{&lt;/span&gt;&lt;span class='n'&gt;value&lt;/span&gt;&lt;span class='si'&gt;}&lt;/span&gt;&lt;span class='s2'&gt;&amp;#39;&amp;quot;&lt;/span&gt; &lt;span class='p'&gt;}&lt;/span&gt;
&lt;span class='nb'&gt;puts&lt;/span&gt; &lt;span class='s2'&gt;&amp;quot;Yup.&amp;quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;div class='tiny_title'&gt;Output&lt;/div&gt;


&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='bash'&gt;key:&lt;span class='s1'&gt;&amp;#39;gary&amp;#39;&lt;/span&gt;, value:&lt;span class='s1'&gt;&amp;#39;5&amp;#39;&lt;/span&gt;
key:&lt;span class='s1'&gt;&amp;#39;nick&amp;#39;&lt;/span&gt;, value:&lt;span class='s1'&gt;&amp;#39;11&amp;#39;&lt;/span&gt;
key:&lt;span class='s1'&gt;&amp;#39;ted&amp;#39;&lt;/span&gt;, value:&lt;span class='s1'&gt;&amp;#39;8&amp;#39;&lt;/span&gt;
key:&lt;span class='s1'&gt;&amp;#39;the_dude&amp;#39;&lt;/span&gt;, value:&lt;span class='s1'&gt;&amp;#39;9&amp;#39;&lt;/span&gt;
Yup.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;div class='question'&gt;&lt;b&gt;4.&lt;/b&gt; You can use Ruby arrays as stacks. What other common data structures to arrays support?&lt;/div&gt;


&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='ruby'&gt;&lt;span class='nb'&gt;puts&lt;/span&gt; &lt;span class='s2'&gt;&amp;quot;queue/deque: &amp;quot;&lt;/span&gt;
&lt;span class='n'&gt;deque&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='o'&gt;[].&lt;/span&gt;&lt;span class='n'&gt;push&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='s2'&gt;&amp;quot;1&amp;quot;&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='n'&gt;push&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='s2'&gt;&amp;quot;2&amp;quot;&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt;
&lt;span class='n'&gt;deque&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='n'&gt;unshift&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='s2'&gt;&amp;quot;a&amp;quot;&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='n'&gt;unshift&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='s2'&gt;&amp;quot;b&amp;quot;&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt;
&lt;span class='nb'&gt;p&lt;/span&gt; &lt;span class='n'&gt;deque&lt;/span&gt;
&lt;span class='nb'&gt;puts&lt;/span&gt; &lt;span class='n'&gt;deque&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='n'&gt;shift&lt;/span&gt;
&lt;span class='nb'&gt;puts&lt;/span&gt; &lt;span class='n'&gt;deque&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='n'&gt;shift&lt;/span&gt;
&lt;span class='nb'&gt;puts&lt;/span&gt; &lt;span class='n'&gt;deque&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='n'&gt;pop&lt;/span&gt;
&lt;span class='nb'&gt;puts&lt;/span&gt; &lt;span class='n'&gt;deque&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='n'&gt;pop&lt;/span&gt;

&lt;span class='nb'&gt;puts&lt;/span&gt; &lt;span class='s2'&gt;&amp;quot;list: &amp;quot;&lt;/span&gt;
&lt;span class='n'&gt;list&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='o'&gt;[&lt;/span&gt;&lt;span class='mi'&gt;1&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt;&lt;span class='mi'&gt;2&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt;&lt;span class='mi'&gt;3&lt;/span&gt;&lt;span class='o'&gt;].&lt;/span&gt;&lt;span class='n'&gt;insert&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='mi'&gt;2&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='s2'&gt;&amp;quot;c&amp;quot;&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt;
&lt;span class='nb'&gt;puts&lt;/span&gt; &lt;span class='n'&gt;list&lt;/span&gt;
&lt;span class='nb'&gt;puts&lt;/span&gt; &lt;span class='s2'&gt;&amp;quot;removed: &amp;quot;&lt;/span&gt; &lt;span class='o'&gt;+&lt;/span&gt; &lt;span class='n'&gt;list&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='n'&gt;delete&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='s2'&gt;&amp;quot;c&amp;quot;&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt;

&lt;span class='nb'&gt;puts&lt;/span&gt; &lt;span class='s2'&gt;&amp;quot;(rudimentary) bag/set:&amp;quot;&lt;/span&gt;
&lt;span class='n'&gt;bag&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='o'&gt;[&lt;/span&gt;&lt;span class='mi'&gt;1&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt;&lt;span class='mi'&gt;2&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt;&lt;span class='mi'&gt;3&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt;&lt;span class='mi'&gt;3&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt;&lt;span class='mi'&gt;4&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt;&lt;span class='mi'&gt;5&lt;/span&gt;&lt;span class='o'&gt;]&lt;/span&gt;
&lt;span class='nb'&gt;p&lt;/span&gt; &lt;span class='n'&gt;bag&lt;/span&gt;
&lt;span class='n'&gt;set&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='n'&gt;bag&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='n'&gt;uniq&lt;/span&gt;
&lt;span class='n'&gt;other_set&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='o'&gt;[&lt;/span&gt;&lt;span class='mi'&gt;3&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt;&lt;span class='mi'&gt;5&lt;/span&gt;&lt;span class='o'&gt;]&lt;/span&gt;
&lt;span class='nb'&gt;p&lt;/span&gt; &lt;span class='n'&gt;set&lt;/span&gt;
&lt;span class='nb'&gt;p&lt;/span&gt; &lt;span class='n'&gt;set&lt;/span&gt; &lt;span class='o'&gt;&amp;amp;&lt;/span&gt; &lt;span class='n'&gt;other_set&lt;/span&gt;

&lt;span class='nb'&gt;puts&lt;/span&gt; &lt;span class='s2'&gt;&amp;quot;(rudimentary) matrix:&amp;quot;&lt;/span&gt;
&lt;span class='n'&gt;matrix&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='o'&gt;[[&lt;/span&gt;&lt;span class='mi'&gt;1&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt;&lt;span class='mi'&gt;2&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt;&lt;span class='mi'&gt;3&lt;/span&gt;&lt;span class='o'&gt;]&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt;&lt;span class='o'&gt;[&lt;/span&gt;&lt;span class='mi'&gt;4&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt;&lt;span class='mi'&gt;5&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt;&lt;span class='mi'&gt;6&lt;/span&gt;&lt;span class='o'&gt;]&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt;&lt;span class='o'&gt;[&lt;/span&gt;&lt;span class='mi'&gt;7&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt;&lt;span class='mi'&gt;8&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt;&lt;span class='mi'&gt;9&lt;/span&gt;&lt;span class='o'&gt;]]&lt;/span&gt;
&lt;span class='nb'&gt;p&lt;/span&gt; &lt;span class='n'&gt;matrix&lt;/span&gt;
&lt;span class='nb'&gt;p&lt;/span&gt; &lt;span class='n'&gt;matrix&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='n'&gt;transpose&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;div class='tiny_title'&gt;Output&lt;/div&gt;


&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='bash'&gt;queue/deque: 
&lt;span class='o'&gt;[&lt;/span&gt;&lt;span class='s2'&gt;&amp;quot;b&amp;quot;&lt;/span&gt;, &lt;span class='s2'&gt;&amp;quot;a&amp;quot;&lt;/span&gt;, &lt;span class='s2'&gt;&amp;quot;1&amp;quot;&lt;/span&gt;, &lt;span class='s2'&gt;&amp;quot;2&amp;quot;&lt;/span&gt;&lt;span class='o'&gt;]&lt;/span&gt;
b
a
2
1
list: 
1
2
c
3
removed: c
&lt;span class='o'&gt;(&lt;/span&gt;rudimentary&lt;span class='o'&gt;)&lt;/span&gt; bag/set:
&lt;span class='o'&gt;[&lt;/span&gt;1, 2, 3, 3, 4, 5&lt;span class='o'&gt;]&lt;/span&gt;
&lt;span class='o'&gt;[&lt;/span&gt;1, 2, 3, 4, 5&lt;span class='o'&gt;]&lt;/span&gt;
&lt;span class='o'&gt;[&lt;/span&gt;3, 5&lt;span class='o'&gt;]&lt;/span&gt;
&lt;span class='o'&gt;(&lt;/span&gt;rudimentary&lt;span class='o'&gt;)&lt;/span&gt; matrix:
&lt;span class='o'&gt;[[&lt;/span&gt;1, 2, 3&lt;span class='o'&gt;]&lt;/span&gt;, &lt;span class='o'&gt;[&lt;/span&gt;4, 5, 6&lt;span class='o'&gt;]&lt;/span&gt;, &lt;span class='o'&gt;[&lt;/span&gt;7, 8, 9&lt;span class='o'&gt;]]&lt;/span&gt;
&lt;span class='o'&gt;[[&lt;/span&gt;1, 4, 7&lt;span class='o'&gt;]&lt;/span&gt;, &lt;span class='o'&gt;[&lt;/span&gt;2, 5, 8&lt;span class='o'&gt;]&lt;/span&gt;, &lt;span class='o'&gt;[&lt;/span&gt;3, 6, 9&lt;span class='o'&gt;]]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;



&lt;h3&gt;Do:&lt;/h3&gt;
&lt;div class='question'&gt;&lt;b&gt;1.&lt;/b&gt; Print the contents of an array of sixteen numbers, four numbers at a time, using just each. Now, do the same with each_slice in Enumerable&lt;/div&gt;


&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='ruby'&gt;&lt;span class='n'&gt;sixteen_numbers&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='o'&gt;[*&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='mi'&gt;1&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='n'&gt;.&lt;/span&gt;&lt;span class='mi'&gt;16&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt;&lt;span class='o'&gt;]&lt;/span&gt;
&lt;span class='n'&gt;sixteen_numbers&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='n'&gt;each&lt;/span&gt; &lt;span class='k'&gt;do&lt;/span&gt; &lt;span class='o'&gt;|&lt;/span&gt;&lt;span class='n'&gt;number&lt;/span&gt;&lt;span class='o'&gt;|&lt;/span&gt;
        &lt;span class='nb'&gt;p&lt;/span&gt; &lt;span class='n'&gt;sixteen_numbers&lt;/span&gt;&lt;span class='o'&gt;[&lt;/span&gt;&lt;span class='p'&gt;((&lt;/span&gt;&lt;span class='n'&gt;number&lt;/span&gt;&lt;span class='o'&gt;-&lt;/span&gt;&lt;span class='mi'&gt;4&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='n'&gt;.&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='n'&gt;number&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt;&lt;span class='o'&gt;]&lt;/span&gt; &lt;span class='k'&gt;if&lt;/span&gt; &lt;span class='n'&gt;number&lt;/span&gt; &lt;span class='o'&gt;%&lt;/span&gt; &lt;span class='mi'&gt;4&lt;/span&gt; &lt;span class='o'&gt;==&lt;/span&gt; &lt;span class='mi'&gt;0&lt;/span&gt;
&lt;span class='k'&gt;end&lt;/span&gt;

&lt;span class='nb'&gt;puts&lt;/span&gt; &lt;span class='s2'&gt;&amp;quot;and&amp;quot;&lt;/span&gt;

&lt;span class='n'&gt;sixteen_numbers&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='n'&gt;each_slice&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='mi'&gt;4&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt; &lt;span class='p'&gt;{&lt;/span&gt; &lt;span class='o'&gt;|&lt;/span&gt;&lt;span class='n'&gt;slice&lt;/span&gt;&lt;span class='o'&gt;|&lt;/span&gt; &lt;span class='nb'&gt;p&lt;/span&gt; &lt;span class='n'&gt;slice&lt;/span&gt; &lt;span class='p'&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;div class='tiny_title'&gt;Output&lt;/div&gt;


&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='bash'&gt;&lt;span class='o'&gt;[&lt;/span&gt;1, 2, 3, 4&lt;span class='o'&gt;]&lt;/span&gt;
&lt;span class='o'&gt;[&lt;/span&gt;5, 6, 7, 8&lt;span class='o'&gt;]&lt;/span&gt;
&lt;span class='o'&gt;[&lt;/span&gt;9, 10, 11, 12&lt;span class='o'&gt;]&lt;/span&gt;
&lt;span class='o'&gt;[&lt;/span&gt;13, 14, 15, 16&lt;span class='o'&gt;]&lt;/span&gt;
and
&lt;span class='o'&gt;[&lt;/span&gt;1, 2, 3, 4&lt;span class='o'&gt;]&lt;/span&gt;
&lt;span class='o'&gt;[&lt;/span&gt;5, 6, 7, 8&lt;span class='o'&gt;]&lt;/span&gt;
&lt;span class='o'&gt;[&lt;/span&gt;9, 10, 11, 12&lt;span class='o'&gt;]&lt;/span&gt;
&lt;span class='o'&gt;[&lt;/span&gt;13, 14, 15, 16&lt;span class='o'&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;



&lt;div class='question'&gt;&lt;b&gt;2.&lt;/b&gt; The Tree class was interesting, but it did not allow you to specify a new tree with a clean user interface. Let the initializer accept a nested structure with hashes and arrays. You should be able to specify a tree like this: {'grandpa' =&gt; {'dad' =&gt; 'child 1' =&gt; {}, 'child 2' =&gt; {} }, 'uncle' =&gt; {'child 3' =&gt; {}, 'child 4' =&gt; {} } } }.&lt;/div&gt;


&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='ruby'&gt;&lt;span class='k'&gt;class&lt;/span&gt; &lt;span class='nc'&gt;Tree&lt;/span&gt;
    &lt;span class='kp'&gt;attr_accessor&lt;/span&gt; &lt;span class='ss'&gt;:children&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='ss'&gt;:node_name&lt;/span&gt;

    &lt;span class='k'&gt;def&lt;/span&gt; &lt;span class='nf'&gt;initialize&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nb'&gt;name&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='n'&gt;children&lt;/span&gt;&lt;span class='o'&gt;=[]&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt;
        &lt;span class='k'&gt;if&lt;/span&gt; &lt;span class='nb'&gt;name&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='n'&gt;respond_to?&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='s1'&gt;&amp;#39;keys&amp;#39;&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt; &lt;span class='k'&gt;then&lt;/span&gt;
            &lt;span class='n'&gt;root_node&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='nb'&gt;name&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='n'&gt;first&lt;/span&gt;
            &lt;span class='nb'&gt;name&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='n'&gt;root_node&lt;/span&gt;&lt;span class='o'&gt;[&lt;/span&gt;&lt;span class='mi'&gt;0&lt;/span&gt;&lt;span class='o'&gt;]&lt;/span&gt;
            &lt;span class='n'&gt;children&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='n'&gt;root_node&lt;/span&gt;&lt;span class='o'&gt;[&lt;/span&gt;&lt;span class='mi'&gt;1&lt;/span&gt;&lt;span class='o'&gt;]&lt;/span&gt;
        &lt;span class='k'&gt;end&lt;/span&gt;
        
        &lt;span class='k'&gt;if&lt;/span&gt; &lt;span class='n'&gt;children&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='n'&gt;respond_to?&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='s1'&gt;&amp;#39;keys&amp;#39;&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt; &lt;span class='k'&gt;then&lt;/span&gt;
            &lt;span class='n'&gt;children&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='n'&gt;children&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='n'&gt;map&lt;/span&gt; &lt;span class='p'&gt;{&lt;/span&gt;&lt;span class='o'&gt;|&lt;/span&gt;&lt;span class='n'&gt;child_name&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='n'&gt;grandchildren&lt;/span&gt;&lt;span class='o'&gt;|&lt;/span&gt; &lt;span class='no'&gt;Tree&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='n'&gt;new&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='n'&gt;child_name&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='n'&gt;grandchildren&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt; &lt;span class='p'&gt;}&lt;/span&gt;
        &lt;span class='k'&gt;end&lt;/span&gt;

        &lt;span class='vi'&gt;@node_name&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='nb'&gt;name&lt;/span&gt;
        &lt;span class='vi'&gt;@children&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='n'&gt;children&lt;/span&gt;
    &lt;span class='k'&gt;end&lt;/span&gt;

    &lt;span class='k'&gt;def&lt;/span&gt; &lt;span class='nf'&gt;visit_all&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='o'&gt;&amp;amp;&lt;/span&gt;&lt;span class='n'&gt;block&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt;
        &lt;span class='n'&gt;visit&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='o'&gt;&amp;amp;&lt;/span&gt;&lt;span class='n'&gt;block&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt;
        &lt;span class='n'&gt;children&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='n'&gt;each&lt;/span&gt; &lt;span class='p'&gt;{&lt;/span&gt;&lt;span class='o'&gt;|&lt;/span&gt;&lt;span class='n'&gt;c&lt;/span&gt;&lt;span class='o'&gt;|&lt;/span&gt; &lt;span class='n'&gt;c&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='n'&gt;visit_all&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='o'&gt;&amp;amp;&lt;/span&gt;&lt;span class='n'&gt;block&lt;/span&gt;&lt;span class='p'&gt;)}&lt;/span&gt;
    &lt;span class='k'&gt;end&lt;/span&gt;

    &lt;span class='k'&gt;def&lt;/span&gt; &lt;span class='nf'&gt;visit&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='o'&gt;&amp;amp;&lt;/span&gt;&lt;span class='n'&gt;block&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt;
        &lt;span class='n'&gt;block&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='n'&gt;call&lt;/span&gt; &lt;span class='nb'&gt;self&lt;/span&gt;
    &lt;span class='k'&gt;end&lt;/span&gt;
&lt;span class='k'&gt;end&lt;/span&gt;

&lt;span class='n'&gt;tree_test&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='no'&gt;Tree&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='n'&gt;new&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='s2'&gt;&amp;quot;Ruby&amp;quot;&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt;
    &lt;span class='o'&gt;[&lt;/span&gt;&lt;span class='no'&gt;Tree&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='n'&gt;new&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='s2'&gt;&amp;quot;Reia&amp;quot;&lt;/span&gt;&lt;span class='p'&gt;),&lt;/span&gt;
     &lt;span class='no'&gt;Tree&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='n'&gt;new&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='s2'&gt;&amp;quot;MacRuby&amp;quot;&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt;&lt;span class='o'&gt;]&lt;/span&gt; &lt;span class='p'&gt;)&lt;/span&gt;

&lt;span class='n'&gt;tree_test2&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='no'&gt;Tree&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='n'&gt;new&lt;/span&gt;&lt;span class='p'&gt;({&lt;/span&gt;&lt;span class='s2'&gt;&amp;quot;Ruby&amp;quot;&lt;/span&gt; &lt;span class='o'&gt;=&amp;gt;&lt;/span&gt;
    &lt;span class='p'&gt;{&lt;/span&gt;&lt;span class='s2'&gt;&amp;quot;Reia&amp;quot;&lt;/span&gt; &lt;span class='o'&gt;=&amp;gt;&lt;/span&gt; &lt;span class='p'&gt;{},&lt;/span&gt;
    &lt;span class='s2'&gt;&amp;quot;MacRuby&amp;quot;&lt;/span&gt; &lt;span class='o'&gt;=&amp;gt;&lt;/span&gt; &lt;span class='p'&gt;{}}&lt;/span&gt;
&lt;span class='p'&gt;})&lt;/span&gt;

&lt;span class='n'&gt;tree_test&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='n'&gt;visit_all&lt;/span&gt; &lt;span class='p'&gt;{&lt;/span&gt; &lt;span class='o'&gt;|&lt;/span&gt;&lt;span class='n'&gt;node&lt;/span&gt;&lt;span class='o'&gt;|&lt;/span&gt; &lt;span class='nb'&gt;p&lt;/span&gt; &lt;span class='n'&gt;node&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='n'&gt;node_name&lt;/span&gt; &lt;span class='p'&gt;}&lt;/span&gt;
&lt;span class='n'&gt;tree_test2&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='n'&gt;visit_all&lt;/span&gt; &lt;span class='p'&gt;{&lt;/span&gt; &lt;span class='o'&gt;|&lt;/span&gt;&lt;span class='n'&gt;node&lt;/span&gt;&lt;span class='o'&gt;|&lt;/span&gt; &lt;span class='nb'&gt;p&lt;/span&gt; &lt;span class='n'&gt;node&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='n'&gt;node_name&lt;/span&gt; &lt;span class='p'&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;div class='tiny_title'&gt;Output&lt;/div&gt;


&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='bash'&gt;&lt;span class='s2'&gt;&amp;quot;Ruby&amp;quot;&lt;/span&gt;
&lt;span class='s2'&gt;&amp;quot;Reia&amp;quot;&lt;/span&gt;
&lt;span class='s2'&gt;&amp;quot;MacRuby&amp;quot;&lt;/span&gt;
&lt;span class='s2'&gt;&amp;quot;Ruby&amp;quot;&lt;/span&gt;
&lt;span class='s2'&gt;&amp;quot;Reia&amp;quot;&lt;/span&gt;
&lt;span class='s2'&gt;&amp;quot;MacRuby&amp;quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;



&lt;div class='question'&gt;&lt;b&gt;3.&lt;/b&gt; Write a simple grep that will print the lines of a file having any occurrences of a phrase anywhere in that line. you will need to do a simple regular expression match and read lines from a file. (This is surprisingly simple in Ruby.) If you want, include line numbers.&lt;/div&gt;


&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='ruby'&gt;&lt;span class='k'&gt;def&lt;/span&gt; &lt;span class='nf'&gt;rbgrep&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='n'&gt;pattern&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='n'&gt;filename&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt;
    &lt;span class='n'&gt;regexp&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='no'&gt;Regexp&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='n'&gt;new&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='n'&gt;pattern&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt;
    &lt;span class='no'&gt;File&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='n'&gt;foreach&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='n'&gt;filename&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='n'&gt;with_index&lt;/span&gt; &lt;span class='p'&gt;{&lt;/span&gt; &lt;span class='o'&gt;|&lt;/span&gt;&lt;span class='n'&gt;line&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='n'&gt;line_num&lt;/span&gt;&lt;span class='o'&gt;|&lt;/span&gt;
        &lt;span class='nb'&gt;puts&lt;/span&gt; &lt;span class='s2'&gt;&amp;quot;&lt;/span&gt;&lt;span class='si'&gt;#{&lt;/span&gt;&lt;span class='n'&gt;line_num&lt;/span&gt;&lt;span class='si'&gt;}&lt;/span&gt;&lt;span class='s2'&gt;: &lt;/span&gt;&lt;span class='si'&gt;#{&lt;/span&gt;&lt;span class='n'&gt;line&lt;/span&gt;&lt;span class='si'&gt;}&lt;/span&gt;&lt;span class='s2'&gt;&amp;quot;&lt;/span&gt; &lt;span class='k'&gt;if&lt;/span&gt; &lt;span class='n'&gt;regexp&lt;/span&gt; &lt;span class='o'&gt;=~&lt;/span&gt; &lt;span class='n'&gt;line&lt;/span&gt;
    &lt;span class='p'&gt;}&lt;/span&gt;
&lt;span class='k'&gt;end&lt;/span&gt;

&lt;span class='n'&gt;rbgrep&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='s2'&gt;&amp;quot;guitar&amp;quot;&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='s2'&gt;&amp;quot;wikipedia_page.txt&amp;quot;&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;div class='tiny_title'&gt;Output&lt;/div&gt;


&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='bash'&gt;15: bass&lt;span class='o'&gt;)&lt;/span&gt; and Andre Olbrich &lt;span class='o'&gt;(&lt;/span&gt;guitar&lt;span class='o'&gt;)&lt;/span&gt; under the name Lucifer&lt;span class='s1'&gt;&amp;#39;s Heritage. The band&lt;/span&gt;
&lt;span class='s1'&gt;17: changes: Markus Dörk (guitar) and Thomen Stauch (drums) were replaced by&lt;/span&gt;
&lt;span class='s1'&gt;48: Nightfall, bass guitar has been played by sessional member Oliver Holzwarth,&lt;/span&gt;
&lt;span class='s1'&gt;55: orchestral backing and a consistent vocal and guitar layering throughout.[9]&lt;/span&gt;
&lt;span class='s1'&gt;87: Blind Guardian&amp;#39;&lt;/span&gt;s music features the staccato guitars and double bass drumming
90: the guitar and vocal tracks, creates the impression of a vast army of musicians
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;/div&gt;
&lt;p&gt;Next in this series: &lt;a href='/blog/2011/12/15/seven-languages-week-1-day-3/'&gt;Day 3 of Ruby&lt;/a&gt;.&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>Seven Languages: Week 1 (Ruby) - Day 1</title>
   <link href="http://nickknowlson.com/blog/2011/11/27/seven-languages-week-1-day-1/"/>
   <updated>2011-11-27T00:00:00-08:00</updated>
   <id>http://nickknowlson.com/blog/2011/11/27/seven-languages-week-1-day-1</id>
   <content type="html">&lt;p&gt;Out of the seven languages in this book, Ruby is the one I was most familiar with previously. It made for an easy start, and gave me a bit of momentum before I started to tackle languages like Prolog. I&amp;#8217;m appreciative of that, because Prolog sure was a struggle for a while.&lt;/p&gt;
&lt;div class='interjection'&gt;&lt;p&gt;
(This article is part of a series of posts I am doing about my journey through the exercises of the book &lt;a href='http://pragprog.com/book/btlang/seven-languages-in-seven-weeks'&gt;Seven Languages In Seven Weeks&lt;/a&gt;. This article is the first one in the series. For an overview see the &lt;a href='/projects/seven-languages-in-seven-weeks/'&gt;Seven Languages project page&lt;/a&gt;.)
&lt;/p&gt;&lt;/div&gt;
&lt;p&gt;Day 1 of Week 1 was pretty basic - a bit of string manipulation and looping. Ruby makes things like this very short and pretty.&lt;/p&gt;

&lt;p&gt;For example, being able to repeat a string like: &lt;code&gt;&amp;quot;Nick &amp;quot; * 10&lt;/code&gt; or loop like: &lt;code&gt;(1..10).each { |num| do_stuff(num) }&lt;/code&gt; is great.&lt;/p&gt;

&lt;p&gt;Here is a nicely formatted version of my solutions to the exercises from Day 1 of Ruby. The home of the following code is &lt;a href='https://github.com/nickknw/seven-languages-in-seven-weeks/blob/master/week-1-ruby/day1.rb'&gt;on github&lt;/a&gt; with the other exercises.&lt;/p&gt;
&lt;div id='formatted_solutions'&gt;

&lt;h3&gt;Find:&lt;/h3&gt;

&lt;div class='question'&gt;&lt;b&gt;1.&lt;/b&gt; A method that substitutes a part of a
string&lt;/div&gt;


&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='ruby'&gt;&lt;span class='nb'&gt;puts&lt;/span&gt; &lt;span class='s2'&gt;&amp;quot;BAM&amp;quot;&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='n'&gt;gsub&lt;/span&gt; &lt;span class='s2'&gt;&amp;quot;M&amp;quot;&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='s2'&gt;&amp;quot;TMAN&amp;quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;div class='tiny_title'&gt;Output:&lt;/div&gt;


&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='bash'&gt;BATMAN
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;Do:&lt;/h3&gt;

&lt;div class='question'&gt;&lt;b&gt;1.&lt;/b&gt; Print the string &quot;Hello World&quot;&lt;/div&gt;


&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='ruby'&gt;&lt;span class='nb'&gt;puts&lt;/span&gt; &lt;span class='s2'&gt;&amp;quot;Hello World&amp;quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;div class='tiny_title'&gt;Output:&lt;/div&gt;


&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='bash'&gt;Hello World
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;div class='question'&gt;&lt;b&gt;2.&lt;/b&gt; For the string &quot;Hello, Ruby,&quot; find the index of the word &quot;Ruby.&quot;&lt;/div&gt;


&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='ruby'&gt;&lt;span class='c1'&gt;# literally:&lt;/span&gt;
&lt;span class='nb'&gt;p&lt;/span&gt; &lt;span class='s2'&gt;&amp;quot;Hello, Ruby,&amp;quot;&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='n'&gt;index&lt;/span&gt; &lt;span class='s2'&gt;&amp;quot;Ruby.&amp;quot;&lt;/span&gt;
&lt;span class='c1'&gt;# realistically:&lt;/span&gt;
&lt;span class='nb'&gt;puts&lt;/span&gt; &lt;span class='s2'&gt;&amp;quot;Hello, Ruby&amp;quot;&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='n'&gt;index&lt;/span&gt; &lt;span class='s2'&gt;&amp;quot;Ruby&amp;quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;div class='tiny_title'&gt;Output:&lt;/div&gt;


&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='bash'&gt;nil
7
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;div class='question'&gt;&lt;b&gt;3.&lt;/b&gt; Print your name ten times&lt;/div&gt;


&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='ruby'&gt;&lt;span class='nb'&gt;puts&lt;/span&gt; &lt;span class='s2'&gt;&amp;quot;Nick &amp;quot;&lt;/span&gt; &lt;span class='o'&gt;*&lt;/span&gt; &lt;span class='mi'&gt;10&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;div class='tiny_title'&gt;Output:&lt;/div&gt;


&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='bash'&gt;Nick Nick Nick Nick Nick Nick Nick Nick Nick Nick 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;div class='question'&gt;&lt;b&gt;4.&lt;/b&gt; Print the string &quot;This is sentence number 1,&quot; where the number 1 changes from 1 to 10&lt;/div&gt;


&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='ruby'&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='mi'&gt;1&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='n'&gt;.&lt;/span&gt;&lt;span class='mi'&gt;10&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='n'&gt;each&lt;/span&gt; &lt;span class='p'&gt;{&lt;/span&gt; &lt;span class='o'&gt;|&lt;/span&gt;&lt;span class='n'&gt;num&lt;/span&gt;&lt;span class='o'&gt;|&lt;/span&gt; &lt;span class='nb'&gt;puts&lt;/span&gt; &lt;span class='s2'&gt;&amp;quot;This is sentence number &lt;/span&gt;&lt;span class='si'&gt;#{&lt;/span&gt;&lt;span class='n'&gt;num&lt;/span&gt;&lt;span class='si'&gt;}&lt;/span&gt;&lt;span class='s2'&gt;&amp;quot;&lt;/span&gt; &lt;span class='p'&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;div class='tiny_title'&gt;Output:&lt;/div&gt;


&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='bash'&gt;This is sentence number 1
This is sentence number 2
This is sentence number 3
This is sentence number 4
This is sentence number 5
This is sentence number 6
This is sentence number 7
This is sentence number 8
This is sentence number 9
This is sentence number 10
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;div class='question'&gt;&lt;b&gt;Bonus:&lt;/b&gt; Write a program that picks a random number. Let a player guess the number, telling the player whether the guess is too low or too high.&lt;/div&gt;


&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='ruby'&gt;&lt;span class='n'&gt;random_number&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='nb'&gt;rand&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='mi'&gt;1000&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt; &lt;span class='o'&gt;+&lt;/span&gt; &lt;span class='mi'&gt;1&lt;/span&gt;
&lt;span class='n'&gt;guess&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='mi'&gt;0&lt;/span&gt;

&lt;span class='k'&gt;while&lt;/span&gt; &lt;span class='n'&gt;guess&lt;/span&gt; &lt;span class='o'&gt;!=&lt;/span&gt; &lt;span class='n'&gt;random_number&lt;/span&gt; &lt;span class='k'&gt;do&lt;/span&gt;
    &lt;span class='nb'&gt;print&lt;/span&gt; &lt;span class='s2'&gt;&amp;quot;Pick a number between 1 and 1000: &amp;quot;&lt;/span&gt;
    &lt;span class='n'&gt;guess&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='nb'&gt;gets&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='n'&gt;to_i&lt;/span&gt;
    &lt;span class='nb'&gt;puts&lt;/span&gt; &lt;span class='s2'&gt;&amp;quot;Too low!&amp;quot;&lt;/span&gt; &lt;span class='k'&gt;if&lt;/span&gt; &lt;span class='n'&gt;guess&lt;/span&gt; &lt;span class='o'&gt;&amp;lt;&lt;/span&gt; &lt;span class='n'&gt;random_number&lt;/span&gt;
    &lt;span class='nb'&gt;puts&lt;/span&gt; &lt;span class='s2'&gt;&amp;quot;Too high!&amp;quot;&lt;/span&gt; &lt;span class='k'&gt;if&lt;/span&gt; &lt;span class='n'&gt;guess&lt;/span&gt; &lt;span class='o'&gt;&amp;gt;&lt;/span&gt; &lt;span class='n'&gt;random_number&lt;/span&gt;
&lt;span class='k'&gt;end&lt;/span&gt;

&lt;span class='nb'&gt;puts&lt;/span&gt; &lt;span class='s2'&gt;&amp;quot;Got it! It was &lt;/span&gt;&lt;span class='si'&gt;#{&lt;/span&gt;&lt;span class='n'&gt;random_number&lt;/span&gt;&lt;span class='si'&gt;}&lt;/span&gt;&lt;span class='s2'&gt;&amp;quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;div class='tiny_title'&gt;Output:&lt;/div&gt;


&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='bash'&gt;Pick a number between 1 and 1000: 500
Too high!
Pick a number between 1 and 1000: 250
Too high!
Pick a number between 1 and 1000: 125
Too low!
Pick a number between 1 and 1000: 192
Too high!
Pick a number between 1 and 1000: 158
Too high!
Pick a number between 1 and 1000: 141
Too high!
Pick a number between 1 and 1000: 133
Too high!
Pick a number between 1 and 1000: 129
Got it! It was 129
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;/div&gt;
&lt;p&gt;Next in this series: &lt;a href='/blog/2011/12/04/seven-languages-week-1-day-2/'&gt;Day 2 of Ruby&lt;/a&gt;&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>Categorized Weaknesses from the State of Haskell 2011 Survey</title>
   <link href="http://nickknowlson.com/blog/2011/09/12/haskell-survey-categorized-weaknesses/"/>
   <updated>2011-09-12T00:00:00-07:00</updated>
   <id>http://nickknowlson.com/blog/2011/09/12/haskell-survey-categorized-weaknesses</id>
   <content type="html">&lt;p&gt;After reading about the results of the &lt;a href='http://blog.johantibell.com/2011/08/results-from-state-of-haskell-2011.html'&gt;State of Haskell, 2011 Survey&lt;/a&gt;, I was curious about the free-form feedback given in response to &amp;#8220;What do you think is Haskell&amp;#8217;s most glaring weakness / blind spot / problem?&amp;#8221;.&lt;/p&gt;

&lt;p&gt;So I got the raw results and started reading through and categorizing them as I went. I didn&amp;#8217;t intend to do the whole thing when I started &amp;#8211; there are a LOT of answers &amp;#8211; but over a few days I finished it off.&lt;/p&gt;

&lt;p&gt;As I read each one I decided whether it would fit into an existing category or whether it deserved a new one. If one person gave multiple weaknesses I split them up and put each where it belonged. A couple of times one issue really seemed to fit in two categories, so I put it in each of them, but I tried to minimize the amount of times this happened.&lt;/p&gt;

&lt;p&gt;It&amp;#8217;s currently in &lt;a href='https://docs.google.com/spreadsheet/ccc?key=0Aq8X8wb4SdlWdG1XM3NoLXhnWl9VR3d6OURYMTA2ZXc&amp;amp;hl=en_US'&gt;a spreadsheet on Google Docs&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;If you read through it carefully enough you almost definitely will see feedback in one category that should have been in another. There &lt;em&gt;WILL BE&lt;/em&gt; mistakes. There were a lot of responses and with continually evolving categories it is easy to mix some up. Feel free to let me know if you see any errors and I&amp;#8217;ll update it.&lt;/p&gt;

&lt;h2 id='so_what_were_the_results'&gt;So what &lt;strong&gt;were&lt;/strong&gt; the results?&lt;/h2&gt;

&lt;p&gt;Here&amp;#8217;s an overview of roughly how many people thought there was a problem in each category:&lt;/p&gt;

&lt;p&gt;&lt;img alt='Weaknesses from State of Haskell Bar Graph' src='/img/state_of_haskell_2011_weakness.png' /&gt;&lt;/p&gt;

&lt;p&gt;It is probably important to note that I didn&amp;#8217;t attempt to verify the accuracy of any of the claims, so this graph represents the public &lt;strong&gt;perception&lt;/strong&gt; of where the problems are, not necessarily where the problems actually are. It is still very important information though, and likely does match up very closely with where the problems are.&lt;/p&gt;
&lt;h3&gt;Libraries, Documentation, Hackage and Cabal&lt;/h3&gt;
&lt;p&gt;The category for libraries absolutely overwhelmed the rest. I ended up splitting it into four: Libraries / Packages, Documentation / Library Documentation, Cabal, and Hackage. The feedback in the general &amp;#8216;Libraries / Packages&amp;#8217; category ranged from requests for specific kinds of libraries to pointing out dependency problems to problems with library stability and maturity. Here&amp;#8217;s a few samples:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Most libraries are not ready for production use because they &lt;br /&gt;a) are incomplete (wrt. to conformance to specifications like XML / XML InfoSet)&lt;br /&gt;b) have unacceptable performance for non-toy use (i.e. use strings, too many allocations, etc)&lt;br /&gt;c) too often change APIs or don&amp;#8217;t have a stable maintained version along with an unstable development version&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
&lt;p&gt;Competing and incomplete libraries.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
&lt;p&gt;I&amp;#8217;ve had problems with borking my packages when installing a new one. New req gets pulled in and causes global/user level dependency problems. If I didn&amp;#8217;t already know how to fix it, there&amp;#8217;s a good chance I&amp;#8217;d give up.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;A few responses in the &lt;strong&gt;Library Documentation&lt;/strong&gt; category walk a fine line between it and the &amp;#8216;hard to learn&amp;#8217; one, but enough people targeted library docs specifically that I broke it off into its own. Aside from the general statements of &amp;#8220;not enough, and what is there is largely not good&amp;#8221;, something specific that was repeatedly asked for was &lt;em&gt;more examples&lt;/em&gt;. There was some great feedback in this section:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;A lot of libraries seem to rely on only having &amp;#8220;reference&amp;#8221; documentation, that is an index of every function. This is not enough: More documentation should be written geared towards use of the library. Index and reference is good for hacking the library or doing weird stuff, but when developing, I just want to grab the library and start using it in the way the developer intended.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
&lt;p&gt;By far the biggest problem is the lack of a &amp;#8220;middle ground&amp;#8221; in documentation. There is ample beginner/tutorial documentation, and extensive &amp;#8220;academic expert&amp;#8221; documentation (proofs, discussions of mathematical properties of zippers, etc). However, there is very little &amp;#8220;application writing&amp;#8221; documentation. The problem crops up most often with libraries. Often a library that does something very useful has no non-trivial examples included, and no discussion or tutorial of how to actually put it to use. The library&amp;#8217;s API functions are often described in terms of their mathematical properties rather than what you would use them for in a &amp;#8220;real&amp;#8221; program.&lt;/p&gt;

&lt;p&gt;A few libraries I&amp;#8217;ve suffered this with include fclabels, data-accessor, fgl, and especially haxml. All of these are practically indispensable for writing applications, but have almost no application-oriented documentation. Haxml was a particularly sad case; I had to give up trying to understand it entirely due to the lack of useful documentation.&lt;/p&gt;

&lt;p&gt;This type of documentation may seem to &amp;#8220;fall out&amp;#8221; from a mathematically-oriented understanding of the library (such as haxml&amp;#8217;s combinator scheme, or the concept of &amp;#8220;lenses&amp;#8221; in fclabels), but an application programmer does not have time to work through proofs of lens properties and then figure out what they might be good for in a program. Instead, the application programmer needs cookbook-style documentation to get something up and running, and then s/he can come to understand and make use of the underlying math.&lt;/p&gt;

&lt;p&gt;One of the few libraries that does this right is Parsec. fclabels at least had a reasonable toy example, but data-accessor fails epically in this regard.&lt;/p&gt;

&lt;p&gt;If application programmers could &amp;#8220;get their programs started&amp;#8221; more easily, without having to burn so much time wading through math-oriented documentation, I believe Haskell would be more widely adopted. The existence of math-oriented documentation is a very good thing, and is quite helpful when you need to know about those properties, but such documentation is not sufficient for bootstrapping an application.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;What a great, detailed response.&lt;/p&gt;

&lt;p&gt;The &lt;strong&gt;Hackage&lt;/strong&gt; responses had a clear central theme of &amp;#8216;we need a way to gauge the quality and popularity of packages&amp;#8217;. People really want a way to find out how many other people are using a library, and to see what the general opinion of it is.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;It is still not always easy to know what the &amp;#8220;canonical&amp;#8221; library for a given task is, although one often exists. Hackage feels too crowded at times.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
&lt;p&gt;Hackage is a mess, it&amp;#8217;s very difficult to find libraries, it&amp;#8217;s very difficult to know which libraries are well designed for which tasks and there are no links between libraries that are similar. There are no statistics to know which libraries are widely used and no voting system. Old libraries that no longer work are sill in Hackage and it is not possible to filter them out. Package groups like yesod are a mess on Hackage, some packages are up to date, others are old, others have been folded into larger packages and will cause errors if you try to build them.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The feedback that mentioned &lt;strong&gt;Cabal&lt;/strong&gt; specifically was complaining about how cabal handles dependency problems and versioning. Notably, one person wrote in to champion cabal-dev as the solution to the exact problems everyone else is having:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;This isn&amp;#8217;t a weakness exactly. In fact, having found cabal-dev, I find it is rather a strength. I would like to see more &amp;#8220;official&amp;#8221; development done with it, and would like to see it become a part of the Haskell Platform.&lt;/p&gt;

&lt;p&gt;Without cabal-dev, the &amp;#8220;likelihood that a library will build on my machine&amp;#8221; would be very low (a 1). With it, it jumps to 5. I put in a 4, to indicate that it is a solved problem, IF one has the right tools installed. Also, I have built up a lot of bash scripts to streamline my cabal-dev workflow.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;There is a great post on the Haskell reddit where &lt;a href='http://www.reddit.com/r/haskell/comments/f3ykj/psa_use_cabaldev_to_solve_dependency_problems/'&gt;jmillikin goes into detail&lt;/a&gt; about how and why cabal-dev can help with dependency hell. I am getting the impression that the real problem with cabal is just that more people need to be aware of cabal-dev!&lt;/p&gt;
&lt;h3&gt;Tools and Performance&lt;/h3&gt;
&lt;p&gt;The next largest group of responses centered around the tools available. In this category I included everything from IDEs like Leksah, to requests for better debugging and profiling tools. Very closely linked to the Tools category was Performance; most responses in that category were saying that it was difficult to &lt;em&gt;reason&lt;/em&gt; about performance. That performance was not typically poor, just that it was unpredictable. This problem can be alleviated by having better tools.&lt;/p&gt;

&lt;p&gt;The feedback that mentioned &lt;strong&gt;tools&lt;/strong&gt; targeted a bunch of different things. These were the most commonly mentioned:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;IDE support (mostly: Leksah is good but could be better)&lt;/li&gt;

&lt;li&gt;Space leak analysis tools&lt;/li&gt;

&lt;li&gt;Hard to analyze statically&lt;/li&gt;

&lt;li&gt;Refactoring&lt;/li&gt;

&lt;li&gt;Debugging&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Some people give very specific examples, it is worth looking through these responses to hear them describe it themselves. Here are a couple samples:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Reasoning about strictness is often difficult, but even finding simple problems like circular computations that trigger &amp;#171;loop&amp;#187; exceptions in the runtime system and similar exceptions are hard to trace to a particular source. +RTS -xc -RTS helps, but is often not very precise. Debugging tools to make this easier would be the most useful improvement for me (or a more robust GHCi that won&amp;#8217;t choke on unusual projects).&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
&lt;p&gt;My major concerns are with runtime analysis. I find it difficult to get the stack when the head of an empty list is requested or to infer by profiling which part of a program is retaining memory which should be freed.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
&lt;p&gt;Lack of a decent IDE. Leksah is the closest yet, but if you compare Haskell to other languages with good commercial penetration, it&amp;#8217;s a glaring omission. The IDE should be cross-platform and offer a single integration point for all Haskell&amp;#8217;s development tools, which I hope will continue to improve.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Almost everyone giving &lt;strong&gt;performance&lt;/strong&gt; feedback was echoing the same sentiments:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;hard to reason about performance,&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
&lt;p&gt;hard to reason about space usage&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
&lt;p&gt;As noted and clearly in the mind of this survey&amp;#8217;s author, reasoning about space and time is the single most tricky thing when programming in a lazy FL. I can wax lyrical as much as anyone else about the representational benefits of Haskell and indeed all the robust compile-time type checking, but runtime performance &lt;em&gt;can&lt;/em&gt; be the thorn in the flesh.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
&lt;p&gt;Space leaks/how often we have to deal with them, and how difficult it can be to figure out where they are in large applications.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3&gt;Learning / Teaching, Mainstream Usage, and Culture&lt;/h3&gt;
&lt;p&gt;This group is all about the barrier to entry that there is when trying to learn Haskell.&lt;/p&gt;

&lt;p&gt;Feedback in the &lt;strong&gt;Learning / Teaching&lt;/strong&gt; category says that it is just a difficult language to learn, full of concepts that you don&amp;#8217;t normally get exposure to in other languages. Some people also say that there could be better materials available to help people that are learning. Amusingly, one person complained that there were not enough monad tutorials.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Height of the learning curve. To write useful code, many concepts must be understood (laziness, functional programming, declarative vs imperative code, monads, monad transformers, applicative functors) which takes a lot of time.&lt;/p&gt;

&lt;p&gt;This makes writing Haskell code at work hard, since nobody will be able to understand it.&lt;/p&gt;

&lt;p&gt;Avoid success at all costs though, right? We wouldn&amp;#8217;t want a community like the Ruby one.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
&lt;p&gt;Availability of instruction to go from beginner to intermediate&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
&lt;p&gt;The Haskell &amp;#8220;way&amp;#8221; of doing things is so different, it&amp;#8217;s a lot of effort to adapt. That said there&amp;#8217;s not really a way round it I don&amp;#8217;t think. Things like LYAH and RWH help too.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;There was more feedback about how &lt;strong&gt;mainstream&lt;/strong&gt; Haskell is (or isn&amp;#8217;t) than I would have guessed. Half the responses just leave it at &amp;#8220;not enough people using it&amp;#8221;, the rest pinpoint specific problems or offer some solutions. Notably, one person disagrees with almost everyone who thought that Performance was a serious problem for Haskell.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Bad public image due to FUD, such as &amp;#8221;&amp;#8221;It is hard to reason about performance and space usage of Haskell programs&amp;#8221;&amp;#8221; (not any harder in practice than for other mainstream languages given the same level of skill and experience, which is usually not the case for people who complain), &amp;#8221;&amp;#8221;Haskell is not suitable for enterprise commercial development&amp;#8221;&amp;#8221; (that&amp;#8217;s what I do for a living now and it&amp;#8217;s great; how hard have the people who complain tried to build a Haskell career?), etc. The problem with this kind of &amp;#8221;&amp;#8221;survey&amp;#8221;&amp;#8221; is that it tends to reinforce that kind of FUD. But it&amp;#8217;s good to look for ways to improve; I just hope you&amp;#8217;ll try to remove some of that bias in the tone of your results. Thanks for this great survey!&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
&lt;p&gt;Lack of backing in time and resources to take the language and turn it into a professional grade platform. The community has put in an incredible amount of effort, and it shows. But it just doesn&amp;#8217;t have anywhere near the polish of commercially backed platforms such as Java or C++. This is very disappointing since the language itself and a lot of the libraries on Hackage are so incredible.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
&lt;p&gt;The reputation as an &amp;#8220;academic&amp;#8221; language you can&amp;#8217;t do &amp;#8220;real world&amp;#8221; development in is still out there and hurts adaption.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The &lt;strong&gt;Culture&lt;/strong&gt; group is pretty small and has a lot of overlap with the above two. It maybe actually should have been merged into one or the other, looking back at it now. Really what is emphasized though, is that Haskell still very much has an academic culture, and that can make it harder for people to pick it up.&lt;/p&gt;

&lt;p&gt;Darrin Thompson made a blog post with a good explanation of why the academic culture can make things more difficult and linked to it in the response box. I&amp;#8217;ll include a tantalizing quote, but you really should &lt;a href='http://willowbend.cx/2011/07/22/whats-wrong-with-learning-haskell/'&gt;go read the rest of it&lt;/a&gt;.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&amp;#8230;&lt;br /&gt;I think especially early on that I could have had an easier time. Some mechanism to steer me away from some Haskell resources would have helped. I’m not sure what that mechanism might have looked like, so I handwave over the details here. Perhaps you formalists know handwaving over the details as the “Axiom of Choice,” no? I hearby invoke it.&lt;/p&gt;

&lt;p&gt;For instance, (Or in formal terms, Example 1.1) I tried to get in tune with the current practice of Haskell by lurking on Haskell-Cafe. It worked when I was learning Ruby. Not here. This was a bad idea. I learned nothing and it made me feel bad. Yeah, poor me.&lt;/p&gt;

&lt;p&gt;Another time (Example 1.2) I tried to read the Comonad Reader blog. Another bad idea.&lt;/p&gt;

&lt;p&gt;As a relative Haskell newbie, whose not-Haskell day job is web development, integrating systems, build engineering, tormenting managers, and sometimes just writing a lot shell scripts, Haskell-Cafe and the Comonad Reader are, and this important, don’t miss this: not &lt;em&gt;for&lt;/em&gt; me.&lt;br /&gt;&amp;#8230;&lt;/p&gt;

&lt;p&gt;&lt;a href='http://willowbend.cx/2011/07/22/whats-wrong-with-learning-haskell/'&gt;&amp;#91;source&amp;#93;&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;I didn&amp;#8217;t get the impression anyone was trying to target this as a &lt;em&gt;negative&lt;/em&gt; thing, just point out that it does have its tradeoffs.&lt;/p&gt;
&lt;h3&gt;GUI and Support For Other Platforms&lt;/h3&gt;
&lt;p&gt;These two categories also blend together a bit. I think of the GUI responses as just a kind of special case of the Platform Support responses.&lt;/p&gt;

&lt;p&gt;People &lt;em&gt;really&lt;/em&gt; want an easy, good cross-platform &lt;strong&gt;GUI&lt;/strong&gt; toolkit to use with Haskell (as well as better platform-specific solutions).&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Easy and stable out-of-box cross-platform GUI,&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
&lt;p&gt;There still does not exist an obvious GUI solution for OS X, or an obvious audio solution that does not require the writing of a great deal of &amp;#8220;boilerplate&amp;#8221; code.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
&lt;p&gt;Haskell doesn&amp;#8217;t have a great GUI story. I think I&amp;#8217;m allowed to say this as I maintain wxHaskell, and it&amp;#8217;s not where I would like it to be.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;In the more general case of &lt;strong&gt;Platform Support&lt;/strong&gt; responses, there were a fair amount of people saying getting programs to run on Windows was pretty difficult. Some people mentioned a problem with OS X Snow Leopard as well.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;If the goal is for Haskell to be more widely adopted, I think a number of integration details are important. Things like a stable ABI, bindings to more OS-specific services (such as Mac and Windows GUI systems), and even things like smaller compiled executables would probably make Haskell more attractive in production environments.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
&lt;p&gt;Working with foreign libraries on a non-unix system (microsoft windows) is a pain. The build system could definitely need some improvements in that area.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3&gt;Language and Laziness&lt;/h3&gt;
&lt;p&gt;The feedback on the &lt;strong&gt;language&lt;/strong&gt; itself is going to be harder for me to sum up. There are a few obvious trends (no parameterized modules, module system, stack traces, record syntax), and then there&amp;#8217;s a lot of detailed feedback that I can&amp;#8217;t understand. :) I&amp;#8217;ll try to pick out a couple of replies that looked especially well-thought out.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Too many string-like types. Abstraction over them that would provide stable and practical API would be nice. Change String from type to class?&lt;/p&gt;

&lt;p&gt;I&amp;#8217;d really like to see Functor (=&amp;gt; Pointed) =&amp;gt; Applicative =&amp;gt; Monad one day.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
&lt;p&gt;Then, of course, the big HList elephant. It gives much needed expressivity and generalisation to everything having to do with records, and having appropriate type-level programming capabilities to write an easy to use and extend HList library would be awesome. The current state is almost as bad as C++ templates.&amp;#8221;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
&lt;p&gt;Some of the cruft from ancient history, such as Monad not being a subclass of Pointed, Monad having “fail” and pure Prelude functions using exceptions would be nice to get fixed. Not that any of that is really a problem, just a wart.&lt;/p&gt;

&lt;p&gt;It would be nice to have a sufficiently powerful macro/metaprogramming system that is considerably nicer than TH (to the programmer who has to implement the generation of the AST).&lt;/p&gt;

&lt;p&gt;(Haskell is also missing PHP’s excellent Magic Quotes functionality.)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;I like that last person&amp;#8217;s sense of humour.&lt;/p&gt;

&lt;p&gt;I&amp;#8217;d like to also link to a very relevant Yesod blog post: &lt;a href='http://www.yesodweb.com/blog/2011/09/limitations-of-haskell'&gt;&amp;#8220;The Limitations of Haskell&amp;#8221;&lt;/a&gt; by Greg Weber. He brings the perspective of an expert Haskell-user solving practical problems, and writes clearly about it to boot. He singles out error messages, stack traces, code reloading (not mentioned by a single survey respondent as far as I can remember), dependency hell, and the record syntax issue.&lt;/p&gt;

&lt;p&gt;The stack traces issue may actually be resolved &lt;a href='https://plus.google.com/u/0/107890464054636586545/posts/XE4T6hHm3tK'&gt;sometime in the near future&lt;/a&gt;, from the sound of it.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Laziness&lt;/strong&gt; by default was such a common item of contention (almost equaling the rest of the language feedback combined!) that I split it out into its own category. A lot of the remarks in this one are very terse (e.g. &amp;#8216;laziness&amp;#8217; or &amp;#8216;being lazy by default&amp;#8217;). Here&amp;#8217;s one person that expanded on their thoughts a bit:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;- lazy evaluation incompatible with strong analysis of algorithms&lt;/p&gt;

&lt;p&gt;- lazy evaluation and parallel computing seem to be at odds in GHC. Robert Harper has commented on that.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;And here&amp;#8217;s a counterpoint by another respondent:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;The community seems to largely believe that laziness is a weakness, when in fact it is very substantially important to getting both good performance and good compositionality.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;In any case, since Haskell is partially a long-term experiment to see how well being lazy by default works out, I don&amp;#8217;t see this changing any time soon.&lt;/p&gt;
&lt;h3&gt;Stability and GHC&lt;/h3&gt;
&lt;p&gt;A lot of people expressed concerns about having no serious alternatives to GHC. The downsides most cited are over-dependence on GHC-specific features, and that few people are sticking to the Haskell 98 or 2010 standards. There is also some concern about how frequently GHC makes breaking changes, preventing old libraries from building on a newer version.&lt;/p&gt;

&lt;p&gt;This first person summarizes very well the feedback involving &lt;strong&gt;stability&lt;/strong&gt;.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;API/language stability!&lt;/p&gt;

&lt;p&gt;When I come back to code I wrote back in 2009 and try to compile with current Haskell platform, new libraries cabal installs have different APIs, old version of libraries won&amp;#8217;t compile on current platform. This is very different to my experience with java/python, and makes it hard to conceive of putting Haskell into production products.&lt;/p&gt;

&lt;p&gt;Somewhat unusually, Haskell does have a good language definition, but it&amp;#8217;s almost useless since the vast majority of useful packages depend on non-standardised extensions. Haskell&amp;#8217; needs enough features that the majority of Hackage can be built within the standard language so that it&amp;#8217;s feasible to code real world applications against a standard with long term support.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
&lt;p&gt;GHC is absolutely great but it would be good to have some serious alternative&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
&lt;p&gt;Even though Haskell is standardized, the old code seems to be breaking quite often! Either the API of the base libraries is changed, or GHC behaves differently, or cabal stops working. Sure, all languages have that phase in the beginning, but I think Haskell should be past that by now. I wish the Haskell ecosystem could be a bit more stable while still making progress.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Some also had criticisms specific to &lt;strong&gt;GHC&lt;/strong&gt;, mostly mentioning its error messages and stability.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;(not Haskell per se, but &amp;#8230;) ghc minor version changes breaking (hackage) libraries&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
&lt;p&gt;Static type compiler errors, when behaviour is not as expected. Compiler diagnostic messages could be much more helpful. The user should not have to reverse engineer GHC and/or wade through weeks of sprawling academic reading material to discover what is going on.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;One person had license concerns:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;LGPL. ghc cannot be used for developing commercial software products out of the box. Many Hackage libraries that are not LGPL are still infected by it indirectly due to library dependencies.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;I would actually love it if someone could go into more detail on this. I know GHC itself uses a BSD-like license. Is this person maybe referring to &lt;a href='http://www.well-typed.com/blog/32'&gt;the GMP issue&lt;/a&gt;?&lt;/p&gt;
&lt;h3&gt;Other Backends, FFI, Integration&lt;/h3&gt;
&lt;p&gt;These three categories are all about how well Haskell plays with other languages.&lt;/p&gt;

&lt;p&gt;I was actually pretty shocked to discover how many people thought Haskell&amp;#8217;s most glaring weakness was not being able to &lt;strong&gt;run on the CLR or JVM&lt;/strong&gt;.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;CLR/JVM/JavaScript backends&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
&lt;p&gt;Another problem for adopting Haskell at work would be that it doesn&amp;#8217;t run on JVM/CLR. So there is no option for polyglotting&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Fortunately, there are a couple a like-minded people working on mitigating this issue right now with &lt;a href='http://code.google.com/p/frege/'&gt;Frege&lt;/a&gt; (&lt;a href='http://www.reddit.com/r/haskell/comments/kadx6/frege_haskell_like_language_on_jvm_tries_to/'&gt;discussion&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;There were also some less ambitious requests for a better &lt;strong&gt;FFI&lt;/strong&gt; to C++, Objective-C and Python.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Difficulty of integration with C++ (not C). Ability to import C++ headers directly and call C++ methods without inventing wrapper layers would help immensely here at Google.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
&lt;p&gt;Can&amp;#8217;t communicate with scripting languages like Python (actually possible but painful).&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;There were 4 responses that I ended up putting under a general &lt;strong&gt;Integration&lt;/strong&gt; category. Three were (kind of vague) requests for more integration with mainstream OOP environments, but one person had a more detailed request:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Integration with other build systems. Pretending that cabal is the only true thing is only that, pretending. Until integration with at least auto tools is better, Haskell project will be standalone and integration Haskell into a bigger system will be painful (one has to duplicate cabal&amp;#8217;s work in detecting libraries, library version, etc.).&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3&gt;Distribution and Deployment&lt;/h3&gt;
&lt;p&gt;There was only a little bit of feedback that fit into this category, but there seemed to be some pretty good points.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;We&amp;#8217;re not looking at easy distribution in a serious way yet.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
&lt;p&gt;Distribution of Haskell programs to others is still hard: at best I can tell them to get the platform, run a bunch of cabal commands, then build my program.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3&gt;Doesn't Improve Productivity&lt;/h3&gt;
&lt;p&gt;I&amp;#8217;m not sure what to say about this category. I don&amp;#8217;t think I&amp;#8217;ve heard of someone having this experience with Haskell before. I&amp;#8217;m glad it doesn&amp;#8217;t seem to be a widespread occurrence (although I will concede the survey audience is probably &lt;em&gt;just a little bit&lt;/em&gt; biased).&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Although the purity and strong-type-system sound all well and good, I&amp;#8217;m not actually convinced yet that Haskell improves productivity. Perhaps I&amp;#8217;m not &amp;#8220;doing it right&amp;#8221;, but even after 8 months I generally write code and think, &amp;#8220;I could have slogged through that faster in C++.&amp;#8221; And at least then I could have used it at work without fear of being &amp;#8216;that guy&amp;#8217;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id='responses_i_couldnt_fit_in_a_category'&gt;Responses I Couldn&amp;#8217;t Fit In A Category&lt;/h2&gt;

&lt;p&gt;These were the responses that either mystified me, covered too many topics to split apart and remain coherent, or were just too well written for me to be able to break them up.&lt;/p&gt;

&lt;p&gt;This first one was definitely one of the former!&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;confusion with Pascal!&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&amp;#8230;And now on to a few responses that I thought really deserved a highlight.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Although it is generally regarded a good thing to have diversification, there are two items where I&amp;#8217;d like appreciate an authoritatively dictated choice:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;) The non-unified (esp. among libraries) Error/Exception handling, as well as&lt;/p&gt;
&lt;/li&gt;

&lt;li&gt;
&lt;p&gt;) the record-update problem (there are the lenses/fclabels/etc packages, but again, this is a non-unified approach, and it feels clumsy to have to use underscores to mark fields &amp;#8211; I&amp;#8217;d prefer a GHC language extension)&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;These are &lt;em&gt;the&lt;/em&gt; two things (among a few other minor issues) that I dislike the most&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
&lt;p&gt;2) Lack of support for dev environments &amp;#8211; coming from Python where it&amp;#8217;s extremely easy and beneficial to build a virtualenv or sandbox environment, using cabal-dev requires a lot more work. And when you&amp;#8217;re trying to use it with packages like Yesod that rely on your main cabal folder or global variables, it either doesn&amp;#8217;t work or requires a lot of tweaking. I&amp;#8217;d love to see a better way to build supported virtual Haskell environments to cut down on the headaches of managing multiple dependencies and different versions of packages&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
&lt;p&gt;Even after 20 years we are still struggling with some basic concepts and their implementation in Haskell. A good example is iteratees: the idea is rather new, the problem that it solves is one of the most basic ones, and there are several competing implementations, so it&amp;#8217;s not clear what should one use.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;And with that, I&amp;#8217;ve finally reached the end of this in-depth look at the feedback on Haskell&amp;#8217;s most glaring weakness!&lt;/p&gt;

&lt;h2 id='raw_data'&gt;Raw Data&lt;/h2&gt;

&lt;p&gt;My list that is split up by categories is currently in a &lt;a href='https://docs.google.com/spreadsheet/ccc?key=0Aq8X8wb4SdlWdG1XM3NoLXhnWl9VR3d6OURYMTA2ZXc&amp;amp;hl=en_US'&gt;spreadsheet on Google Docs&lt;/a&gt;. From there you have a bunch of different formats available to download or export it in.&lt;/p&gt;

&lt;h2 id='summary'&gt;Summary&lt;/h2&gt;
&lt;h3&gt;First Place: Libraries&lt;/h3&gt;
&lt;p&gt;By far the largest amount of people think Haskell&amp;#8217;s most glaring weakness is related to its libraries and the ecosystem around them. Specifically:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Quality of libraries is inconsistent, and we are missing some specific kinds of libraries&lt;/li&gt;

&lt;li&gt;Both the quality and amount of library documentation are lacking (needs more examples!)&lt;/li&gt;

&lt;li&gt;Hackage needs to include a way for people to gauge package quality and popularity&lt;/li&gt;

&lt;li&gt;More people need to know about cabal-dev (also cabal and cabel-dev could possibly use some improvements)&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Second Place: Tools&lt;/h3&gt;
&lt;p&gt;There seems to be a lot of room for improvement in Haskell&amp;#8217;s toolchain as well. Some specific kinds of tools that were mentioned often were:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;IDE support (mostly: Leksah is good but could be better)&lt;/li&gt;

&lt;li&gt;Space leak analysis tools&lt;/li&gt;

&lt;li&gt;Hard to analyze statically&lt;/li&gt;

&lt;li&gt;Refactoring&lt;/li&gt;

&lt;li&gt;Debugging&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Having good tools for time and space leak analysis will also help to address all the concerns raised about performance.&lt;/p&gt;
&lt;h3&gt;Third Place: Barrier to Entry&lt;/h3&gt;
&lt;p&gt;There are several different parts to the barrier to entry. I can pick out the following common threads from the feedback available:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The inherent difficulty of the language&lt;/li&gt;

&lt;li&gt;Gaps in instructional material between beginner and intermediate. More material that emphasizes being friendly and practical would help.&lt;/li&gt;

&lt;li&gt;Reputation as difficult, academic, and hard to reason about performance&lt;/li&gt;

&lt;li&gt;Academic culture&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I want to reiterate &amp;#8212; these are not all &amp;#8216;problems that should be fixed&amp;#8217;. Haskell would not be what it is without the academic culture and the powerful language, for example. But, both of these have tradeoffs that should be acknowledged, and maybe rendered less important by improving the areas that &lt;strong&gt;do&lt;/strong&gt; need it.&lt;/p&gt;
&lt;h3&gt;Honourable Mentions: Cross-platform support and Language&lt;/h3&gt;
&lt;p&gt;I also want to shine the spotlight on at least two more areas. There were a lot of people that wanted better cross platform support, of which the majority were most concerned with GUI support. The cross-platform feedback generally fell into two areas:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The ability to easily write a simple cross-platform application&lt;/li&gt;

&lt;li&gt;The ability to better integrate with OS-specific libraries for a better experience&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;There weren&amp;#8217;t as many people with feedback on the language itself, but there was some good targeted feedback that I don&amp;#8217;t think should be overlooked. I highlighted a couple of more detailed replies in the main section of this above, but the general trend looked like:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Haskell is lazy by default&lt;/li&gt;

&lt;li&gt;Lack of parameterized modules&lt;/li&gt;

&lt;li&gt;Module system needs improvement in general&lt;/li&gt;

&lt;li&gt;Lack of stack traces&lt;/li&gt;

&lt;li&gt;Record syntax needs work&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;And that&amp;#8217;s it! Please feel free share your own thoughts on this or point out any errors I&amp;#8217;ve made. I&amp;#8217;d like to thank &lt;a href='http://blog.johantibell.com/'&gt;Johan Tibell&lt;/a&gt; for running the &lt;a href='http://blog.johantibell.com/2011/08/results-from-state-of-haskell-2011.html'&gt;State of Haskell 2011 Survey&lt;/a&gt;; all the respondents for providing this useful feedback; and you, dear reader, for getting this far!&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>Hello World!</title>
   <link href="http://nickknowlson.com/blog/2011/07/23/hello-world/"/>
   <updated>2011-07-23T00:00:00-07:00</updated>
   <id>http://nickknowlson.com/blog/2011/07/23/hello-world</id>
   <content type="html">&lt;p&gt;This site is finally live! I have put a skeleton of content up here for now just so I can get it up, but over the coming months I&amp;#8217;ll be updating my Project pages with more detail as well as screenshots. I&amp;#8217;ll also put up the occasional blog post from time to time, and these will lean towards longer, more technical posts.&lt;/p&gt;

&lt;p&gt;I meant the logo up above to be temporary, but it is kind of growing on me, so it may stay for a while.&lt;/p&gt;

&lt;p&gt;The css and javascript are a bit clunky at the moment as well, but they work well enough for the moment, and there will be lots of time to optimize the heck out of them in the future.&lt;/p&gt;

&lt;p&gt;That&amp;#8217;s about all for the introductory post, the next one will probably be about something more interesting!&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>Command line file transfer using sshfs</title>
   <link href="http://nickknowlson.com/blog/2009/02/05/command-line-file-transfer/"/>
   <updated>2009-02-05T00:00:00-08:00</updated>
   <id>http://nickknowlson.com/blog/2009/02/05/command-line-file-transfer</id>
   <content type="html">&lt;p&gt;(&lt;strong&gt;**Old post alert**&lt;/strong&gt; This is an old post I dug up from sometime around college)&lt;/p&gt;

&lt;p&gt;I&amp;#8217;ve gotten really used to using bash now, so it&amp;#8217;s always a drag when I want to upload a file using sftp and lose my aliases, tab completion and everything else from my .bashrc. It&amp;#8217;s also more of a pain to copy directories.&lt;/p&gt;

&lt;p&gt;I know there are a couple of replacements for the default sftp client, and up until now, I had only tried lftp briefly. It was better,but not quite what I was looking for, and I found a bit awkward to use. Although that part could just be my own inexperience with it.&lt;/p&gt;

&lt;p&gt;Anyway, I just stumbled upon a solution to my problem that is dead simple and ALSO lets me get all the power and ease of use my personalized bash environment. Double win! It&amp;#8217;s called &lt;a href='http://fuse.sourceforge.net/sshfs.html'&gt;sshfs&lt;/a&gt; (SSH FileSystem), it&amp;#8217;s in the Debian and Ubuntu package repos already, and I doubtless should have found it a long time ago. It lets you mount a directory on your remote machine using ssh. Magical!&lt;/p&gt;

&lt;p&gt;In case you need it, here&amp;#8217;s a quick runthrough of what you need to get this working:&lt;/p&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='bash'&gt;sudo aptitude install sshfs
sshfs user@host: localmountpoint
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;It defaults to your home directory as the point to mount, but if you want to you can specify a location after &amp;#8216;host:&amp;#8217; like so:&lt;/p&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='bash'&gt;sshfs user@host:/home/user/data/ localmountpoint
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;When you&amp;#8217;re done, you can unmount it with this command:&lt;/p&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='bash'&gt;fusermount -u localmountpoint
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;If it a location that you use frequently like me, you could put an alias in your .bash_aliases file so mounting is a single &amp;#8216;mount_server&amp;#8217; command, and unmounting is &amp;#8216;unmount_server&amp;#8217;. Now when I want to upload something it&amp;#8217;s as painless as using cp or mv!&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>Haskell for great good</title>
   <link href="http://nickknowlson.com/blog/2009/01/14/haskell-for-great-good/"/>
   <updated>2009-01-14T00:00:00-08:00</updated>
   <id>http://nickknowlson.com/blog/2009/01/14/haskell-for-great-good</id>
   <content type="html">&lt;p&gt;(&lt;strong&gt;**Old post alert**&lt;/strong&gt; This is an old post I dug up from sometime around college)&lt;/p&gt;

&lt;p&gt;So I&amp;#8217;ve been doing bits of the &lt;a href='http://learnyouahaskell.com/'&gt;Learn You A Haskell For Great Good&lt;/a&gt; tutorial every now and then, and I just came across this &lt;a href='http://intoverflow.wordpress.com/2009/01/13/why-haskell-is-beyond-ready-for-prime-time/'&gt;blog post&lt;/a&gt; on Integer Overflow about why Haskell is &amp;#8220;ready for Prime Time&amp;#8221;.&lt;/p&gt;

&lt;p&gt;Now that I&amp;#8217;ve learned a bit about the basics, being told that I am able to search a repository of libraries by &lt;em&gt;type signature&lt;/em&gt; is really exciting. His example really drives it home even for those who don&amp;#8217;t know any Haskell.&lt;/p&gt;

&lt;p&gt;From the other things I&amp;#8217;ve read about Haskell in other articles (mostly that it will introduce you to new paradigms and &lt;em&gt;blow your mind&lt;/em&gt;) I am now more firmly committed than ever to do some kind of project in Haskell, just to see what it feels like.&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>Vim as an IDE</title>
   <link href="http://nickknowlson.com/blog/2008/12/16/vim-as-an-ide/"/>
   <updated>2008-12-16T00:00:00-08:00</updated>
   <id>http://nickknowlson.com/blog/2008/12/16/vim-as-an-ide</id>
   <content type="html">&lt;p&gt;(&lt;strong&gt;**Old post alert**&lt;/strong&gt; This is an old post I dug up from sometime around college)&lt;/p&gt;

&lt;p&gt;&lt;a href='http://i.imgur.com/8Yopn.png'&gt;Two&lt;/a&gt; &lt;a href='http://i.imgur.com/pZtNP.png'&gt;screenshots&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;In my linux class last year, I was introduced to vim, and I&amp;#8217;ve been fairly impressed with its powerful text-editing capabilities. What I didn&amp;#8217;t know is that it really can just about replace an IDE.&lt;/p&gt;

&lt;p&gt;What features does an IDE have that make it more useful than most text editors?&lt;/p&gt;

&lt;p&gt;Group 1&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Being able to jump to the definition of a variable, function, class etc.&lt;/li&gt;

&lt;li&gt;Autocompletion of variables, functions, classes etc.&lt;/li&gt;

&lt;li&gt;Outline of a class, with variables and functions&lt;/li&gt;

&lt;li&gt;Project explorer&lt;/li&gt;

&lt;li&gt;Syntax highlighting&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Group 2&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Compile-time error checking&lt;/li&gt;

&lt;li&gt;Step by step debugger&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Group 3&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Refactoring across projects&lt;/li&gt;

&lt;li&gt;Automatic insertion of language specific code (ex: imports needed in Eclipse, generate getters and setters in java, files that Visual Studio makes when you use the visual editor, templates in Dreamweaver)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Okay, that&amp;#8217;s quite a bit. Vim can do the first group perfectly, can sort of do the second group ( depending on language), and can&amp;#8217;t do the last one. At least as far as I know, anyway.&lt;/p&gt;

&lt;p&gt;Just recently I&amp;#8217;ve been interested in editing php with vim, so here&amp;#8217;s a few things I found out:&lt;/p&gt;

&lt;p&gt;&lt;a href='http://weierophinney.net/matthew/archives/164-Vim-Productivity-Tips-for-PHP-Developers.html'&gt;PHP parser check and running current file with the CLI&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Add the following to your .vimrc:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;quot; run file with PHP CLI (F5)
autocmd FileType php noremap &amp;lt;F5&amp;gt; :w!&amp;lt;CR&amp;gt; :!$HOME/bin/php %&amp;lt;CR&amp;gt;

&amp;quot; PHP parser check (F4)
autocmd FileType php noremap &amp;lt;F4&amp;gt; :!usr/bin/php -l &amp;lt;CR&amp;gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I changed the mappings to the function keys because &amp;#60;c-m&amp;#62; corresponds to &amp;#60;return&amp;#62; as well, which I find annoying because I like to use CTRL+ movement keys for changing windows.&lt;/p&gt;

&lt;p&gt;&lt;a href='http://www.vim.org/scripts/script.php?script_id=69'&gt;Project&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Just like what it sounds like, it opens a side window that keeps track of all your folders and files in the project that you specify. Has lots of neat features, including a project-wide search and replace, which can be useful. I suggest adding this to your .vimrc to have a &amp;#8216;Project toggle&amp;#8217; rather than typing :Project each time:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;nmap &amp;lt;silent&amp;gt; &amp;lt;F10&amp;gt; &amp;lt;plug&amp;gt;ToggleProject&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Also, since by default folds have a hideous color scheme in my theme, I added this to my .vimrc to change that a bit.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;hi Folded ctermbg=0 ctermfg=3
hi FoldColumn ctermbg=0 ctermfg=3&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Once you&amp;#8217;ve got the Project plugin installed, \C while in the Project window is the command that you&amp;#8217;ll probably want to use to help set up your first project (this took me a while). Also, make sure to use the help file that comes with the script (:help project).&lt;/p&gt;

&lt;p&gt;&lt;a href='http://www.vim.org/scripts/script.php?script_id=273'&gt;Taglist&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This opens up a side window that shows a list of classes, variables and functions in all files that you have open at the time. I set a a taglist toggle in my .vimrc file with this line: nmap &amp;#60;silent&amp;#62; &amp;#60;f12&amp;#62; :TlistToggle&amp;#60;cr&amp;#62;&lt;/p&gt;

&lt;p&gt;In taglist.vim I changed a couple of the values so that it would look a bit better:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;let Tlist_Use_Right_Window = 1 &amp;quot;so that it doesn&amp;#39;t conflict with the project plugin
let Tlist_WinWidth = 25 &amp;quot;make it a bit slimmer
let Tlist_Enable_Fold_Column = 0 &amp;quot;Disable the fold column (it&amp;#39;s thick and not too useful for me)
let Tlist_Inc_Winwidth = 0 &amp;quot;Don&amp;#39;t attempt to resize my terminal - this may vary depending on how you are running vim&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a href='http://weierophinney.net/matthew/archives/134-exuberant-ctags-with-PHP-in-Vim.html'&gt;Using ctags well&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This lets you jump around to the definition of functions, classes etc. Just follow his instructions.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Autocompletion&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&amp;#60;c-x&amp;#62; + &amp;#60;c-?&amp;#62; when in insert mode. You get a list of letters that can be used in place of ? when you press . Some notable ones are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;c-f&amp;gt;&lt;/code&gt; File - Autocompletes file names&lt;/li&gt;

&lt;li&gt;&lt;code&gt;&amp;lt;c-n&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;lt;c-p&amp;gt;&lt;/code&gt; Forward, Back respectively&lt;/li&gt;

&lt;li&gt;&lt;code&gt;&amp;lt;c-i&amp;gt;&lt;/code&gt; Path - keywords in the current and included files&lt;/li&gt;

&lt;li&gt;&lt;code&gt;&amp;lt;c-o&amp;gt;&lt;/code&gt; Omni - Omni complete.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Many thanks and full credit to Matthew Weier O&amp;#8217;Phinney, whose &lt;a href='http://weierophinney.net/matthew/archives/164-Vim-Productivity-Tips-for-PHP-Developers.html'&gt;blog post&lt;/a&gt; started me on all of this and indeed is the source of many of these tips.&lt;/p&gt;

&lt;p&gt;I didn&amp;#8217;t cover debugging, I&amp;#8217;ll save it for a later post maybe. If you&amp;#8217;re interested, go ahead and &lt;a href='http://www.vim.org/scripts/script_search_results.php?keywords=debug&amp;amp;amp;script_type=&amp;amp;amp;order_by=downloads&amp;amp;amp;direction=descending&amp;amp;amp;search=search'&gt;search the scripts&lt;/a&gt; for yourself.&lt;/p&gt;

&lt;p&gt;Also, here&amp;#8217;s some &lt;a href='http://stackoverflow.com/questions/95072/what-are-your-favorite-vim-tricks'&gt;vim tips and tricks&lt;/a&gt;!&lt;/p&gt;</content>
 </entry>
 
 
</feed>
